
Bootloader+.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001274  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013fc  080013fc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          000004d4  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004dc  200004dc  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   000022dc  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008e7  00000000  00000000  00022314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000218  00000000  00000000  00022c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  00022e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000110d  00000000  00000000  00022fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000a4f  00000000  00000000  000240d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00024b24  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000680  00000000  00000000  00024ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00025220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013e4 	.word	0x080013e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080013e4 	.word	0x080013e4

080001c8 <CAN1_init>:
 *  Created on: ??þ/??þ/????
 *      Author: hager mohamed
 */
#include "CAN.h"

void CAN1_init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
// gpio_init
// PD0 : CAN1_RX
// PD1 : CAN1_TX
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80001cc:	4a4c      	ldr	r2, [pc, #304]	; (8000300 <CAN1_init+0x138>)
 80001ce:	4b4c      	ldr	r3, [pc, #304]	; (8000300 <CAN1_init+0x138>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &= ~(GPIO_MODER_MODER0 + GPIO_MODER_MODER1);
 80001d8:	4a4a      	ldr	r2, [pc, #296]	; (8000304 <CAN1_init+0x13c>)
 80001da:	4b4a      	ldr	r3, [pc, #296]	; (8000304 <CAN1_init+0x13c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f023 030f 	bic.w	r3, r3, #15
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODER0_1 + GPIO_MODER_MODER1_1;
 80001e4:	4a47      	ldr	r2, [pc, #284]	; (8000304 <CAN1_init+0x13c>)
 80001e6:	4b47      	ldr	r3, [pc, #284]	; (8000304 <CAN1_init+0x13c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 030a 	orr.w	r3, r3, #10
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0] = (GPIOD->AFR[0] & ~0x000000FF) | 0x00000099;  //AF9
 80001f0:	4a44      	ldr	r2, [pc, #272]	; (8000304 <CAN1_init+0x13c>)
 80001f2:	4b44      	ldr	r3, [pc, #272]	; (8000304 <CAN1_init+0x13c>)
 80001f4:	6a1b      	ldr	r3, [r3, #32]
 80001f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001fa:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80001fe:	6213      	str	r3, [r2, #32]
	GPIOD->OTYPER &= ~(GPIO_OTYPER_OT_0 | GPIO_OTYPER_OT_1);     //push-pull
 8000200:	4a40      	ldr	r2, [pc, #256]	; (8000304 <CAN1_init+0x13c>)
 8000202:	4b40      	ldr	r3, [pc, #256]	; (8000304 <CAN1_init+0x13c>)
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	f023 0303 	bic.w	r3, r3, #3
 800020a:	6053      	str	r3, [r2, #4]
	GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPDR0 | GPIO_PUPDR_PUPDR1);
 800020c:	4a3d      	ldr	r2, [pc, #244]	; (8000304 <CAN1_init+0x13c>)
 800020e:	4b3d      	ldr	r3, [pc, #244]	; (8000304 <CAN1_init+0x13c>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	f023 030f 	bic.w	r3, r3, #15
 8000216:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= (GPIO_PUPDR_PUPDR0_0 | GPIO_PUPDR_PUPDR1_0);   //pull up
 8000218:	4a3a      	ldr	r2, [pc, #232]	; (8000304 <CAN1_init+0x13c>)
 800021a:	4b3a      	ldr	r3, [pc, #232]	; (8000304 <CAN1_init+0x13c>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	f043 0305 	orr.w	r3, r3, #5
 8000222:	60d3      	str	r3, [r2, #12]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0 | GPIO_OSPEEDER_OSPEEDR1;
 8000224:	4a37      	ldr	r2, [pc, #220]	; (8000304 <CAN1_init+0x13c>)
 8000226:	4b37      	ldr	r3, [pc, #220]	; (8000304 <CAN1_init+0x13c>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	f043 030f 	orr.w	r3, r3, #15
 800022e:	6093      	str	r3, [r2, #8]

	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;   //clock enable;
 8000230:	4a33      	ldr	r2, [pc, #204]	; (8000300 <CAN1_init+0x138>)
 8000232:	4b33      	ldr	r3, [pc, #204]	; (8000300 <CAN1_init+0x138>)
 8000234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800023a:	6413      	str	r3, [r2, #64]	; 0x40

//Automatic bus-off management
//Transmit FIFO priority driven by the request order
//Initialization request
	CAN1->MCR |= CAN_MCR_ABOM | CAN_MCR_TXFP | CAN_MCR_INRQ;
 800023c:	4a32      	ldr	r2, [pc, #200]	; (8000308 <CAN1_init+0x140>)
 800023e:	4b32      	ldr	r3, [pc, #200]	; (8000308 <CAN1_init+0x140>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0345 	orr.w	r3, r3, #69	; 0x45
 8000246:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~ CAN_MCR_SLEEP;  // exit Sleep mode
 8000248:	4a2f      	ldr	r2, [pc, #188]	; (8000308 <CAN1_init+0x140>)
 800024a:	4b2f      	ldr	r3, [pc, #188]	; (8000308 <CAN1_init+0x140>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f023 0302 	bic.w	r3, r3, #2
 8000252:	6013      	str	r3, [r2, #0]
//wait for Initialization mode
	while ((CAN1->MSR & CAN_MSR_SLAK) || !(CAN1->MSR & CAN_MSR_INAK))
 8000254:	bf00      	nop
 8000256:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <CAN1_init+0x140>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f9      	bne.n	8000256 <CAN1_init+0x8e>
 8000262:	4b29      	ldr	r3, [pc, #164]	; (8000308 <CAN1_init+0x140>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f3      	beq.n	8000256 <CAN1_init+0x8e>
//tPCLK = 16 MHZ
//BaudRate =500 Kbit/s
//Sample-Point at: 87.5%
//Number of time quanta = 16
//Seg_1=13 tq   +  Seg_2=2 tq    + SYNC_SEG=1 tq
	CAN1->BTR = 0x001c0001;
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <CAN1_init+0x140>)
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <CAN1_init+0x144>)
 8000272:	61da      	str	r2, [r3, #28]
//    CAN1->BTR |=CAN_BTR_LBKM;    // Loop Back Mode enabled
//	CAN1->BTR |=CAN_BTR_SILM;      //silent mode

//For receiption (filter configuration)
	CAN1->FMR |= CAN_FMR_FINIT;   // Initialization mode for the filters
 8000274:	4a24      	ldr	r2, [pc, #144]	; (8000308 <CAN1_init+0x140>)
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <CAN1_init+0x140>)
 8000278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

//filter 1 :Single 32-bit scale configuration
//         :Identifier List mode
//filter numbers : #2 0x77
//                 #3 not used
	CAN1->FS1R |= CAN_FS1R_FSC1;
 8000284:	4a20      	ldr	r2, [pc, #128]	; (8000308 <CAN1_init+0x140>)
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <CAN1_init+0x140>)
 8000288:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800028c:	f043 0302 	orr.w	r3, r3, #2
 8000290:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	CAN1->FM1R |= CAN_FM1R_FBM1;
 8000294:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <CAN1_init+0x140>)
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <CAN1_init+0x140>)
 8000298:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	CAN1->sFilterRegister[1].FR1 = (0x77 << 21); //filter number  #2
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <CAN1_init+0x140>)
 80002a6:	f04f 626e 	mov.w	r2, #249561088	; 0xee00000
 80002aa:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	CAN1->sFilterRegister[1].FR2 = (0x77 << 21); //filter number  #3
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <CAN1_init+0x140>)
 80002b0:	f04f 626e 	mov.w	r2, #249561088	; 0xee00000
 80002b4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
//CAN1->FA1R |=(1<<14)| (1<<15);      //activate filter 14,15
	/******************************************************************************/
//For interrupt
//CAN1->IER |=CAN_IER_FMPIE0;
//NVIC->ISER[0] |=(1<<20);             //interrupt number #20
	CAN1->FFA1R &= ~(CAN_FFA1R_FFA0 | CAN_FFA1R_FFA1); //Filter 0,1 assigned to FIFO 0
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <CAN1_init+0x140>)
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <CAN1_init+0x140>)
 80002bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80002c0:	f023 0303 	bic.w	r3, r3, #3
 80002c4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	CAN1->FA1R |= CAN_FA1R_FACT0 | CAN_FA1R_FACT1;      //activate filter 0,1
 80002c8:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <CAN1_init+0x140>)
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <CAN1_init+0x140>)
 80002cc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80002d0:	f043 0303 	orr.w	r3, r3, #3
 80002d4:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	CAN1->FMR &= ~CAN_FMR_FINIT;                        //Active filters mode
 80002d8:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <CAN1_init+0x140>)
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <CAN1_init+0x140>)
 80002dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80002e0:	f023 0301 	bic.w	r3, r3, #1
 80002e4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1->MCR &= ~(CAN_MCR_INRQ | CAN_MCR_SLEEP);       //request normal mode
 80002e8:	4a07      	ldr	r2, [pc, #28]	; (8000308 <CAN1_init+0x140>)
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <CAN1_init+0x140>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f023 0303 	bic.w	r3, r3, #3
 80002f2:	6013      	str	r3, [r2, #0]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40020c00 	.word	0x40020c00
 8000308:	40006400 	.word	0x40006400
 800030c:	001c0001 	.word	0x001c0001

08000310 <CAN_reset>:

void CAN_reset(void) {
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	RCC->AHB1RSTR = RCC_AHB1RSTR_GPIODRST;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <CAN_reset+0x28>)
 8000316:	2208      	movs	r2, #8
 8000318:	611a      	str	r2, [r3, #16]
	RCC->AHB1RSTR = 0;
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <CAN_reset+0x28>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR = RCC_APB1RSTR_CAN1RST;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <CAN_reset+0x28>)
 8000322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000326:	621a      	str	r2, [r3, #32]
	RCC->APB1RSTR = 0;
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <CAN_reset+0x28>)
 800032a:	2200      	movs	r2, #0
 800032c:	621a      	str	r2, [r3, #32]

}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40023800 	.word	0x40023800

0800033c <CAN1_transmit>:

enum_error_type CAN1_transmit(uint8_t MailBox, CAN_message_TypeDef msg) {
 800033c:	b084      	sub	sp, #16
 800033e:	b490      	push	{r4, r7}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	4604      	mov	r4, r0
 8000346:	f107 001c 	add.w	r0, r7, #28
 800034a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800034e:	4623      	mov	r3, r4
 8000350:	71fb      	strb	r3, [r7, #7]
	enum_error_type ret_val = E_OK;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
//check if transmission mailbox empty
	if (CAN1->TSR & (1 << (26 + MailBox))) {
 8000356:	4b61      	ldr	r3, [pc, #388]	; (80004dc <CAN1_transmit+0x1a0>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	79fa      	ldrb	r2, [r7, #7]
 800035c:	321a      	adds	r2, #26
 800035e:	2101      	movs	r1, #1
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	f000 80ae 	beq.w	80004c8 <CAN1_transmit+0x18c>
		//reset identifier register
		CAN1->sTxMailBox[MailBox].TIR = 0;
 800036c:	4a5b      	ldr	r2, [pc, #364]	; (80004dc <CAN1_transmit+0x1a0>)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	3318      	adds	r3, #24
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	4413      	add	r3, r2
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
		//standard id or Extended
		//Data frame or remote frame
		CAN1->sTxMailBox[MailBox].TIR |= (msg.IDE << 1) | (msg.RTR << 2);
 800037a:	4c58      	ldr	r4, [pc, #352]	; (80004dc <CAN1_transmit+0x1a0>)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	4957      	ldr	r1, [pc, #348]	; (80004dc <CAN1_transmit+0x1a0>)
 8000380:	79fa      	ldrb	r2, [r7, #7]
 8000382:	3218      	adds	r2, #24
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	440a      	add	r2, r1
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	7f39      	ldrb	r1, [r7, #28]
 800038c:	0048      	lsls	r0, r1, #1
 800038e:	7f79      	ldrb	r1, [r7, #29]
 8000390:	0089      	lsls	r1, r1, #2
 8000392:	4301      	orrs	r1, r0
 8000394:	430a      	orrs	r2, r1
 8000396:	3318      	adds	r3, #24
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	4423      	add	r3, r4
 800039c:	601a      	str	r2, [r3, #0]
		//set CAN identifier
		if (msg.IDE)
 800039e:	7f3b      	ldrb	r3, [r7, #28]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d00f      	beq.n	80003c4 <CAN1_transmit+0x88>
			CAN1->sTxMailBox[MailBox].TIR |= (msg.id << 3);
 80003a4:	484d      	ldr	r0, [pc, #308]	; (80004dc <CAN1_transmit+0x1a0>)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	494c      	ldr	r1, [pc, #304]	; (80004dc <CAN1_transmit+0x1a0>)
 80003aa:	79fa      	ldrb	r2, [r7, #7]
 80003ac:	3218      	adds	r2, #24
 80003ae:	0112      	lsls	r2, r2, #4
 80003b0:	440a      	add	r2, r1
 80003b2:	6811      	ldr	r1, [r2, #0]
 80003b4:	6a3a      	ldr	r2, [r7, #32]
 80003b6:	00d2      	lsls	r2, r2, #3
 80003b8:	430a      	orrs	r2, r1
 80003ba:	3318      	adds	r3, #24
 80003bc:	011b      	lsls	r3, r3, #4
 80003be:	4403      	add	r3, r0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	e00e      	b.n	80003e2 <CAN1_transmit+0xa6>
		else
			CAN1->sTxMailBox[MailBox].TIR |= (msg.id << 21);
 80003c4:	4845      	ldr	r0, [pc, #276]	; (80004dc <CAN1_transmit+0x1a0>)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4944      	ldr	r1, [pc, #272]	; (80004dc <CAN1_transmit+0x1a0>)
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	3218      	adds	r2, #24
 80003ce:	0112      	lsls	r2, r2, #4
 80003d0:	440a      	add	r2, r1
 80003d2:	6811      	ldr	r1, [r2, #0]
 80003d4:	6a3a      	ldr	r2, [r7, #32]
 80003d6:	0552      	lsls	r2, r2, #21
 80003d8:	430a      	orrs	r2, r1
 80003da:	3318      	adds	r3, #24
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	4403      	add	r3, r0
 80003e0:	601a      	str	r2, [r3, #0]
		//set data length
		CAN1->sTxMailBox[MailBox].TDTR = (CAN1->sTxMailBox[MailBox].TDTR
 80003e2:	493e      	ldr	r1, [pc, #248]	; (80004dc <CAN1_transmit+0x1a0>)
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	483d      	ldr	r0, [pc, #244]	; (80004dc <CAN1_transmit+0x1a0>)
 80003e8:	79fa      	ldrb	r2, [r7, #7]
 80003ea:	3218      	adds	r2, #24
 80003ec:	0112      	lsls	r2, r2, #4
 80003ee:	4402      	add	r2, r0
 80003f0:	3204      	adds	r2, #4
 80003f2:	6812      	ldr	r2, [r2, #0]
				& (~0x0f)) | msg.data_legth;
 80003f4:	f022 020f 	bic.w	r2, r2, #15
 80003f8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80003fc:	4302      	orrs	r2, r0
		CAN1->sTxMailBox[MailBox].TDTR = (CAN1->sTxMailBox[MailBox].TDTR
 80003fe:	3318      	adds	r3, #24
 8000400:	011b      	lsls	r3, r3, #4
 8000402:	440b      	add	r3, r1
 8000404:	3304      	adds	r3, #4
 8000406:	601a      	str	r2, [r3, #0]
		//reset transmit data registers
		CAN1->sTxMailBox[MailBox].TDLR = 0;
 8000408:	4a34      	ldr	r2, [pc, #208]	; (80004dc <CAN1_transmit+0x1a0>)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	011b      	lsls	r3, r3, #4
 800040e:	4413      	add	r3, r2
 8000410:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[MailBox].TDHR = 0;
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <CAN1_transmit+0x1a0>)
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	011b      	lsls	r3, r3, #4
 800041e:	4413      	add	r3, r2
 8000420:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
		//set TX data
		for (int i = 0; i < msg.data_legth; i++) {
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	e037      	b.n	800049e <CAN1_transmit+0x162>
			if (i < 4)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2b03      	cmp	r3, #3
 8000432:	dc18      	bgt.n	8000466 <CAN1_transmit+0x12a>
				CAN1->sTxMailBox[MailBox].TDLR |= (msg.pdata[i] << (8 * i));
 8000434:	4c29      	ldr	r4, [pc, #164]	; (80004dc <CAN1_transmit+0x1a0>)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4928      	ldr	r1, [pc, #160]	; (80004dc <CAN1_transmit+0x1a0>)
 800043a:	79fa      	ldrb	r2, [r7, #7]
 800043c:	0112      	lsls	r2, r2, #4
 800043e:	440a      	add	r2, r1
 8000440:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 8000444:	6812      	ldr	r2, [r2, #0]
 8000446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000448:	68b9      	ldr	r1, [r7, #8]
 800044a:	4401      	add	r1, r0
 800044c:	7809      	ldrb	r1, [r1, #0]
 800044e:	4608      	mov	r0, r1
 8000450:	68b9      	ldr	r1, [r7, #8]
 8000452:	00c9      	lsls	r1, r1, #3
 8000454:	fa00 f101 	lsl.w	r1, r0, r1
 8000458:	430a      	orrs	r2, r1
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4423      	add	r3, r4
 800045e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	e018      	b.n	8000498 <CAN1_transmit+0x15c>
			else
				CAN1->sTxMailBox[MailBox].TDHR |=
 8000466:	4c1d      	ldr	r4, [pc, #116]	; (80004dc <CAN1_transmit+0x1a0>)
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	491c      	ldr	r1, [pc, #112]	; (80004dc <CAN1_transmit+0x1a0>)
 800046c:	79fa      	ldrb	r2, [r7, #7]
 800046e:	0112      	lsls	r2, r2, #4
 8000470:	440a      	add	r2, r1
 8000472:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 8000476:	6812      	ldr	r2, [r2, #0]
						(msg.pdata[i] << (8 * (i - 4)));
 8000478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800047a:	68b9      	ldr	r1, [r7, #8]
 800047c:	4401      	add	r1, r0
 800047e:	7809      	ldrb	r1, [r1, #0]
 8000480:	4608      	mov	r0, r1
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	3904      	subs	r1, #4
 8000486:	00c9      	lsls	r1, r1, #3
 8000488:	fa00 f101 	lsl.w	r1, r0, r1
				CAN1->sTxMailBox[MailBox].TDHR |=
 800048c:	430a      	orrs	r2, r1
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	4423      	add	r3, r4
 8000492:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000496:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < msg.data_legth; i++) {
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	3301      	adds	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004a2:	461a      	mov	r2, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	dcc1      	bgt.n	800042e <CAN1_transmit+0xf2>
		}
		CAN1->sTxMailBox[MailBox].TIR |= CAN_TI0R_TXRQ;  //transmission request
 80004aa:	490c      	ldr	r1, [pc, #48]	; (80004dc <CAN1_transmit+0x1a0>)
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <CAN1_transmit+0x1a0>)
 80004b0:	79fa      	ldrb	r2, [r7, #7]
 80004b2:	3218      	adds	r2, #24
 80004b4:	0112      	lsls	r2, r2, #4
 80004b6:	4402      	add	r2, r0
 80004b8:	6812      	ldr	r2, [r2, #0]
 80004ba:	f042 0201 	orr.w	r2, r2, #1
 80004be:	3318      	adds	r3, #24
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	440b      	add	r3, r1
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e001      	b.n	80004cc <CAN1_transmit+0x190>
	} else {
		ret_val = E_NOT_OK;
 80004c8:	2301      	movs	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc90      	pop	{r4, r7}
 80004d6:	b004      	add	sp, #16
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40006400 	.word	0x40006400

080004e0 <CAN1_receive>:

enum_error_type CAN1_receive(CAN_message_TypeDef* msg, uint8_t* match_index) {
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	enum_error_type ret_val = E_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	75fb      	strb	r3, [r7, #23]
	//check fifo messge pending
	if (CAN1->RF0R & CAN_RF0R_FMP0) {
 80004ee:	4b75      	ldr	r3, [pc, #468]	; (80006c4 <CAN1_receive+0x1e4>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d06a      	beq.n	80005d0 <CAN1_receive+0xf0>
		*match_index = (CAN1->sFIFOMailBox[0].RDTR & CAN_RDT0R_FMI) >> 8;
 80004fa:	4b72      	ldr	r3, [pc, #456]	; (80006c4 <CAN1_receive+0x1e4>)
 80004fc:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8000500:	0a1b      	lsrs	r3, r3, #8
 8000502:	b2da      	uxtb	r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	701a      	strb	r2, [r3, #0]
		msg->data_legth = (CAN1->sFIFOMailBox[0].RDTR & CAN_RDT0R_DLC); //get data length
 8000508:	4b6e      	ldr	r3, [pc, #440]	; (80006c4 <CAN1_receive+0x1e4>)
 800050a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 030f 	and.w	r3, r3, #15
 8000514:	b2da      	uxtb	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	721a      	strb	r2, [r3, #8]
		msg->IDE = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_IDE) >> 2;
 800051a:	4b6a      	ldr	r3, [pc, #424]	; (80006c4 <CAN1_receive+0x1e4>)
 800051c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000520:	089b      	lsrs	r3, r3, #2
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	701a      	strb	r2, [r3, #0]
		msg->RTR = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_RTR) >> 1;
 800052e:	4b65      	ldr	r3, [pc, #404]	; (80006c4 <CAN1_receive+0x1e4>)
 8000530:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2da      	uxtb	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	705a      	strb	r2, [r3, #1]
		if (msg->IDE)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <CAN1_receive+0x7c>
			msg->id = (CAN1->sFIFOMailBox[0].RIR
 800054a:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <CAN1_receive+0x1e4>)
 800054c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
					& (CAN_RI0R_EXID | CAN_RI0R_STID)) >> 3;
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
			msg->id = (CAN1->sFIFOMailBox[0].RIR
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	e007      	b.n	800056c <CAN1_receive+0x8c>
		else
			msg->id = (CAN1->sFIFOMailBox[0].RIR & CAN_RI0R_STID) >> 21;
 800055c:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <CAN1_receive+0x1e4>)
 800055e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000562:	0d5b      	lsrs	r3, r3, #21
 8000564:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < msg->data_legth; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	e021      	b.n	80005b6 <CAN1_receive+0xd6>
			if (i < 4)
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	2b03      	cmp	r3, #3
 8000576:	dc0d      	bgt.n	8000594 <CAN1_receive+0xb4>
				msg->pdata[i] = (CAN1->sFIFOMailBox[0].RDLR >> (i * 8)) & 0xFF;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	4413      	add	r3, r2
 8000580:	4a50      	ldr	r2, [pc, #320]	; (80006c4 <CAN1_receive+0x1e4>)
 8000582:	f8d2 11b8 	ldr.w	r1, [r2, #440]	; 0x1b8
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	fa21 f202 	lsr.w	r2, r1, r2
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e00d      	b.n	80005b0 <CAN1_receive+0xd0>
			else
				msg->pdata[i] = (CAN1->sFIFOMailBox[0].RDHR >> ((i - 4) * 8))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	4413      	add	r3, r2
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <CAN1_receive+0x1e4>)
 800059e:	f8d2 11bc 	ldr.w	r1, [r2, #444]	; 0x1bc
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	3a04      	subs	r2, #4
 80005a6:	00d2      	lsls	r2, r2, #3
 80005a8:	fa21 f202 	lsr.w	r2, r1, r2
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < msg->data_legth; i++) {
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	3301      	adds	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7a1b      	ldrb	r3, [r3, #8]
 80005ba:	461a      	mov	r2, r3
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dcd7      	bgt.n	8000572 <CAN1_receive+0x92>
						& 0xFF;
		}
		CAN1->RF0R |= CAN_RF0R_RFOM0;       //release FIFO
 80005c2:	4a40      	ldr	r2, [pc, #256]	; (80006c4 <CAN1_receive+0x1e4>)
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <CAN1_receive+0x1e4>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	e072      	b.n	80006b6 <CAN1_receive+0x1d6>
	} else if (CAN1->RF1R & CAN_RF1R_FMP1) {
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <CAN1_receive+0x1e4>)
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d06a      	beq.n	80006b2 <CAN1_receive+0x1d2>
		*match_index = (CAN1->sFIFOMailBox[1].RDTR & CAN_RDT1R_FMI) >> 8;
 80005dc:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <CAN1_receive+0x1e4>)
 80005de:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	701a      	strb	r2, [r3, #0]
		msg->data_legth = (CAN1->sFIFOMailBox[1].RDTR & CAN_RDT1R_DLC); //get data length
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <CAN1_receive+0x1e4>)
 80005ec:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	721a      	strb	r2, [r3, #8]
		msg->IDE = (CAN1->sFIFOMailBox[1].RIR & CAN_RI1R_IDE) >> 2;
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <CAN1_receive+0x1e4>)
 80005fe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
		msg->RTR = (CAN1->sFIFOMailBox[1].RIR & CAN_RI1R_RTR) >> 1;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <CAN1_receive+0x1e4>)
 8000612:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000616:	085b      	lsrs	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	705a      	strb	r2, [r3, #1]
		if (msg->IDE)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d008      	beq.n	800063e <CAN1_receive+0x15e>
			msg->id = (CAN1->sFIFOMailBox[1].RIR
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <CAN1_receive+0x1e4>)
 800062e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
					& (CAN_RI1R_EXID | CAN_RI1R_STID)) >> 3;
 8000632:	08db      	lsrs	r3, r3, #3
 8000634:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
			msg->id = (CAN1->sFIFOMailBox[1].RIR
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	e007      	b.n	800064e <CAN1_receive+0x16e>
		else
			msg->id = (CAN1->sFIFOMailBox[1].RIR & CAN_RI1R_STID) >> 21;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <CAN1_receive+0x1e4>)
 8000640:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000644:	0d5b      	lsrs	r3, r3, #21
 8000646:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < msg->data_legth; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e021      	b.n	8000698 <CAN1_receive+0x1b8>
			if (i < 4)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b03      	cmp	r3, #3
 8000658:	dc0d      	bgt.n	8000676 <CAN1_receive+0x196>
				msg->pdata[i] = (CAN1->sFIFOMailBox[1].RDLR >> (i * 8)) & 0xFF;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <CAN1_receive+0x1e4>)
 8000664:	f8d2 11c8 	ldr.w	r1, [r2, #456]	; 0x1c8
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	00d2      	lsls	r2, r2, #3
 800066c:	fa21 f202 	lsr.w	r2, r1, r2
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e00d      	b.n	8000692 <CAN1_receive+0x1b2>
			else
				msg->pdata[i] = (CAN1->sFIFOMailBox[1].RDHR >> ((i - 4) * 8))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <CAN1_receive+0x1e4>)
 8000680:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	3a04      	subs	r2, #4
 8000688:	00d2      	lsls	r2, r2, #3
 800068a:	fa21 f202 	lsr.w	r2, r1, r2
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < msg->data_legth; i++) {
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7a1b      	ldrb	r3, [r3, #8]
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dcd7      	bgt.n	8000654 <CAN1_receive+0x174>
						& 0xFF;
		}
		CAN1->RF1R |= CAN_RF1R_RFOM1;       //release FIFO
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <CAN1_receive+0x1e4>)
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <CAN1_receive+0x1e4>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6113      	str	r3, [r2, #16]
 80006b0:	e001      	b.n	80006b6 <CAN1_receive+0x1d6>
	} else {
		ret_val = E_NOT_OK;
 80006b2:	2301      	movs	r3, #1
 80006b4:	75fb      	strb	r3, [r7, #23]
	}
	return ret_val;
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	371c      	adds	r7, #28
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40006400 	.word	0x40006400

080006c8 <CAN_init>:
		ret_val = E_NOT_OK;
	}
	return ret_val;
}

void CAN_init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	CAN1_init();
 80006cc:	f7ff fd7c 	bl	80001c8 <CAN1_init>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <CAN_transmit_blocking>:

enum_error_type CAN_transmit_blocking(uint8_t * pdata, uint32_t size) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	enum_error_type ret_val = E_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	77fb      	strb	r3, [r7, #31]
	CAN_message_TypeDef TX_msg = { .IDE = 0, .RTR = 0, .id = CAN_TRANSMIT_ID,
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
 80006e6:	2300      	movs	r3, #0
 80006e8:	737b      	strb	r3, [r7, #13]
 80006ea:	2355      	movs	r3, #85	; 0x55
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	753b      	strb	r3, [r7, #20]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	61bb      	str	r3, [r7, #24]
			.data_legth = size, .pdata = pdata };
	while (size > 0) {
 80006f8:	e02a      	b.n	8000750 <CAN_transmit_blocking+0x7c>
		if (size <= 8) {
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d812      	bhi.n	8000726 <CAN_transmit_blocking+0x52>
			TX_msg.data_legth = size;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	753b      	strb	r3, [r7, #20]
			ret_val |= CAN1_transmit(0, TX_msg);
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe13 	bl	800033c <CAN1_transmit>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	7ffb      	ldrb	r3, [r7, #31]
 800071c:	4313      	orrs	r3, r2
 800071e:	77fb      	strb	r3, [r7, #31]
			size = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	e014      	b.n	8000750 <CAN_transmit_blocking+0x7c>
		} else {
			TX_msg.data_legth = 8;
 8000726:	2308      	movs	r3, #8
 8000728:	753b      	strb	r3, [r7, #20]
			ret_val |= CAN1_transmit(0, TX_msg);
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe01 	bl	800033c <CAN1_transmit>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	4313      	orrs	r3, r2
 8000742:	77fb      	strb	r3, [r7, #31]
			size -= 8;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3b08      	subs	r3, #8
 8000748:	603b      	str	r3, [r7, #0]
			TX_msg.pdata += 8;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3308      	adds	r3, #8
 800074e:	61bb      	str	r3, [r7, #24]
	while (size > 0) {
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1d1      	bne.n	80006fa <CAN_transmit_blocking+0x26>
		}
	}
	return ret_val;
 8000756:	7ffb      	ldrb	r3, [r7, #31]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <CAN_receive_blocking>:
uint8_t x = 0;
enum_error_type ret = E_NOT_OK;
enum_error_type CAN_receive_blocking(uint8_t * pdata, uint32_t size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]

	uint8_t match_index;
	CAN_message_TypeDef RX_msg;
	RX_msg.pdata = pdata;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	61bb      	str	r3, [r7, #24]
	ret = E_NOT_OK;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <CAN_receive_blocking+0x68>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
	while (size > 0) {
 8000774:	e01f      	b.n	80007b6 <CAN_receive_blocking+0x56>
		if(ret == E_NOT_OK)
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <CAN_receive_blocking+0x68>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10b      	bne.n	8000796 <CAN_receive_blocking+0x36>
		ret = CAN1_receive(&RX_msg, &match_index);
 800077e:	f107 021f 	add.w	r2, r7, #31
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fea9 	bl	80004e0 <CAN1_receive>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <CAN_receive_blocking+0x68>)
 8000794:	701a      	strb	r2, [r3, #0]

		if(ret == E_OK)
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <CAN_receive_blocking+0x68>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10b      	bne.n	80007b6 <CAN_receive_blocking+0x56>
		{
			x = 1;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <CAN_receive_blocking+0x6c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
			size =size - RX_msg.data_legth;
 80007a4:	7d3b      	ldrb	r3, [r7, #20]
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	603b      	str	r3, [r7, #0]
			RX_msg.pdata += RX_msg.data_legth;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	7d3a      	ldrb	r2, [r7, #20]
 80007b2:	4413      	add	r3, r2
 80007b4:	61bb      	str	r3, [r7, #24]
	while (size > 0) {
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1dc      	bne.n	8000776 <CAN_receive_blocking+0x16>

		}
	}
	return ret;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <CAN_receive_blocking+0x68>)
 80007be:	781b      	ldrb	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000024 	.word	0x20000024

080007d0 <FLASH_init>:
#include "stm32f4xx.h"




void FLASH_init(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
//unlock flash
	FLASH->KEYR = 0x45670123;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <FLASH_init+0x40>)
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <FLASH_init+0x44>)
 80007d8:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <FLASH_init+0x40>)
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <FLASH_init+0x48>)
 80007de:	605a      	str	r2, [r3, #4]
//config parallelism
	FLASH->CR &= ~FLASH_CR_PSIZE;
 80007e0:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <FLASH_init+0x40>)
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <FLASH_init+0x40>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007ea:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PSIZE_1;   //program x32
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <FLASH_init+0x40>)
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <FLASH_init+0x40>)
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6113      	str	r3, [r2, #16]
//lock flash
	FLASH->CR |= FLASH_CR_LOCK;
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <FLASH_init+0x40>)
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <FLASH_init+0x40>)
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	6113      	str	r3, [r2, #16]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023c00 	.word	0x40023c00
 8000814:	45670123 	.word	0x45670123
 8000818:	cdef89ab 	.word	0xcdef89ab

0800081c <EraseSectors>:

enum_error_type EraseSectors(uint8_t first_sector, uint8_t sectors_num) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
	enum_error_type ret_val = E_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
	Flash_unlock();
 8000830:	f000 f8a6 	bl	8000980 <Flash_unlock>
	for (uint8_t i = 0; i < sectors_num; i++) {
 8000834:	2300      	movs	r3, #0
 8000836:	73bb      	strb	r3, [r7, #14]
 8000838:	e03b      	b.n	80008b2 <EraseSectors+0x96>
		while (FLASH->SR & FLASH_SR_BSY)
 800083a:	bf00      	nop
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <EraseSectors+0xac>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f9      	bne.n	800083c <EraseSectors+0x20>
			;
		FLASH->CR |= FLASH_CR_SER;
 8000848:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <EraseSectors+0xac>)
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <EraseSectors+0xac>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6113      	str	r3, [r2, #16]
		FLASH->CR &= ~FLASH_CR_SNB;
 8000854:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <EraseSectors+0xac>)
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <EraseSectors+0xac>)
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800085e:	6113      	str	r3, [r2, #16]
		FLASH->CR |= first_sector << 3;
 8000860:	4919      	ldr	r1, [pc, #100]	; (80008c8 <EraseSectors+0xac>)
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <EraseSectors+0xac>)
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	00d2      	lsls	r2, r2, #3
 800086a:	4313      	orrs	r3, r2
 800086c:	610b      	str	r3, [r1, #16]
		FLASH->CR |= FLASH_CR_STRT;
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <EraseSectors+0xac>)
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <EraseSectors+0xac>)
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000878:	6113      	str	r3, [r2, #16]
		while (FLASH->SR & FLASH_SR_BSY)
 800087a:	bf00      	nop
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <EraseSectors+0xac>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f9      	bne.n	800087c <EraseSectors+0x60>
			;
		if (!(FLASH->SR & FLASH_SR_WRPERR)) {
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <EraseSectors+0xac>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	2b00      	cmp	r3, #0
 8000892:	d008      	beq.n	80008a6 <EraseSectors+0x8a>
			/*Sector erased successfully*/
		} else {
			/*Sector erase faild*/
			ret_val = E_NOT_OK;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
			FLASH->SR |= FLASH_SR_WRPERR;    //clear the flage
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <EraseSectors+0xac>)
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <EraseSectors+0xac>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	60d3      	str	r3, [r2, #12]
			break;
 80008a4:	e009      	b.n	80008ba <EraseSectors+0x9e>
		}
		first_sector++;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	3301      	adds	r3, #1
 80008aa:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < sectors_num; i++) {
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	3301      	adds	r3, #1
 80008b0:	73bb      	strb	r3, [r7, #14]
 80008b2:	7bba      	ldrb	r2, [r7, #14]
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3bf      	bcc.n	800083a <EraseSectors+0x1e>
	}
	Flash_lock();
 80008ba:	f000 f851 	bl	8000960 <Flash_lock>
	return ret_val;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023c00 	.word	0x40023c00

080008cc <Flash_write>:

enum_error_type Flash_write(uint32_t Address, uint32_t* pdata,
		uint16_t Size) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	80fb      	strh	r3, [r7, #6]
	enum_error_type ret_val = E_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	75fb      	strb	r3, [r7, #23]
	Flash_unlock();
 80008de:	f000 f84f 	bl	8000980 <Flash_unlock>
	while (FLASH->SR & FLASH_SR_BSY)
 80008e2:	bf00      	nop
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <Flash_write+0x90>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f9      	bne.n	80008e4 <Flash_write+0x18>
		;
	FLASH->CR |= FLASH_CR_PG;
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <Flash_write+0x90>)
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <Flash_write+0x90>)
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6113      	str	r3, [r2, #16]
	for (int i = 0; i < Size; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	e00c      	b.n	800091c <Flash_write+0x50>
		*(unsigned int *) Address = *(&pdata[i]);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	440a      	add	r2, r1
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	601a      	str	r2, [r3, #0]
		Address += 4;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3304      	adds	r3, #4
 8000914:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < Size; i++) {
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	3301      	adds	r3, #1
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	88fa      	ldrh	r2, [r7, #6]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	dcee      	bgt.n	8000902 <Flash_write+0x36>
	}
	while (FLASH->SR & FLASH_SR_BSY)
 8000924:	bf00      	nop
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <Flash_write+0x90>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f9      	bne.n	8000926 <Flash_write+0x5a>
		;
	if (!(FLASH->SR & (FLASH_SR_WRPERR | FLASH_SR_PGAERR))) {
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <Flash_write+0x90>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <Flash_write+0x82>
		/* write data success*/
	} else {
		/* write data faild*/
		FLASH->SR |= FLASH_SR_WRPERR | FLASH_SR_PGAERR; //clear the flages
 800093e:	4a07      	ldr	r2, [pc, #28]	; (800095c <Flash_write+0x90>)
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <Flash_write+0x90>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000948:	60d3      	str	r3, [r2, #12]
		ret_val = E_NOT_OK;
 800094a:	2301      	movs	r3, #1
 800094c:	75fb      	strb	r3, [r7, #23]
	}
	Flash_lock();
 800094e:	f000 f807 	bl	8000960 <Flash_lock>
	return ret_val;
 8000952:	7dfb      	ldrb	r3, [r7, #23]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023c00 	.word	0x40023c00

08000960 <Flash_lock>:

void Flash_lock(void) {
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <Flash_lock+0x1c>)
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <Flash_lock+0x1c>)
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096e:	6113      	str	r3, [r2, #16]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023c00 	.word	0x40023c00

08000980 <Flash_unlock>:

void Flash_unlock(void) {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	FLASH->KEYR = 0x45670123;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <Flash_unlock+0x1c>)
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <Flash_unlock+0x20>)
 8000988:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <Flash_unlock+0x1c>)
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <Flash_unlock+0x24>)
 800098e:	605a      	str	r2, [r3, #4]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00
 80009a0:	45670123 	.word	0x45670123
 80009a4:	cdef89ab 	.word	0xcdef89ab

080009a8 <USART2_IRQHandler>:
		DMA1_Stream6->CR |= DMA_SxCR_EN;
	}
	return ret_val;
}

void USART2_IRQHandler(void) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
	if (USART2->SR & USART_SR_RXNE) {
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <USART2_IRQHandler+0x94>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
	}
	if (USART2->SR & USART_SR_TC) {
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <USART2_IRQHandler+0x94>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
	}
	if (USART2->SR & USART_SR_IDLE) {
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <USART2_IRQHandler+0x94>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d034      	beq.n	8000a2e <USART2_IRQHandler+0x86>
		(void) USART2->SR;      //to clear the flag
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <USART2_IRQHandler+0x94>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
		(void) USART2->DR;          //to clear the flag
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <USART2_IRQHandler+0x94>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
		DMA1_Stream5->CR &= ~DMA_SxCR_EN;
 80009cc:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <USART2_IRQHandler+0x98>)
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <USART2_IRQHandler+0x98>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	6013      	str	r3, [r2, #0]
		while (DMA1_Stream5->CR & DMA_SxCR_EN)
 80009d8:	bf00      	nop
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <USART2_IRQHandler+0x98>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1f9      	bne.n	80009da <USART2_IRQHandler+0x32>
			;
		rx_data_length = MAX_BUFFER_LENGTH - DMA1_Stream5->NDTR;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <USART2_IRQHandler+0x98>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <USART2_IRQHandler+0x9c>)
 80009f0:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < rx_data_length; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e00b      	b.n	8000a10 <USART2_IRQHandler+0x68>
			app_buffer[i] = rx_data[i];
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <USART2_IRQHandler+0xa0>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	4912      	ldr	r1, [pc, #72]	; (8000a4c <USART2_IRQHandler+0xa4>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	440a      	add	r2, r1
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < rx_data_length; i++) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <USART2_IRQHandler+0x9c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3ee      	bcc.n	80009f8 <USART2_IRQHandler+0x50>
		}
		DMA1->HIFCR = DMA_HIFCR_CTCIF5 + DMA_HIFCR_CHTIF5 + DMA_HIFCR_CTEIF5
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <USART2_IRQHandler+0xa8>)
 8000a1c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000a20:	60da      	str	r2, [r3, #12]
				+ DMA_HIFCR_CDMEIF5 + DMA_HIFCR_CFEIF5;
		DMA1_Stream5->CR |= DMA_SxCR_EN;
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <USART2_IRQHandler+0x98>)
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <USART2_IRQHandler+0x98>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6013      	str	r3, [r2, #0]

	}
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40026088 	.word	0x40026088
 8000a44:	200000a8 	.word	0x200000a8
 8000a48:	200000ac 	.word	0x200000ac
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	40026000 	.word	0x40026000

08000a54 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void) {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	if (DMA1->HISR & DMA_HISR_TCIF6) {
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <DMA1_Stream6_IRQHandler+0x28>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <DMA1_Stream6_IRQHandler+0x1c>
		DMA1->HIFCR |= DMA_HIFCR_CTCIF6;
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <DMA1_Stream6_IRQHandler+0x28>)
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <DMA1_Stream6_IRQHandler+0x28>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6e:	60d3      	str	r3, [r2, #12]

	}
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40026000 	.word	0x40026000

08000a80 <main>:
 **
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	FLASH_init();
 8000a84:	f7ff fea4 	bl	80007d0 <FLASH_init>
	boot_flage = *(uint32_t*) (0x08004010);
 8000a88:	4b9f      	ldr	r3, [pc, #636]	; (8000d08 <main+0x288>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a9f      	ldr	r2, [pc, #636]	; (8000d0c <main+0x28c>)
 8000a8e:	6013      	str	r3, [r2, #0]
	if (boot_flage == 0)
 8000a90:	4b9e      	ldr	r3, [pc, #632]	; (8000d0c <main+0x28c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <main+0x1c>
		StartApplication();
 8000a98:	f000 fa98 	bl	8000fcc <StartApplication>
	Communication_init();
 8000a9c:	f7ff fe14 	bl	80006c8 <CAN_init>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000aa0:	b662      	cpsie	i
#ifdef DISPLAY
	LCD_init();
#endif
	/* Infinite loop */
	while (1) {
		switch (Cmd_Status) {
 8000aa2:	4b9b      	ldr	r3, [pc, #620]	; (8000d10 <main+0x290>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	f246 6266 	movw	r2, #26214	; 0x6666
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	f000 819e 	beq.w	8000dec <main+0x36c>
 8000ab0:	f246 6266 	movw	r2, #26214	; 0x6666
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	dc1c      	bgt.n	8000af2 <main+0x72>
 8000ab8:	f242 2222 	movw	r2, #8738	; 0x2222
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d05d      	beq.n	8000b7c <main+0xfc>
 8000ac0:	f242 2222 	movw	r2, #8738	; 0x2222
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	dc06      	bgt.n	8000ad6 <main+0x56>
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d036      	beq.n	8000b3a <main+0xba>
 8000acc:	f241 1211 	movw	r2, #4369	; 0x1111
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d04e      	beq.n	8000b72 <main+0xf2>
 8000ad4:	e7e5      	b.n	8000aa2 <main+0x22>
 8000ad6:	f244 4244 	movw	r2, #17476	; 0x4444
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d075      	beq.n	8000bca <main+0x14a>
 8000ade:	f245 5255 	movw	r2, #21845	; 0x5555
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f000 812e 	beq.w	8000d44 <main+0x2c4>
 8000ae8:	f243 3233 	movw	r2, #13107	; 0x3333
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d04e      	beq.n	8000b8e <main+0x10e>
 8000af0:	e7d7      	b.n	8000aa2 <main+0x22>
 8000af2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000af6:	4293      	cmp	r3, r2
 8000af8:	f000 8186 	beq.w	8000e08 <main+0x388>
 8000afc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000b00:	4293      	cmp	r3, r2
 8000b02:	dc0a      	bgt.n	8000b1a <main+0x9a>
 8000b04:	f247 7277 	movw	r2, #30583	; 0x7777
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	f000 8178 	beq.w	8000dfe <main+0x37e>
 8000b0e:	f648 0288 	movw	r2, #34952	; 0x8888
 8000b12:	4293      	cmp	r3, r2
 8000b14:	f000 8181 	beq.w	8000e1a <main+0x39a>
 8000b18:	e7c3      	b.n	8000aa2 <main+0x22>
 8000b1a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f000 8228 	beq.w	8000f74 <main+0x4f4>
 8000b24:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f000 822c 	beq.w	8000f86 <main+0x506>
 8000b2e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000b32:	4293      	cmp	r3, r2
 8000b34:	f000 817b 	beq.w	8000e2e <main+0x3ae>
 8000b38:	e7b3      	b.n	8000aa2 <main+0x22>
			 * Listen to the Communication */
#ifdef DISPLAY
			current_pres = LCD_N16_read(0x080000);
			remain_pres = 100 - current_pres;
#endif
			backup_start_address = *(uint32_t*) BL_pointer;
 8000b3a:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <main+0x294>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a75      	ldr	r2, [pc, #468]	; (8000d18 <main+0x298>)
 8000b42:	6013      	str	r3, [r2, #0]
			backup_size = *(uint32_t*) (BL_pointer + 4);
 8000b44:	4b73      	ldr	r3, [pc, #460]	; (8000d14 <main+0x294>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a73      	ldr	r2, [pc, #460]	; (8000d1c <main+0x29c>)
 8000b4e:	6013      	str	r3, [r2, #0]
			App_size = *(uint32_t*) (BL_pointer + 8);
 8000b50:	4b70      	ldr	r3, [pc, #448]	; (8000d14 <main+0x294>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a71      	ldr	r2, [pc, #452]	; (8000d20 <main+0x2a0>)
 8000b5a:	6013      	str	r3, [r2, #0]
			App_end_address = *(uint32_t*) (BL_pointer + 12);
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <main+0x294>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	330c      	adds	r3, #12
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a6f      	ldr	r2, [pc, #444]	; (8000d24 <main+0x2a4>)
 8000b66:	6013      	str	r3, [r2, #0]

			receive_blocking((uint8_t*) &Cmd_Status, 2);
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4869      	ldr	r0, [pc, #420]	; (8000d10 <main+0x290>)
 8000b6c:	f7ff fdf8 	bl	8000760 <CAN_receive_blocking>
			break;
 8000b70:	e212      	b.n	8000f98 <main+0x518>
		case REQUEST_TO_UPDATE:
			/* Update is initiated , the switch to state  SEND_FREAME_INFO */
			Cmd_Status = SEND_FREAME_INFO;
 8000b72:	4b67      	ldr	r3, [pc, #412]	; (8000d10 <main+0x290>)
 8000b74:	f242 2222 	movw	r2, #8738	; 0x2222
 8000b78:	801a      	strh	r2, [r3, #0]
			break;
 8000b7a:	e20d      	b.n	8000f98 <main+0x518>
		case SEND_FREAME_INFO:
			/* Request the Frame Info from the gateway,
			 * Then go to RECEIVE_FRAME_INFO */
			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4864      	ldr	r0, [pc, #400]	; (8000d10 <main+0x290>)
 8000b80:	f7ff fda8 	bl	80006d4 <CAN_transmit_blocking>
			Cmd_Status = RECEIVE_FRAME_INFO;
 8000b84:	4b62      	ldr	r3, [pc, #392]	; (8000d10 <main+0x290>)
 8000b86:	f243 3233 	movw	r2, #13107	; 0x3333
 8000b8a:	801a      	strh	r2, [r3, #0]
			break;
 8000b8c:	e204      	b.n	8000f98 <main+0x518>
		case RECEIVE_FRAME_INFO:
			/*Save the frame info,
			 * Then go to READY_TO_RECEIVE_UPDATE */
			receive_blocking(BL_buffer, FrameInfo_SIZE);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4865      	ldr	r0, [pc, #404]	; (8000d28 <main+0x2a8>)
 8000b92:	f7ff fde5 	bl	8000760 <CAN_receive_blocking>
			FrameInfo.PacketsNum = *(uint16_t*) &BL_buffer[0];
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <main+0x2a8>)
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <main+0x2ac>)
 8000b9c:	801a      	strh	r2, [r3, #0]
			FrameInfo.ExtraBytes = *(uint16_t*) &BL_buffer[2];
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <main+0x2b0>)
 8000ba0:	881a      	ldrh	r2, [r3, #0]
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <main+0x2ac>)
 8000ba4:	805a      	strh	r2, [r3, #2]
			FrameInfo.CheckSum = *(uint32_t*) &BL_buffer[4];
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <main+0x2b4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a60      	ldr	r2, [pc, #384]	; (8000d2c <main+0x2ac>)
 8000bac:	6053      	str	r3, [r2, #4]
			MAX_NUM_PACKETS = FrameInfo.PacketsNum;          //for display
			if (FrameInfo.ExtraBytes != 0)
			MAX_NUM_PACKETS++;
			current_num = 0;
#endif
			code_size = FrameInfo.PacketsNum * PACKET_SIZE
 8000bae:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <main+0x2ac>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	029b      	lsls	r3, r3, #10
					+ FrameInfo.ExtraBytes;
 8000bb4:	4a5d      	ldr	r2, [pc, #372]	; (8000d2c <main+0x2ac>)
 8000bb6:	8852      	ldrh	r2, [r2, #2]
 8000bb8:	4413      	add	r3, r2
 8000bba:	461a      	mov	r2, r3
			code_size = FrameInfo.PacketsNum * PACKET_SIZE
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <main+0x2b8>)
 8000bbe:	601a      	str	r2, [r3, #0]
			Cmd_Status = READY_TO_RECEIVE_UPDATE;
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <main+0x290>)
 8000bc2:	f244 4244 	movw	r2, #17476	; 0x4444
 8000bc6:	801a      	strh	r2, [r3, #0]
			break;
 8000bc8:	e1e6      	b.n	8000f98 <main+0x518>
		case READY_TO_RECEIVE_UPDATE:
			/* copy current app (if exist) to backup
			 * Erase flash space for the new update
			 * Send to the Gateway that node is ready to receive update */
			if (App_size != 0xFFFFFFFF) {     //the is an application
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <main+0x2a0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd2:	d014      	beq.n	8000bfe <main+0x17e>
				backup_start_address = Erase_Backup(App_size);
 8000bd4:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <main+0x2a0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fa27 	bl	800102c <Erase_Backup>
 8000bde:	4602      	mov	r2, r0
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <main+0x298>)
 8000be2:	601a      	str	r2, [r3, #0]
				if (backup_start_address != 0xFFFFFFFF) { //erase backup successfully
 8000be4:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <main+0x298>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d007      	beq.n	8000bfe <main+0x17e>
					Flash_copy(APP_START_ADD, backup_start_address, App_size);
 8000bee:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <main+0x298>)
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <main+0x2a0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4850      	ldr	r0, [pc, #320]	; (8000d3c <main+0x2bc>)
 8000bfa:	f000 fa5f 	bl	80010bc <Flash_copy>
				} else {
					/* NO space for backup*/
				}
			}
			BL_error = Erase_App();
 8000bfe:	f000 fac9 	bl	8001194 <Erase_App>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <main+0x2c0>)
 8000c08:	701a      	strb	r2, [r3, #0]
			backup_size = App_size;
 8000c0a:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <main+0x2a0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <main+0x29c>)
 8000c10:	6013      	str	r3, [r2, #0]
			App_size = code_size;
 8000c12:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <main+0x2b8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a42      	ldr	r2, [pc, #264]	; (8000d20 <main+0x2a0>)
 8000c18:	6013      	str	r3, [r2, #0]
			//save backup start address,backup size and App size at the begining of the app area
			BL_error |= Flash_write(BL_pointer, &backup_start_address, 1);
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <main+0x294>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	493d      	ldr	r1, [pc, #244]	; (8000d18 <main+0x298>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe52 	bl	80008cc <Flash_write>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <main+0x2c0>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <main+0x2c0>)
 8000c36:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <main+0x294>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	4a35      	ldr	r2, [pc, #212]	; (8000d14 <main+0x294>)
 8000c40:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &backup_size, 1);
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <main+0x294>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2201      	movs	r2, #1
 8000c48:	4934      	ldr	r1, [pc, #208]	; (8000d1c <main+0x29c>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe3e 	bl	80008cc <Flash_write>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <main+0x2c0>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <main+0x2c0>)
 8000c5e:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <main+0x294>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3304      	adds	r3, #4
 8000c66:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <main+0x294>)
 8000c68:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &App_size, 1);
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <main+0x294>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	492b      	ldr	r1, [pc, #172]	; (8000d20 <main+0x2a0>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe2a 	bl	80008cc <Flash_write>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <main+0x2c0>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <main+0x2c0>)
 8000c86:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <main+0x294>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <main+0x294>)
 8000c90:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &App_end_address, 1);
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <main+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2201      	movs	r2, #1
 8000c98:	4922      	ldr	r1, [pc, #136]	; (8000d24 <main+0x2a4>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe16 	bl	80008cc <Flash_write>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <main+0x2c0>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <main+0x2c0>)
 8000cae:	701a      	strb	r2, [r3, #0]
			//write '0' to boot_flage
			boot_flage = 0;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <main+0x28c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			BL_pointer += 4;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <main+0x294>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <main+0x294>)
 8000cbe:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &boot_flage, 1);
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <main+0x294>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4911      	ldr	r1, [pc, #68]	; (8000d0c <main+0x28c>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fdff 	bl	80008cc <Flash_write>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <main+0x2c0>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <main+0x2c0>)
 8000cdc:	701a      	strb	r2, [r3, #0]
			BL_pointer = APP_START_ADD;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <main+0x294>)
 8000ce0:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <main+0x2bc>)
 8000ce2:	601a      	str	r2, [r3, #0]
			if (BL_error != BL_OK) {
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <main+0x2c0>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <main+0x276>
				Cmd_Status = ERROR;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <main+0x290>)
 8000cee:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000cf2:	801a      	strh	r2, [r3, #0]
				break;
 8000cf4:	e150      	b.n	8000f98 <main+0x518>
			}

			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <main+0x290>)
 8000cfa:	f7ff fceb 	bl	80006d4 <CAN_transmit_blocking>
			Cmd_Status = RECEIVE_PACKET;
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <main+0x290>)
 8000d00:	f245 5255 	movw	r2, #21845	; 0x5555
 8000d04:	801a      	strh	r2, [r3, #0]
			break;
 8000d06:	e147      	b.n	8000f98 <main+0x518>
 8000d08:	08004010 	.word	0x08004010
 8000d0c:	200004d8 	.word	0x200004d8
 8000d10:	200004b4 	.word	0x200004b4
 8000d14:	20000004 	.word	0x20000004
 8000d18:	200004c8 	.word	0x200004c8
 8000d1c:	200004cc 	.word	0x200004cc
 8000d20:	200004d0 	.word	0x200004d0
 8000d24:	200004d4 	.word	0x200004d4
 8000d28:	200000b4 	.word	0x200000b4
 8000d2c:	200004b8 	.word	0x200004b8
 8000d30:	200000b6 	.word	0x200000b6
 8000d34:	200000b8 	.word	0x200000b8
 8000d38:	200004c0 	.word	0x200004c0
 8000d3c:	08004200 	.word	0x08004200
 8000d40:	200000b0 	.word	0x200000b0
		case RECEIVE_PACKET:
			/* Receive a packet from the gate way
			 */
			if (FrameInfo.PacketsNum > 0) {
 8000d44:	4b95      	ldr	r3, [pc, #596]	; (8000f9c <main+0x51c>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d02a      	beq.n	8000da2 <main+0x322>
				receive_blocking(BL_buffer, PACKET_SIZE);
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d50:	4893      	ldr	r0, [pc, #588]	; (8000fa0 <main+0x520>)
 8000d52:	f7ff fd05 	bl	8000760 <CAN_receive_blocking>
				FrameInfo.PacketsNum -= 1;
 8000d56:	4b91      	ldr	r3, [pc, #580]	; (8000f9c <main+0x51c>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b8f      	ldr	r3, [pc, #572]	; (8000f9c <main+0x51c>)
 8000d60:	801a      	strh	r2, [r3, #0]
				BL_error = Flash_write(BL_pointer, (uint32_t*) BL_buffer,
 8000d62:	4b90      	ldr	r3, [pc, #576]	; (8000fa4 <main+0x524>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6a:	498d      	ldr	r1, [pc, #564]	; (8000fa0 <main+0x520>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fdad 	bl	80008cc <Flash_write>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b8c      	ldr	r3, [pc, #560]	; (8000fa8 <main+0x528>)
 8000d78:	701a      	strb	r2, [r3, #0]
				PACKET_SIZE / 4);
				if (BL_error != BL_OK) {
 8000d7a:	4b8b      	ldr	r3, [pc, #556]	; (8000fa8 <main+0x528>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <main+0x30c>
					Cmd_Status = ERROR;
 8000d82:	4b8a      	ldr	r3, [pc, #552]	; (8000fac <main+0x52c>)
 8000d84:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000d88:	801a      	strh	r2, [r3, #0]
					break;
 8000d8a:	e105      	b.n	8000f98 <main+0x518>
				}
				Cmd_Status = SEND_NEW_PACKET;
 8000d8c:	4b87      	ldr	r3, [pc, #540]	; (8000fac <main+0x52c>)
 8000d8e:	f246 6266 	movw	r2, #26214	; 0x6666
 8000d92:	801a      	strh	r2, [r3, #0]
				BL_pointer += PACKET_SIZE;
 8000d94:	4b83      	ldr	r3, [pc, #524]	; (8000fa4 <main+0x524>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d9c:	4a81      	ldr	r2, [pc, #516]	; (8000fa4 <main+0x524>)
 8000d9e:	6013      	str	r3, [r2, #0]
				Cmd_Status = END_OF_FRAME;
#ifdef DISPLAY
				LCD_N16_write(0x080000, 100);
#endif
			}
			break;
 8000da0:	e0fa      	b.n	8000f98 <main+0x518>
				receive_blocking(BL_buffer, FrameInfo.ExtraBytes);
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <main+0x51c>)
 8000da4:	885b      	ldrh	r3, [r3, #2]
 8000da6:	4619      	mov	r1, r3
 8000da8:	487d      	ldr	r0, [pc, #500]	; (8000fa0 <main+0x520>)
 8000daa:	f7ff fcd9 	bl	8000760 <CAN_receive_blocking>
				BL_error = Flash_write(BL_pointer, (uint32_t*) BL_buffer,
 8000dae:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <main+0x524>)
 8000db0:	6818      	ldr	r0, [r3, #0]
						FrameInfo.ExtraBytes / 4);
 8000db2:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <main+0x51c>)
 8000db4:	885b      	ldrh	r3, [r3, #2]
				BL_error = Flash_write(BL_pointer, (uint32_t*) BL_buffer,
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4978      	ldr	r1, [pc, #480]	; (8000fa0 <main+0x520>)
 8000dbe:	f7ff fd85 	bl	80008cc <Flash_write>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b78      	ldr	r3, [pc, #480]	; (8000fa8 <main+0x528>)
 8000dc8:	701a      	strb	r2, [r3, #0]
				if (BL_error != BL_OK) {
 8000dca:	4b77      	ldr	r3, [pc, #476]	; (8000fa8 <main+0x528>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <main+0x35c>
					Cmd_Status = ERROR;
 8000dd2:	4b76      	ldr	r3, [pc, #472]	; (8000fac <main+0x52c>)
 8000dd4:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000dd8:	801a      	strh	r2, [r3, #0]
					break;
 8000dda:	e0dd      	b.n	8000f98 <main+0x518>
				FrameInfo.ExtraBytes = 0;
 8000ddc:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <main+0x51c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	805a      	strh	r2, [r3, #2]
				Cmd_Status = END_OF_FRAME;
 8000de2:	4b72      	ldr	r3, [pc, #456]	; (8000fac <main+0x52c>)
 8000de4:	f247 7277 	movw	r2, #30583	; 0x7777
 8000de8:	801a      	strh	r2, [r3, #0]
			break;
 8000dea:	e0d5      	b.n	8000f98 <main+0x518>
		case SEND_NEW_PACKET:
			/* Request to send new packet */
			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000dec:	2102      	movs	r1, #2
 8000dee:	486f      	ldr	r0, [pc, #444]	; (8000fac <main+0x52c>)
 8000df0:	f7ff fc70 	bl	80006d4 <CAN_transmit_blocking>
			Cmd_Status = RECEIVE_PACKET;
 8000df4:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <main+0x52c>)
 8000df6:	f245 5255 	movw	r2, #21845	; 0x5555
 8000dfa:	801a      	strh	r2, [r3, #0]
			break;
 8000dfc:	e0cc      	b.n	8000f98 <main+0x518>
		case END_OF_FRAME:
			/* later request to calculate checksum and report update ok */
			Cmd_Status = UPDATE_SUCCESS;
 8000dfe:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <main+0x52c>)
 8000e00:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e04:	801a      	strh	r2, [r3, #0]
			break;
 8000e06:	e0c7      	b.n	8000f98 <main+0x518>
		case UPDATE_SUCCESS:
			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4868      	ldr	r0, [pc, #416]	; (8000fac <main+0x52c>)
 8000e0c:	f7ff fc62 	bl	80006d4 <CAN_transmit_blocking>
			Cmd_Status = JUMP_TO_NEW_APP;
 8000e10:	4b66      	ldr	r3, [pc, #408]	; (8000fac <main+0x52c>)
 8000e12:	f648 0288 	movw	r2, #34952	; 0x8888
 8000e16:	801a      	strh	r2, [r3, #0]
			break;
 8000e18:	e0be      	b.n	8000f98 <main+0x518>
		case JUMP_TO_NEW_APP:
			/* Call the new app */
			StartApplication();
 8000e1a:	f000 f8d7 	bl	8000fcc <StartApplication>
			BL_error = BL_INVALID_APP_ADD;
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <main+0x528>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	701a      	strb	r2, [r3, #0]
			Cmd_Status = ERROR;
 8000e24:	4b61      	ldr	r3, [pc, #388]	; (8000fac <main+0x52c>)
 8000e26:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000e2a:	801a      	strh	r2, [r3, #0]
			break;
 8000e2c:	e0b4      	b.n	8000f98 <main+0x518>
		case RESTORE_BACKUP:
			/* Erase space for the App
			 * Copy the App from backup to App section
			 * Backup section now is empty*/
			if (backup_size == 0xFFFFFFFF) {
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <main+0x530>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e36:	d107      	bne.n	8000e48 <main+0x3c8>
				BL_error = BL_NO_BACKUP;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <main+0x528>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	701a      	strb	r2, [r3, #0]
				Cmd_Status = ERROR;
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <main+0x52c>)
 8000e40:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000e44:	801a      	strh	r2, [r3, #0]
				break;
 8000e46:	e0a7      	b.n	8000f98 <main+0x518>
			}
			code_size = backup_size;
 8000e48:	4b59      	ldr	r3, [pc, #356]	; (8000fb0 <main+0x530>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a59      	ldr	r2, [pc, #356]	; (8000fb4 <main+0x534>)
 8000e4e:	6013      	str	r3, [r2, #0]
			BL_error = Erase_App();
 8000e50:	f000 f9a0 	bl	8001194 <Erase_App>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <main+0x528>)
 8000e5a:	701a      	strb	r2, [r3, #0]
			BL_error |= Flash_copy(backup_start_address, APP_START_ADD,
 8000e5c:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <main+0x538>)
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <main+0x534>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4955      	ldr	r1, [pc, #340]	; (8000fbc <main+0x53c>)
 8000e68:	f000 f928 	bl	80010bc <Flash_copy>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <main+0x528>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <main+0x528>)
 8000e7a:	701a      	strb	r2, [r3, #0]
					code_size);
			backup_start_address = 0xFFFFFFFF;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <main+0x538>)
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	601a      	str	r2, [r3, #0]
			backup_size = 0xFFFFFFFF;
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <main+0x530>)
 8000e86:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8a:	601a      	str	r2, [r3, #0]
			App_size = code_size;
 8000e8c:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <main+0x534>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a4b      	ldr	r2, [pc, #300]	; (8000fc0 <main+0x540>)
 8000e92:	6013      	str	r3, [r2, #0]
			//save backup start address,backup size and APP size at the begining of the app area
			BL_error |= Flash_write(BL_pointer, &backup_start_address, 1);
 8000e94:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <main+0x524>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4947      	ldr	r1, [pc, #284]	; (8000fb8 <main+0x538>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fd15 	bl	80008cc <Flash_write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <main+0x528>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <main+0x528>)
 8000eb0:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <main+0x524>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	4a3a      	ldr	r2, [pc, #232]	; (8000fa4 <main+0x524>)
 8000eba:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &backup_size, 1);
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <main+0x524>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	493b      	ldr	r1, [pc, #236]	; (8000fb0 <main+0x530>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd01 	bl	80008cc <Flash_write>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <main+0x528>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <main+0x528>)
 8000ed8:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <main+0x524>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <main+0x524>)
 8000ee2:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &App_size, 1);
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <main+0x524>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4935      	ldr	r1, [pc, #212]	; (8000fc0 <main+0x540>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fced 	bl	80008cc <Flash_write>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <main+0x528>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <main+0x528>)
 8000f00:	701a      	strb	r2, [r3, #0]
			BL_pointer += 4;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <main+0x524>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3304      	adds	r3, #4
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <main+0x524>)
 8000f0a:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &App_end_address, 1);
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <main+0x524>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	492c      	ldr	r1, [pc, #176]	; (8000fc4 <main+0x544>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fcd9 	bl	80008cc <Flash_write>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <main+0x528>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <main+0x528>)
 8000f28:	701a      	strb	r2, [r3, #0]
			//write '0' to boot_flage
			boot_flage = 0;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <main+0x548>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
			BL_pointer += 4;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <main+0x524>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3304      	adds	r3, #4
 8000f36:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <main+0x524>)
 8000f38:	6013      	str	r3, [r2, #0]
			BL_error |= Flash_write(BL_pointer, &boot_flage, 1);
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <main+0x524>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4921      	ldr	r1, [pc, #132]	; (8000fc8 <main+0x548>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fcc2 	bl	80008cc <Flash_write>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <main+0x528>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <main+0x528>)
 8000f56:	701a      	strb	r2, [r3, #0]
			if (BL_error != BL_OK) {
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <main+0x528>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <main+0x4ea>
				Cmd_Status = ERROR;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <main+0x52c>)
 8000f62:	f64d 52dd 	movw	r2, #56797	; 0xdddd
 8000f66:	801a      	strh	r2, [r3, #0]
				break;
 8000f68:	e016      	b.n	8000f98 <main+0x518>
			}
			Cmd_Status = RESTORE_BACKUP_SUCCESS;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <main+0x52c>)
 8000f6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000f70:	801a      	strh	r2, [r3, #0]
			break;
 8000f72:	e011      	b.n	8000f98 <main+0x518>
		case RESTORE_BACKUP_SUCCESS:
			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000f74:	2102      	movs	r1, #2
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <main+0x52c>)
 8000f78:	f7ff fbac 	bl	80006d4 <CAN_transmit_blocking>
			Cmd_Status = JUMP_TO_NEW_APP;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <main+0x52c>)
 8000f7e:	f648 0288 	movw	r2, #34952	; 0x8888
 8000f82:	801a      	strh	r2, [r3, #0]
			break;
 8000f84:	e008      	b.n	8000f98 <main+0x518>
		case ERROR:
			/* for handling the error*/
			transmit_blocking((uint8_t*) &Cmd_Status, 2);
 8000f86:	2102      	movs	r1, #2
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <main+0x52c>)
 8000f8a:	f7ff fba3 	bl	80006d4 <CAN_transmit_blocking>
			transmit_blocking((uint8_t*) &BL_error, 2);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <main+0x528>)
 8000f92:	f7ff fb9f 	bl	80006d4 <CAN_transmit_blocking>
			while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0x516>
		switch (Cmd_Status) {
 8000f98:	e583      	b.n	8000aa2 <main+0x22>
 8000f9a:	bf00      	nop
 8000f9c:	200004b8 	.word	0x200004b8
 8000fa0:	200000b4 	.word	0x200000b4
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	200000b0 	.word	0x200000b0
 8000fac:	200004b4 	.word	0x200004b4
 8000fb0:	200004cc 	.word	0x200004cc
 8000fb4:	200004c0 	.word	0x200004c0
 8000fb8:	200004c8 	.word	0x200004c8
 8000fbc:	08004200 	.word	0x08004200
 8000fc0:	200004d0 	.word	0x200004d0
 8000fc4:	200004d4 	.word	0x200004d4
 8000fc8:	200004d8 	.word	0x200004d8

08000fcc <StartApplication>:
	}
}

/* Private functions */

void StartApplication(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	uint32_t* address = (uint32_t*) APP_START_ADD;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <StartApplication+0x54>)
 8000fd4:	60fb      	str	r3, [r7, #12]
	uint32_t stack_Pionter = *address;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	60bb      	str	r3, [r7, #8]
	if ((stack_Pionter > 0x20000000) && (stack_Pionter <= 0x20020000)) { //valid stack pointer(in RAM)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe2:	d918      	bls.n	8001016 <StartApplication+0x4a>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <StartApplication+0x58>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d814      	bhi.n	8001016 <StartApplication+0x4a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8000fec:	b672      	cpsid	i
		__disable_irq();                            //disable interrupt
		//reset the modules used by the bootloader
		Communication_reset();
 8000fee:	f7ff f98f 	bl	8000310 <CAN_reset>
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 8000ff2:	f3bf 8f5f 	dmb	sy
		RCC->APB2RSTR = 0;
#endif

		//vector table relocation
		__DMB();
		SCB->VTOR = (uint32_t) address;
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <StartApplication+0x5c>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb");
 8000ffc:	f3bf 8f4f 	dsb	sy
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	603b      	str	r3, [r7, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f383 8808 	msr	MSP, r3
		__DSB();
		//initiate the stack pointer
		__set_MSP(stack_Pionter);
		//jump to the reset handler address
		void (*jump_address)(void)=(void(*)(void))(*(address+1)); //address of reset handler of the app
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	607b      	str	r3, [r7, #4]
		jump_address();
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4798      	blx	r3
	} else {
		/* Invalid address to jump */
	}
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	08004200 	.word	0x08004200
 8001024:	20020000 	.word	0x20020000
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Erase_Backup>:
 * input :
 * 			app_size : the size of the app you want to backup
 * return value : the start address of the backup
 *                0xFFFFFFFF if no space for backup
 * */
uint32_t Erase_Backup(uint32_t app_size) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint32_t backup_start_add = 0xFFFFFFFF;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	60fb      	str	r3, [r7, #12]
	if (app_size > (FLASH_END_ADD - App_end_address)) {
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <Erase_Backup+0x7c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f1c3 6201 	rsb	r2, r3, #135266304	; 0x8100000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d32a      	bcc.n	800109e <Erase_Backup+0x72>
		//no space for backup
	} else if (app_size <= 128 * 1024) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800104e:	d806      	bhi.n	800105e <Erase_Backup+0x32>
		EraseSectors(11, 1);             //erase sector 11
 8001050:	2101      	movs	r1, #1
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fbe2 	bl	800081c <EraseSectors>
		backup_start_add = SECTOR_11_ADD;  //start address of sector 11
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <Erase_Backup+0x80>)
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e01f      	b.n	800109e <Erase_Backup+0x72>
	} else if (app_size <= 2 * 128 * 1024) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001064:	d806      	bhi.n	8001074 <Erase_Backup+0x48>
		EraseSectors(10, 2);             //erase sector 10,11
 8001066:	2102      	movs	r1, #2
 8001068:	200a      	movs	r0, #10
 800106a:	f7ff fbd7 	bl	800081c <EraseSectors>
		backup_start_add = SECTOR_10_ADD;  //start address of sector 10
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <Erase_Backup+0x84>)
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e014      	b.n	800109e <Erase_Backup+0x72>
	} else if (app_size <= 3 * 128 * 1024) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800107a:	d806      	bhi.n	800108a <Erase_Backup+0x5e>
		EraseSectors(9, 3);             //erase sector 9,10,11
 800107c:	2103      	movs	r1, #3
 800107e:	2009      	movs	r0, #9
 8001080:	f7ff fbcc 	bl	800081c <EraseSectors>
		backup_start_add = SECTOR_9_ADD;  //start address of sector 9
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <Erase_Backup+0x88>)
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e009      	b.n	800109e <Erase_Backup+0x72>
	} else if (app_size <= 4 * 128 * 1024) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001090:	d805      	bhi.n	800109e <Erase_Backup+0x72>
		EraseSectors(8, 3);             //erase sector 8,9,10,11
 8001092:	2103      	movs	r1, #3
 8001094:	2008      	movs	r0, #8
 8001096:	f7ff fbc1 	bl	800081c <EraseSectors>
		backup_start_add = SECTOR_8_ADD;  //start address of sector 8
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <Erase_Backup+0x8c>)
 800109c:	60fb      	str	r3, [r7, #12]
	} else {
		//no space for backup
	}
	return backup_start_add;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200004d4 	.word	0x200004d4
 80010ac:	080e0000 	.word	0x080e0000
 80010b0:	080c0000 	.word	0x080c0000
 80010b4:	080a0000 	.word	0x080a0000
 80010b8:	08080000 	.word	0x08080000

080010bc <Flash_copy>:
 * 		  dest_add   : the address of the section to copy to.
 * 		  size       : size of the section to copy.
 * return value : the code of the error
 *   */
enum_bootloader_error_t Flash_copy(uint32_t source_add, uint32_t dest_add,
		uint32_t size) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	enum_bootloader_error_t ret_val = BL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	77fb      	strb	r3, [r7, #31]
	uint16_t packet_num = size / PACKET_SIZE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0a9b      	lsrs	r3, r3, #10
 80010d0:	83bb      	strh	r3, [r7, #28]
	uint16_t extra_bytes = size - packet_num * PACKET_SIZE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	8bbb      	ldrh	r3, [r7, #28]
 80010d8:	029b      	lsls	r3, r3, #10
 80010da:	b29b      	uxth	r3, r3
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	827b      	strh	r3, [r7, #18]
	while (packet_num > 0) {
 80010e0:	e024      	b.n	800112c <Flash_copy+0x70>
		for (int i = 0; i < PACKET_SIZE; i = i + 4) { //copy packet from flash to RAM(BL_buffer)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	e00b      	b.n	8001100 <Flash_copy+0x44>
			*(uint32_t*) &BL_buffer[i] = *(uint32_t*) source_add;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <Flash_copy+0xd4>)
 80010ec:	4413      	add	r3, r2
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	601a      	str	r2, [r3, #0]
			source_add += 4;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3304      	adds	r3, #4
 80010f8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < PACKET_SIZE; i = i + 4) { //copy packet from flash to RAM(BL_buffer)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3304      	adds	r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	dbef      	blt.n	80010e8 <Flash_copy+0x2c>
		}
		ret_val += Flash_write(dest_add, (uint32_t*) BL_buffer,
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	4920      	ldr	r1, [pc, #128]	; (8001190 <Flash_copy+0xd4>)
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f7ff fbdc 	bl	80008cc <Flash_write>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	7ffb      	ldrb	r3, [r7, #31]
 800111a:	4413      	add	r3, r2
 800111c:	77fb      	strb	r3, [r7, #31]
				(PACKET_SIZE / 4));
		dest_add += PACKET_SIZE;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001124:	60bb      	str	r3, [r7, #8]
		packet_num -= 1;
 8001126:	8bbb      	ldrh	r3, [r7, #28]
 8001128:	3b01      	subs	r3, #1
 800112a:	83bb      	strh	r3, [r7, #28]
	while (packet_num > 0) {
 800112c:	8bbb      	ldrh	r3, [r7, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1d7      	bne.n	80010e2 <Flash_copy+0x26>
	}
	if (extra_bytes != 0) {
 8001132:	8a7b      	ldrh	r3, [r7, #18]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d026      	beq.n	8001186 <Flash_copy+0xca>
		for (int i = 0; i < extra_bytes; i = i + 4) { //copy packet from flash to RAM(BL_buffer)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00b      	b.n	8001156 <Flash_copy+0x9a>
			*(uint32_t*) &BL_buffer[i] = *(uint32_t*) source_add;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <Flash_copy+0xd4>)
 8001142:	4413      	add	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	601a      	str	r2, [r3, #0]
			source_add += 4;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3304      	adds	r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < extra_bytes; i = i + 4) { //copy packet from flash to RAM(BL_buffer)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3304      	adds	r3, #4
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	8a7a      	ldrh	r2, [r7, #18]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	429a      	cmp	r2, r3
 800115c:	dcef      	bgt.n	800113e <Flash_copy+0x82>
		}
		ret_val += Flash_write(dest_add, (uint32_t*) BL_buffer,
 800115e:	8a7b      	ldrh	r3, [r7, #18]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	490a      	ldr	r1, [pc, #40]	; (8001190 <Flash_copy+0xd4>)
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fbaf 	bl	80008cc <Flash_write>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	4413      	add	r3, r2
 8001176:	77fb      	strb	r3, [r7, #31]
				(extra_bytes / 4));
		dest_add += extra_bytes / 4;
 8001178:	8a7b      	ldrh	r3, [r7, #18]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
	}
	return ret_val;
 8001186:	7ffb      	ldrb	r3, [r7, #31]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000b4 	.word	0x200000b4

08001194 <Erase_App>:

enum_bootloader_error_t Erase_App(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	enum_bootloader_error_t ret_val = BL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
	/*8 bytes to store backup start add and app size &
	 * but  Vector Table base offset field must be a multiple of 0x200. */
	if (code_size > (backup_start_address - APP_START_ADD)) {
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <Erase_App+0xd4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011a6:	f5a3 4384 	sub.w	r3, r3, #16896	; 0x4200
 80011aa:	4a30      	ldr	r2, [pc, #192]	; (800126c <Erase_App+0xd8>)
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d202      	bcs.n	80011b8 <Erase_App+0x24>
		/* no enough space*/
		ret_val = BL_NO_SPACE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e051      	b.n	800125c <Erase_App+0xc8>
	} else if (code_size <= (48 * 1024 - 0x200)) {
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <Erase_App+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f5b3 4f3e 	cmp.w	r3, #48640	; 0xbe00
 80011c0:	d819      	bhi.n	80011f6 <Erase_App+0x62>
		/* Erase one or more of the first 3 sectors (1,2,3) 16K for each */
		sectors_num = code_size / (16 * 1024) + 1;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <Erase_App+0xd8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0b9b      	lsrs	r3, r3, #14
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <Erase_App+0xdc>)
 80011d0:	701a      	strb	r2, [r3, #0]
		ret_val = EraseSectors(1, sectors_num);
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <Erase_App+0xdc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fb1f 	bl	800081c <EraseSectors>
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
		App_end_address = SECTOR_1_ADD + sectors_num * 16 * 1024;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <Erase_App+0xdc>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80011ea:	3301      	adds	r3, #1
 80011ec:	039b      	lsls	r3, r3, #14
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <Erase_App+0xe0>)
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e032      	b.n	800125c <Erase_App+0xc8>
	} else if (code_size <= (112 * 1024 - 0x200)) {
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <Erase_App+0xd8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f5b3 3fdf 	cmp.w	r3, #114176	; 0x1be00
 80011fe:	d809      	bhi.n	8001214 <Erase_App+0x80>
		/* Erase the first 3 sectors (1,2,3) 16K for each
		 * + sector 4 (64K) */
		ret_val = EraseSectors(1, 4);
 8001200:	2104      	movs	r1, #4
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fb0a 	bl	800081c <EraseSectors>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
		App_end_address = SECTOR_5_ADD;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <Erase_App+0xe0>)
 800120e:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <Erase_App+0xe4>)
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e023      	b.n	800125c <Erase_App+0xc8>
	} else if (code_size <= (1008 * 1024 - 0x200)) {
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <Erase_App+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <Erase_App+0xe8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d81c      	bhi.n	8001258 <Erase_App+0xc4>
		/* Erase the first 3 sectors (1,2,3) 16K for each
		 * + sector 4 (64K)
		 * + one or more of the last 7 sectors (5,6,7,8,9,10,11) 128K for each*/
		sectors_num = (code_size - 112 * 1024) / (128 * 1024) + 1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <Erase_App+0xd8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f5a3 33e0 	sub.w	r3, r3, #114688	; 0x1c000
 8001226:	0c5b      	lsrs	r3, r3, #17
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Erase_App+0xdc>)
 8001230:	701a      	strb	r2, [r3, #0]
		ret_val = EraseSectors(1, (4 + sectors_num));
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <Erase_App+0xdc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3304      	adds	r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff faed 	bl	800081c <EraseSectors>
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
		App_end_address = SECTOR_5_ADD + sectors_num * 128 * 1024;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <Erase_App+0xdc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	f203 4301 	addw	r3, r3, #1025	; 0x401
 800124e:	045b      	lsls	r3, r3, #17
 8001250:	461a      	mov	r2, r3
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <Erase_App+0xe0>)
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e001      	b.n	800125c <Erase_App+0xc8>
	} else {
		/* no enough space*/
		ret_val = BL_NO_SPACE;
 8001258:	2301      	movs	r3, #1
 800125a:	71fb      	strb	r3, [r7, #7]
	}
	return ret_val;
 800125c:	79fb      	ldrb	r3, [r7, #7]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200004c8 	.word	0x200004c8
 800126c:	200004c0 	.word	0x200004c0
 8001270:	200004c4 	.word	0x200004c4
 8001274:	200004d4 	.word	0x200004d4
 8001278:	08020000 	.word	0x08020000
 800127c:	000fbe00 	.word	0x000fbe00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001286:	e003      	b.n	8001290 <LoopCopyDataInit>

08001288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800128a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800128c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800128e:	3104      	adds	r1, #4

08001290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001298:	d3f6      	bcc.n	8001288 <CopyDataInit>
  ldr  r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800129c:	e002      	b.n	80012a4 <LoopFillZerobss>

0800129e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800129e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012a0:	f842 3b04 	str.w	r3, [r2], #4

080012a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a8:	d3f9      	bcc.n	800129e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012aa:	f000 f841 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f000 f875 	bl	800139c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff fbe5 	bl	8000a80 <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012bc:	08001404 	.word	0x08001404
  ldr  r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012c4:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80012c8:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80012cc:	200004dc 	.word	0x200004dc

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>

080012d2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <HardFault_Handler+0x4>

080012e6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <BusFault_Handler+0x4>

080012f2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <UsageFault_Handler+0x4>

080012f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4a16      	ldr	r2, [pc, #88]	; (8001390 <SystemInit+0x60>)
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <SystemInit+0x60>)
 8001338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <SystemInit+0x64>)
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <SystemInit+0x64>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <SystemInit+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <SystemInit+0x64>)
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <SystemInit+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <SystemInit+0x64>)
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <SystemInit+0x68>)
 800136a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <SystemInit+0x64>)
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <SystemInit+0x64>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SystemInit+0x60>)
 8001380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001384:	609a      	str	r2, [r3, #8]
#endif
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	40023800 	.word	0x40023800
 8001398:	24003010 	.word	0x24003010

0800139c <__libc_init_array>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4e0d      	ldr	r6, [pc, #52]	; (80013d4 <__libc_init_array+0x38>)
 80013a0:	4c0d      	ldr	r4, [pc, #52]	; (80013d8 <__libc_init_array+0x3c>)
 80013a2:	1ba4      	subs	r4, r4, r6
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	2500      	movs	r5, #0
 80013a8:	42a5      	cmp	r5, r4
 80013aa:	d109      	bne.n	80013c0 <__libc_init_array+0x24>
 80013ac:	4e0b      	ldr	r6, [pc, #44]	; (80013dc <__libc_init_array+0x40>)
 80013ae:	4c0c      	ldr	r4, [pc, #48]	; (80013e0 <__libc_init_array+0x44>)
 80013b0:	f000 f818 	bl	80013e4 <_init>
 80013b4:	1ba4      	subs	r4, r4, r6
 80013b6:	10a4      	asrs	r4, r4, #2
 80013b8:	2500      	movs	r5, #0
 80013ba:	42a5      	cmp	r5, r4
 80013bc:	d105      	bne.n	80013ca <__libc_init_array+0x2e>
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c4:	4798      	blx	r3
 80013c6:	3501      	adds	r5, #1
 80013c8:	e7ee      	b.n	80013a8 <__libc_init_array+0xc>
 80013ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ce:	4798      	blx	r3
 80013d0:	3501      	adds	r5, #1
 80013d2:	e7f2      	b.n	80013ba <__libc_init_array+0x1e>
 80013d4:	080013fc 	.word	0x080013fc
 80013d8:	080013fc 	.word	0x080013fc
 80013dc:	080013fc 	.word	0x080013fc
 80013e0:	08001400 	.word	0x08001400

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
