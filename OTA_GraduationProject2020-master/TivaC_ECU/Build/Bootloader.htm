<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat Jul 25 23:07:57 2020
<BR><P>
<H3>Maximum Stack Usage =         68 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler_In_SRAM &rArr; Bl_main &rArr; ConfigureDevice &rArr; CanIf_Init &rArr; CANReceiveMessageSet
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8]">ProcessorInit</a>
 <LI><a href="#[9]">__Vectors_End</a>
 <LI><a href="#[7]">Reset_Handler</a>
 <LI><a href="#[1e]">StartApplication</a>
 <LI><a href="#[2d]">Delay</a>
 <LI><a href="#[f]">SysCtlDelay</a>
 <LI><a href="#[7d]">DisableInterrupts</a>
 <LI><a href="#[7e]">EnableInterrupts</a>
 <LI><a href="#[5]">Reset_Handler_In_SRAM</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">UART0_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[f]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysCtlDelay</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(.text) referenced 114 times from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">Reset_Handler_In_SRAM</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">UART0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">_IntDefaultHandler</a> from interrupt.o(.text) referenced from interrupt.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8]"></a>ProcessorInit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[9]"></a>__Vectors_End</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessorInit
</UL>

<P><STRONG><a name="[4]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[47]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[39]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[27]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDeepSleep
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[3d]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskSet
</UL>

<P><STRONG><a name="[3f]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskGet
</UL>

<P><STRONG><a name="[13]"></a>BLInternalFlashErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bl_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePacketInAppSec
</UL>

<P><STRONG><a name="[14]"></a>BLInternalFlashProgram</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bl_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BLInternalFlashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePacketInAppSec
</UL>

<P><STRONG><a name="[48]"></a>BLInternalFlashSizeGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bl_flash.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>BLInternalFlashStartAddrCheck</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bl_flash.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>BLInternalFlashErrorClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bl_flash.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>BLInternalFlashErrorCheck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bl_flash.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bl_main.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>INIT_EEPROM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = INIT_EEPROM &rArr; EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_In_SRAM
</UL>

<P><STRONG><a name="[d]"></a>ConfigureDevice</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = ConfigureDevice &rArr; CanIf_Init &rArr; CANReceiveMessageSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortF_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[12]"></a>StorePacketInAppSec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = StorePacketInAppSec &rArr; BLInternalFlashProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLInternalFlashProgram
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLInternalFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[1d]"></a>Flush_PacketBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bl_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[15]"></a>Set_CurrentAppsection</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Set_CurrentAppsection &rArr; EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[17]"></a>Get_CurrentAppStartAddress</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CurrentAppStartAddress &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForceUpdate
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[19]"></a>Get_AvailableAppSection</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_AvailableAppSection &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[1a]"></a>Bl_main</STRONG> (Thumb, 460 bytes, Stack size 0 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = Bl_main &rArr; ConfigureDevice &rArr; CanIf_Init &rArr; CANReceiveMessageSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartApplication
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitBlocking
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReceiveBlocking
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AvailableAppSection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentAppStartAddress
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CurrentAppsection
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flush_PacketBuffer
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorePacketInAppSec
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_In_SRAM
</UL>

<P><STRONG><a name="[1f]"></a>CheckForceUpdate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bl_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CheckForceUpdate &rArr; Get_CurrentAppStartAddress &rArr; EEPROMRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartApplication
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentAppStartAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler_In_SRAM
</UL>

<P><STRONG><a name="[4d]"></a>SysCtlSRAMSizeGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>SysCtlFlashSizeGet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>SysCtlFlashSectorSizeGet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>SysCtlPeripheralPowerOn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>SysCtlPeripheralPowerOff</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EEPROM
</UL>

<P><STRONG><a name="[55]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>SysCtlPeripheralSleepEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>SysCtlPeripheralSleepDisable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>SysCtlPeripheralDeepSleepEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>SysCtlPeripheralDeepSleepDisable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>SysCtlPeripheralClockGating</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>SysCtlIntRegister</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[23]"></a>SysCtlIntUnregister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[5b]"></a>SysCtlIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>SysCtlIntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>SysCtlIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>SysCtlIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>SysCtlLDOSleepSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>SysCtlLDOSleepGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SysCtlLDODeepSleepSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>SysCtlLDODeepSleepGet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>SysCtlSleepPowerSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>SysCtlDeepSleepPowerSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>SysCtlReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>SysCtlSleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[28]"></a>SysCtlDeepSleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[66]"></a>SysCtlResetCauseGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>SysCtlResetCauseClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>SysCtlMOSCConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>SysCtlPIOSCCalibrate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>SysCtlResetBehaviorSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>SysCtlResetBehaviorGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>SysCtlClockFreqSet</STRONG> (Thumb, 666 bytes, Stack size 48 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysCtlFrequencyGet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysCtlMemTimingGet
</UL>

<P><STRONG><a name="[2c]"></a>SysCtlClockSet</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[6c]"></a>SysCtlClockGet</STRONG> (Thumb, 326 bytes, Stack size 20 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>SysCtlDeepSleepClockSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>SysCtlDeepSleepClockConfigSet</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>SysCtlPWMClockGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>SysCtlGPIOAHBEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>SysCtlGPIOAHBDisable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>SysCtlUSBPLLDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>SysCtlVoltageEventConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>SysCtlVoltageEventStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>SysCtlVoltageEventClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>SysCtlVCOGet</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>SysCtlNMIStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>SysCtlNMIClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>SysCtlClockOutConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SysCtlAltClkConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>StartApplication</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForceUpdate
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[2d]"></a>Delay</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[f]"></a>SysCtlDelay</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskSet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureDevice
</UL>

<P><STRONG><a name="[7d]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>GPIO_Init</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[2f]"></a>CANInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, can_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[30]"></a>CANBitTimingSet</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, can_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[33]"></a>CANEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[7f]"></a>CANDisable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>CANIntEnable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>CANIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>CANIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>CANIntStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>CANTransmitMessageSet</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANTransmitMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[32]"></a>CANReceiveMessageSet</STRONG> (Thumb, 478 bytes, Stack size 12 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANReceiveMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIf_Init
</UL>

<P><STRONG><a name="[84]"></a>CANMessageGet</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>CANMessageClear</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>CANRetrySet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>CANRetryGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>CANStatusGet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, can_driver.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>CAN_Write</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitBlocking
</UL>

<P><STRONG><a name="[36]"></a>TransmitOk</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TransmitOk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitBlocking
</UL>

<P><STRONG><a name="[34]"></a>ReceiveOk</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, can_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReceiveOk
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReceiveBlocking
</UL>

<P><STRONG><a name="[10]"></a>CanIf_Init</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, bl_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CanIf_Init &rArr; CANReceiveMessageSet
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANReceiveMessageSet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANTransmitMessageSet
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureDevice
</UL>

<P><STRONG><a name="[1c]"></a>CanReceiveBlocking</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bl_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanReceiveBlocking &rArr; _CANDataRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CANDataRegRead
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveOk
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[1b]"></a>CanTransmitBlocking</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bl_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanTransmitBlocking &rArr; TransmitOk
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitOk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
</UL>

<P><STRONG><a name="[38]"></a>IntMasterEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>

<P><STRONG><a name="[3a]"></a>IntMasterDisable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>

<P><STRONG><a name="[21]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
</UL>

<P><STRONG><a name="[25]"></a>IntUnregister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
</UL>

<P><STRONG><a name="[89]"></a>IntPriorityGroupingSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>IntPriorityGroupingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>IntPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>IntPriorityGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>IntEnable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
</UL>

<P><STRONG><a name="[24]"></a>IntDisable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
</UL>

<P><STRONG><a name="[8d]"></a>IntIsEnabled</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>IntPendSet</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>IntPendClear</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>IntPriorityMaskSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriSet
</UL>

<P><STRONG><a name="[3e]"></a>IntPriorityMaskGet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriGet
</UL>

<P><STRONG><a name="[90]"></a>IntTrigger</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>Led_On</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>PortF_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureDevice
</UL>

<P><STRONG><a name="[e]"></a>PLL_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureDevice
</UL>

<P><STRONG><a name="[c]"></a>EEPROMInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMWaitForDone
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EEPROM
</UL>

<P><STRONG><a name="[92]"></a>EEPROMSizeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>EEPROMBlockCountGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>EEPROMRead</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EEPROMRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForceUpdate
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AvailableAppSection
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentAppStartAddress
</UL>

<P><STRONG><a name="[16]"></a>EEPROMProgram</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = EEPROMProgram &rArr; _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskSet
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CurrentAppsection
</UL>

<P><STRONG><a name="[44]"></a>EEPROMProgramNonBlocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskSet
</UL>

<P><STRONG><a name="[45]"></a>EEPROMMassErase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMWaitForDone
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[94]"></a>EEPROMBlockProtectGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>EEPROMBlockProtectSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>EEPROMBlockPasswordSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>EEPROMBlockLock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>EEPROMBlockUnlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>EEPROMBlockHide</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>EEPROMIntEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>EEPROMIntDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>EEPROMIntStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>EEPROMIntClear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EEPROMSectorMaskClear
</UL>

<P><STRONG><a name="[9d]"></a>EEPROMStatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>_SysCtlMemTimingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>

<P><STRONG><a name="[2b]"></a>_SysCtlFrequencyGet</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockFreqSet
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler_In_SRAM</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = Reset_Handler_In_SRAM &rArr; Bl_main &rArr; ConfigureDevice &rArr; CanIf_Init &rArr; CANReceiveMessageSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForceUpdate
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bl_main
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_EEPROM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>_CANDataRegRead</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, bl_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _CANDataRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReceiveBlocking
</UL>

<P><STRONG><a name="[6]"></a>_IntDefaultHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>

<P><STRONG><a name="[40]"></a>_EEPROMSectorMaskSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _EEPROMSectorMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgramNonBlocking
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>

<P><STRONG><a name="[41]"></a>_EEPROMSectorMaskClear</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _EEPROMSectorMaskClear
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMIntClear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>

<P><STRONG><a name="[42]"></a>_EEPROMWaitForDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMMassErase
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
