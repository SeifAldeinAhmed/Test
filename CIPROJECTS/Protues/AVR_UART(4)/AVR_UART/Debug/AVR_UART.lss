
AVR_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00004188  0000421c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  0080008a  0080008a  00004246  2**0
                  ALLOC
  3 .stab         00004314  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001879  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <main>
      8a:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 20 	jmp	0x4126	; 0x4126 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 af 20 	jmp	0x415e	; 0x415e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 97 20 	jmp	0x412e	; 0x412e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <WDT_vidInit>:
/*To disable the WDT the bit WDTOE should be on before disabling the WDT*/



extern void WDT_vidInit(WDT_TimeOut TimeOut)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
	WDTCR |= (1<<WDE_bit);
     caa:	a1 e4       	ldi	r26, 0x41	; 65
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e1 e4       	ldi	r30, 0x41	; 65
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 60       	ori	r24, 0x08	; 8
     cb6:	8c 93       	st	X, r24
	WDTCR |= TimeOut;
     cb8:	a1 e4       	ldi	r26, 0x41	; 65
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e4       	ldi	r30, 0x41	; 65
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	90 81       	ld	r25, Z
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	89 2b       	or	r24, r25
     cc6:	8c 93       	st	X, r24

}
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <WDT_vidRefresh>:
extern void WDT_vidRefresh(void)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62

}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <WDT_vidTurnOff>:

extern void WDT_vidTurnOff(void)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	 * 1st write one to WDTOE and WDE at the same operation
	 * 2nd  after 4 cycles write zero WDE */


	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE_bit) | (1<<WDE_bit);
     ce6:	e1 e4       	ldi	r30, 0x41	; 65
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	88 e1       	ldi	r24, 0x18	; 24
     cec:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     cee:	e1 e4       	ldi	r30, 0x41	; 65
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	10 82       	st	Z, r1
}
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <UART_Init>:



//============================================================================================
extern void UART_Init (void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	/* Configure the Rx pin to be input*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>

	/* Configure the Tx pin as output*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
     d16:	e9 e2       	ldi	r30, 0x29	; 41
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	83 e3       	ldi	r24, 0x33	; 51
     d1c:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
     d1e:	e0 e4       	ldi	r30, 0x40	; 64
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
     d24:	eb e2       	ldi	r30, 0x2B	; 43
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
     d2a:	ea e2       	ldi	r30, 0x2A	; 42
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	88 e1       	ldi	r24, 0x18	; 24
     d30:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)
     d32:	e0 e4       	ldi	r30, 0x40	; 64
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	86 e8       	ldi	r24, 0x86	; 134
     d38:	80 83       	st	Z, r24
			| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));

	//set_bit(SREG,7);
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	0f 92       	push	r0
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
     d4c:	ec e2       	ldi	r30, 0x2C	; 44
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
     d54:	eb e2       	ldi	r30, 0x2B	; 43
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	82 95       	swap	r24
     d5c:	86 95       	lsr	r24
     d5e:	87 70       	andi	r24, 0x07	; 7
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	a1 f3       	breq	.-24     	; 0xd54 <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
     d6c:	ab e2       	ldi	r26, 0x2B	; 43
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	eb e2       	ldi	r30, 0x2B	; 43
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 64       	ori	r24, 0x40	; 64
     d78:	8c 93       	st	X, r24
}
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
     d8a:	eb e2       	ldi	r30, 0x2B	; 43
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 23       	and	r24, r24
     d92:	dc f7       	brge	.-10     	; 0xd8a <UART_RecieveData+0x8>
	return UDR;
     d94:	ec e2       	ldi	r30, 0x2C	; 44
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z

}
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <UART_voidPrintf+0x6>
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9b 83       	std	Y+3, r25	; 0x03
     dae:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
     db0:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     db2:	19 82       	std	Y+1, r1	; 0x01
     db4:	0e c0       	rjmp	.+28     	; 0xdd2 <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	9b 81       	ldd	r25, Y+3	; 0x03
     dc0:	fc 01       	movw	r30, r24
     dc2:	e2 0f       	add	r30, r18
     dc4:	f3 1f       	adc	r31, r19
     dc6:	80 81       	ld	r24, Z
     dc8:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	80 81       	ld	r24, Z
     de4:	88 23       	and	r24, r24
     de6:	39 f7       	brne	.-50     	; 0xdb6 <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <UART_voidSendNumber>:

extern void UART_voidSendNumber(u32 x)
{
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	2c 97       	sbiw	r28, 0x0c	; 12
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	69 87       	std	Y+9, r22	; 0x09
     e12:	7a 87       	std	Y+10, r23	; 0x0a
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
	u32 y = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	af 83       	std	Y+7, r26	; 0x07
     e26:	b8 87       	std	Y+8, r27	; 0x08
	u32 z = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	ab 83       	std	Y+3, r26	; 0x03
     e36:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	ab 85       	ldd	r26, Y+11	; 0x0b
     e3e:	bc 85       	ldd	r27, Y+12	; 0x0c
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	a1 05       	cpc	r26, r1
     e44:	b1 05       	cpc	r27, r1
     e46:	19 f4       	brne	.+6      	; 0xe4e <UART_voidSendNumber+0x5a>
	{
		UART_TransmitData('0');
     e48:	80 e3       	ldi	r24, 0x30	; 48
     e4a:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
	}
	if (x < 0) {
		UART_TransmitData('-');
		x *= -1;
	}
	if (x<10)
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	ab 85       	ldd	r26, Y+11	; 0x0b
     e54:	bc 85       	ldd	r27, Y+12	; 0x0c
     e56:	8a 30       	cpi	r24, 0x0A	; 10
     e58:	91 05       	cpc	r25, r1
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	28 f4       	brcc	.+10     	; 0xe6a <UART_voidSendNumber+0x76>
	{
	   UART_TransmitData(x+48);
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	80 5d       	subi	r24, 0xD0	; 208
     e64:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
     e68:	07 c1       	rjmp	.+526    	; 0x1078 <UART_voidSendNumber+0x284>
	  // UART_TransmitData(44);
    }
	else if(x==10)
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	ab 85       	ldd	r26, Y+11	; 0x0b
     e70:	bc 85       	ldd	r27, Y+12	; 0x0c
     e72:	8a 30       	cpi	r24, 0x0A	; 10
     e74:	91 05       	cpc	r25, r1
     e76:	a1 05       	cpc	r26, r1
     e78:	b1 05       	cpc	r27, r1
     e7a:	39 f4       	brne	.+14     	; 0xe8a <UART_voidSendNumber+0x96>
	{
		UART_TransmitData(49);
     e7c:	81 e3       	ldi	r24, 0x31	; 49
     e7e:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
		UART_TransmitData(48);
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
     e88:	f7 c0       	rjmp	.+494    	; 0x1078 <UART_voidSendNumber+0x284>
	}
	else if ((x > 10) && (x < 100))
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	ab 85       	ldd	r26, Y+11	; 0x0b
     e90:	bc 85       	ldd	r27, Y+12	; 0x0c
     e92:	8b 30       	cpi	r24, 0x0B	; 11
     e94:	91 05       	cpc	r25, r1
     e96:	a1 05       	cpc	r26, r1
     e98:	b1 05       	cpc	r27, r1
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <UART_voidSendNumber+0xaa>
     e9c:	4b c0       	rjmp	.+150    	; 0xf34 <UART_voidSendNumber+0x140>
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	ab 85       	ldd	r26, Y+11	; 0x0b
     ea4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ea6:	84 36       	cpi	r24, 0x64	; 100
     ea8:	91 05       	cpc	r25, r1
     eaa:	a1 05       	cpc	r26, r1
     eac:	b1 05       	cpc	r27, r1
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <UART_voidSendNumber+0xbe>
     eb0:	41 c0       	rjmp	.+130    	; 0xf34 <UART_voidSendNumber+0x140>
	{
		y=x%10;
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	ab 85       	ldd	r26, Y+11	; 0x0b
     eb8:	bc 85       	ldd	r27, Y+12	; 0x0c
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	af 83       	std	Y+7, r26	; 0x07
     ed4:	b8 87       	std	Y+8, r27	; 0x08
		x=x-y;
     ed6:	29 85       	ldd	r18, Y+9	; 0x09
     ed8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eda:	4b 85       	ldd	r20, Y+11	; 0x0b
     edc:	5c 85       	ldd	r21, Y+12	; 0x0c
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	af 81       	ldd	r26, Y+7	; 0x07
     ee4:	b8 85       	ldd	r27, Y+8	; 0x08
     ee6:	79 01       	movw	r14, r18
     ee8:	8a 01       	movw	r16, r20
     eea:	e8 1a       	sub	r14, r24
     eec:	f9 0a       	sbc	r15, r25
     eee:	0a 0b       	sbc	r16, r26
     ef0:	1b 0b       	sbc	r17, r27
     ef2:	d8 01       	movw	r26, r16
     ef4:	c7 01       	movw	r24, r14
     ef6:	89 87       	std	Y+9, r24	; 0x09
     ef8:	9a 87       	std	Y+10, r25	; 0x0a
     efa:	ab 87       	std	Y+11, r26	; 0x0b
     efc:	bc 87       	std	Y+12, r27	; 0x0c
		x=x/10;
     efe:	89 85       	ldd	r24, Y+9	; 0x09
     f00:	9a 85       	ldd	r25, Y+10	; 0x0a
     f02:	ab 85       	ldd	r26, Y+11	; 0x0b
     f04:	bc 85       	ldd	r27, Y+12	; 0x0c
     f06:	2a e0       	ldi	r18, 0x0A	; 10
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
     f16:	da 01       	movw	r26, r20
     f18:	c9 01       	movw	r24, r18
     f1a:	89 87       	std	Y+9, r24	; 0x09
     f1c:	9a 87       	std	Y+10, r25	; 0x0a
     f1e:	ab 87       	std	Y+11, r26	; 0x0b
     f20:	bc 87       	std	Y+12, r27	; 0x0c
		UART_TransmitData(x+48);
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	80 5d       	subi	r24, 0xD0	; 208
     f26:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
		UART_TransmitData(y+48);
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	80 5d       	subi	r24, 0xD0	; 208
     f2e:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
     f32:	a2 c0       	rjmp	.+324    	; 0x1078 <UART_voidSendNumber+0x284>
		//UART_TransmitData(44);
	}
	else if ((x >= 100))
     f34:	89 85       	ldd	r24, Y+9	; 0x09
     f36:	9a 85       	ldd	r25, Y+10	; 0x0a
     f38:	ab 85       	ldd	r26, Y+11	; 0x0b
     f3a:	bc 85       	ldd	r27, Y+12	; 0x0c
     f3c:	84 36       	cpi	r24, 0x64	; 100
     f3e:	91 05       	cpc	r25, r1
     f40:	a1 05       	cpc	r26, r1
     f42:	b1 05       	cpc	r27, r1
     f44:	08 f4       	brcc	.+2      	; 0xf48 <UART_voidSendNumber+0x154>
     f46:	98 c0       	rjmp	.+304    	; 0x1078 <UART_voidSendNumber+0x284>
		{
			y=x%10;
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	ab 85       	ldd	r26, Y+11	; 0x0b
     f4e:	bc 85       	ldd	r27, Y+12	; 0x0c
     f50:	2a e0       	ldi	r18, 0x0A	; 10
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	af 83       	std	Y+7, r26	; 0x07
     f6a:	b8 87       	std	Y+8, r27	; 0x08
			x=x-y;
     f6c:	29 85       	ldd	r18, Y+9	; 0x09
     f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f70:	4b 85       	ldd	r20, Y+11	; 0x0b
     f72:	5c 85       	ldd	r21, Y+12	; 0x0c
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	af 81       	ldd	r26, Y+7	; 0x07
     f7a:	b8 85       	ldd	r27, Y+8	; 0x08
     f7c:	79 01       	movw	r14, r18
     f7e:	8a 01       	movw	r16, r20
     f80:	e8 1a       	sub	r14, r24
     f82:	f9 0a       	sbc	r15, r25
     f84:	0a 0b       	sbc	r16, r26
     f86:	1b 0b       	sbc	r17, r27
     f88:	d8 01       	movw	r26, r16
     f8a:	c7 01       	movw	r24, r14
     f8c:	89 87       	std	Y+9, r24	; 0x09
     f8e:	9a 87       	std	Y+10, r25	; 0x0a
     f90:	ab 87       	std	Y+11, r26	; 0x0b
     f92:	bc 87       	std	Y+12, r27	; 0x0c
			z=x%100;
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	ab 85       	ldd	r26, Y+11	; 0x0b
     f9a:	bc 85       	ldd	r27, Y+12	; 0x0c
     f9c:	24 e6       	ldi	r18, 0x64	; 100
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04
			x=x-z;
     fb8:	29 85       	ldd	r18, Y+9	; 0x09
     fba:	3a 85       	ldd	r19, Y+10	; 0x0a
     fbc:	4b 85       	ldd	r20, Y+11	; 0x0b
     fbe:	5c 85       	ldd	r21, Y+12	; 0x0c
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	ab 81       	ldd	r26, Y+3	; 0x03
     fc6:	bc 81       	ldd	r27, Y+4	; 0x04
     fc8:	79 01       	movw	r14, r18
     fca:	8a 01       	movw	r16, r20
     fcc:	e8 1a       	sub	r14, r24
     fce:	f9 0a       	sbc	r15, r25
     fd0:	0a 0b       	sbc	r16, r26
     fd2:	1b 0b       	sbc	r17, r27
     fd4:	d8 01       	movw	r26, r16
     fd6:	c7 01       	movw	r24, r14
     fd8:	89 87       	std	Y+9, r24	; 0x09
     fda:	9a 87       	std	Y+10, r25	; 0x0a
     fdc:	ab 87       	std	Y+11, r26	; 0x0b
     fde:	bc 87       	std	Y+12, r27	; 0x0c
			x=x/100;
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	ab 85       	ldd	r26, Y+11	; 0x0b
     fe6:	bc 85       	ldd	r27, Y+12	; 0x0c
     fe8:	24 e6       	ldi	r18, 0x64	; 100
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
     ff8:	da 01       	movw	r26, r20
     ffa:	c9 01       	movw	r24, r18
     ffc:	89 87       	std	Y+9, r24	; 0x09
     ffe:	9a 87       	std	Y+10, r25	; 0x0a
    1000:	ab 87       	std	Y+11, r26	; 0x0b
    1002:	bc 87       	std	Y+12, r27	; 0x0c
			UART_TransmitData(x+48);
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	80 5d       	subi	r24, 0xD0	; 208
    1008:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
			if((z>=10) && (z%10==0))
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
    1010:	ab 81       	ldd	r26, Y+3	; 0x03
    1012:	bc 81       	ldd	r27, Y+4	; 0x04
    1014:	8a 30       	cpi	r24, 0x0A	; 10
    1016:	91 05       	cpc	r25, r1
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	28 f1       	brcs	.+74     	; 0x1068 <UART_voidSendNumber+0x274>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	ab 81       	ldd	r26, Y+3	; 0x03
    1024:	bc 81       	ldd	r27, Y+4	; 0x04
    1026:	2a e0       	ldi	r18, 0x0A	; 10
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	a1 05       	cpc	r26, r1
    103e:	b1 05       	cpc	r27, r1
    1040:	99 f4       	brne	.+38     	; 0x1068 <UART_voidSendNumber+0x274>
			{
				UART_voidSendNumber(z/10);
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	ab 81       	ldd	r26, Y+3	; 0x03
    1048:	bc 81       	ldd	r27, Y+4	; 0x04
    104a:	2a e0       	ldi	r18, 0x0A	; 10
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    105a:	da 01       	movw	r26, r20
    105c:	c9 01       	movw	r24, r18
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <UART_voidSendNumber>
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <UART_voidSendNumber+0x27c>
			}
			else
			{
			  UART_TransmitData(z+48);
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	80 5d       	subi	r24, 0xD0	; 208
    106c:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
     		}
			UART_TransmitData(y+48);
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	80 5d       	subi	r24, 0xD0	; 208
    1074:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
	}
	while (y != 1) {
		UART_TransmitData((y % 10) + 48);
		y = (y / 10);
	}*/
}
    1078:	2c 96       	adiw	r28, 0x0c	; 12
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <Timer0_voidInit>:
	#endif
#endif


void Timer0_voidInit(void)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
		/*set the Global interrupt bit value*/
		assign_bit(SREG,GI_bit,GI);
	#endif

	/*fill the value of the TCCR0 Register according to the Configuration*/
	TCCR0 |= (FOC0 << FOC0_bit) | (WGM00 << WGM00_bit) | (COM01 << COM01_bit)
    109a:	a3 e5       	ldi	r26, 0x53	; 83
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e3 e5       	ldi	r30, 0x53	; 83
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	89 67       	ori	r24, 0x79	; 121
    10a6:	8c 93       	st	X, r24
			| (COM00 << COM00_bit) | (WGM01 << WGM01_bit) | (CS02 << CS02_bit)
			| (CS01 << CS01_bit) | (CS00 << CS00_bit);

	/*fill the value of the TIMSK0 Register according to the Configuration*/
	#if ((OCIE0 == 1) && (CTC_Mode==Enable || PWM_Mode == Enable))
	OCR0=OCR0_Value;
    10a8:	ec e5       	ldi	r30, 0x5C	; 92
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
	TIMSK |= (OCIE0<<OCIE0_bit);
    10ae:	a9 e5       	ldi	r26, 0x59	; 89
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e9 e5       	ldi	r30, 0x59	; 89
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	8c 93       	st	X, r24

	#if ((TOIE0 == 1) && (OverFlow_Mode==Enable))
		TIMSK |= (TOIE0<<TOIE0_bit);
	#endif

}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <SPI_voidinitialization>:
/* I/P Parameters: It takes no thing.								  */
/* Returns:it returns nothing.										  */
/* Desc:This Function initialize the SPI.			  	              */
/**********************************************************************/
extern void SPI_voidinitialization(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
#endif

#ifdef Slave

	/*Define Slave Select pin as Input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
		/*Define MOSI pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	65 e0       	ldi	r22, 0x05	; 5
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
		/*Define MISO pin as DIO_OUTPUT*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
		/*Define Clock pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	67 e0       	ldi	r22, 0x07	; 7
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>

		/*Set master/slave bit to one to initialize as a master */
		CLR_BIT(SPCR,4);
    10f2:	ad e2       	ldi	r26, 0x2D	; 45
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ed e2       	ldi	r30, 0x2D	; 45
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7e       	andi	r24, 0xEF	; 239
    10fe:	8c 93       	st	X, r24
#endif
SET_BIT(SPCR,6);
    1100:	ad e2       	ldi	r26, 0x2D	; 45
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	ed e2       	ldi	r30, 0x2D	; 45
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 64       	ori	r24, 0x40	; 64
    110c:	8c 93       	st	X, r24
CLR_BIT(SPCR,5);
    110e:	ad e2       	ldi	r26, 0x2D	; 45
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ed e2       	ldi	r30, 0x2D	; 45
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7d       	andi	r24, 0xDF	; 223
    111a:	8c 93       	st	X, r24
CLR_BIT(SPCR,3);
    111c:	ad e2       	ldi	r26, 0x2D	; 45
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ed e2       	ldi	r30, 0x2D	; 45
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	87 7f       	andi	r24, 0xF7	; 247
    1128:	8c 93       	st	X, r24


}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <SPI_voidTranceiver>:
/* I/P Parameters: It takes u8 var. data to be sent					  */
/* Returns:it returns u8 var. data to be received					  */
/* Desc:This Function transmit. and receive using SPI.			      */
/**********************************************************************/
extern u8 SPI_voidTranceiver(u8 data)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
#ifdef Master
	/*Select the slave By pull down the SS pin */
	CLR_BIT(PORTB_REG,4);
#endif

	SPDR=data;
    113c:	ef e2       	ldi	r30, 0x2F	; 47
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	80 83       	st	Z, r24

	while (GET_BIT(SPSR,7)==0);
    1144:	ee e2       	ldi	r30, 0x2E	; 46
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 23       	and	r24, r24
    114c:	dc f7       	brge	.-10     	; 0x1144 <SPI_voidTranceiver+0x14>
#ifdef Slave
	/*Select the slave By pull down the SS pin */
	SET_BIT(PORTB_REG,4);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	80 61       	ori	r24, 0x10	; 16
    115a:	8c 93       	st	X, r24
#endif

	return SPDR;
    115c:	ef e2       	ldi	r30, 0x2F	; 47
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
}
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <__vector_1>:
/** Linker Problem solved */
/*void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)*/
void __vector_1 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_1	 (void)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
//		EXTINT0_Functionp();
//	  }
	//DressMachine();
	//inthandler ();
//	handler();
}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_3>:
/** Linker Problem solved */
/*void __vector_3(void) __attribute__(( signal , used ));
void __vector_3(void)*/
void __vector_3 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_3	 (void)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    // if (EXTINT2_Functionp != NULL)
	 //{
		//EXTINT2_Functionp();
	//login();
	//spitrans();
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <EXT_voidEnable>:
/*                     I/P Parameters: copy_EXTINT_NUM                        */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidEnable( u8 copy_EXTINT_NUM  )
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	2a 97       	sbiw	r28, 0x0a	; 10
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	8a 83       	std	Y+2, r24	; 0x02
	u8 copy_Sense;
	SET_BIT(SREG,7);
    11c0:	af e5       	ldi	r26, 0x5F	; 95
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e5       	ldi	r30, 0x5F	; 95
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	8c 93       	st	X, r24
	/* Switching on the interrupts to enable the targeted one */
	switch (copy_EXTINT_NUM)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3a 87       	std	Y+10, r19	; 0x0a
    11d6:	29 87       	std	Y+9, r18	; 0x09
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <EXT_voidEnable+0x3a>
    11e2:	77 c0       	rjmp	.+238    	; 0x12d2 <EXT_voidEnable+0x128>
    11e4:	29 85       	ldd	r18, Y+9	; 0x09
    11e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <EXT_voidEnable+0x46>
    11ee:	dd c0       	rjmp	.+442    	; 0x13aa <EXT_voidEnable+0x200>
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	09 f0       	breq	.+2      	; 0x11fa <EXT_voidEnable+0x50>
    11f8:	06 c1       	rjmp	.+524    	; 0x1406 <EXT_voidEnable+0x25c>
	{
/**************************************************************************************************************************/
		case EXTINT0 :
							/* Disable INT0 */
							CLR_BIT(GICR,6);
    11fa:	ab e5       	ldi	r26, 0x5B	; 91
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e5       	ldi	r30, 0x5B	; 91
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	8c 93       	st	X, r24
							/* Getting The Sense Mood of INT0 */
							 copy_Sense = EXTI0_SENSE_MODE ;
    1208:	84 e0       	ldi	r24, 0x04	; 4
    120a:	89 83       	std	Y+1, r24	; 0x01
							/* Switch on the sense mood to configure it */
							switch (copy_Sense)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	38 87       	std	Y+8, r19	; 0x08
    1214:	2f 83       	std	Y+7, r18	; 0x07
    1216:	8f 81       	ldd	r24, Y+7	; 0x07
    1218:	98 85       	ldd	r25, Y+8	; 0x08
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	91 05       	cpc	r25, r1
    121e:	a1 f1       	breq	.+104    	; 0x1288 <EXT_voidEnable+0xde>
    1220:	2f 81       	ldd	r18, Y+7	; 0x07
    1222:	38 85       	ldd	r19, Y+8	; 0x08
    1224:	25 30       	cpi	r18, 0x05	; 5
    1226:	31 05       	cpc	r19, r1
    1228:	34 f4       	brge	.+12     	; 0x1236 <EXT_voidEnable+0x8c>
    122a:	8f 81       	ldd	r24, Y+7	; 0x07
    122c:	98 85       	ldd	r25, Y+8	; 0x08
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	91 05       	cpc	r25, r1
    1232:	61 f0       	breq	.+24     	; 0x124c <EXT_voidEnable+0xa2>
    1234:	46 c0       	rjmp	.+140    	; 0x12c2 <EXT_voidEnable+0x118>
    1236:	2f 81       	ldd	r18, Y+7	; 0x07
    1238:	38 85       	ldd	r19, Y+8	; 0x08
    123a:	27 30       	cpi	r18, 0x07	; 7
    123c:	31 05       	cpc	r19, r1
    123e:	a9 f0       	breq	.+42     	; 0x126a <EXT_voidEnable+0xc0>
    1240:	8f 81       	ldd	r24, Y+7	; 0x07
    1242:	98 85       	ldd	r25, Y+8	; 0x08
    1244:	8a 30       	cpi	r24, 0x0A	; 10
    1246:	91 05       	cpc	r25, r1
    1248:	71 f1       	breq	.+92     	; 0x12a6 <EXT_voidEnable+0xfc>
    124a:	3b c0       	rjmp	.+118    	; 0x12c2 <EXT_voidEnable+0x118>
							{
								case IOC :
											  SET_BIT(MCUCR , 0);
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	81 60       	ori	r24, 0x01	; 1
    1258:	8c 93       	st	X, r24
											  CLR_BIT(MCUCR , 1);
    125a:	a5 e5       	ldi	r26, 0x55	; 85
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e5       	ldi	r30, 0x55	; 85
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8d 7f       	andi	r24, 0xFD	; 253
    1266:	8c 93       	st	X, r24
    1268:	2c c0       	rjmp	.+88     	; 0x12c2 <EXT_voidEnable+0x118>
											  break;
								case RISING :
											  SET_BIT(MCUCR , 0);
    126a:	a5 e5       	ldi	r26, 0x55	; 85
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e5       	ldi	r30, 0x55	; 85
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	8c 93       	st	X, r24
											  SET_BIT(MCUCR , 1);
    1278:	a5 e5       	ldi	r26, 0x55	; 85
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e5       	ldi	r30, 0x55	; 85
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	82 60       	ori	r24, 0x02	; 2
    1284:	8c 93       	st	X, r24
    1286:	1d c0       	rjmp	.+58     	; 0x12c2 <EXT_voidEnable+0x118>
											  break;
								case FALLING :
									          CLR_BIT(MCUCR , 0);
    1288:	a5 e5       	ldi	r26, 0x55	; 85
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e5       	ldi	r30, 0x55	; 85
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8e 7f       	andi	r24, 0xFE	; 254
    1294:	8c 93       	st	X, r24
									          SET_BIT(MCUCR , 1);
    1296:	a5 e5       	ldi	r26, 0x55	; 85
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e5       	ldi	r30, 0x55	; 85
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	8c 93       	st	X, r24
    12a4:	0e c0       	rjmp	.+28     	; 0x12c2 <EXT_voidEnable+0x118>
											  break;
								case LOW_LEVEL :
							                  CLR_BIT(MCUCR , 0);
    12a6:	a5 e5       	ldi	r26, 0x55	; 85
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e5 e5       	ldi	r30, 0x55	; 85
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8e 7f       	andi	r24, 0xFE	; 254
    12b2:	8c 93       	st	X, r24
							                  CLR_BIT(MCUCR , 1);
    12b4:	a5 e5       	ldi	r26, 0x55	; 85
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e5       	ldi	r30, 0x55	; 85
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8d 7f       	andi	r24, 0xFD	; 253
    12c0:	8c 93       	st	X, r24
					     			          break;
							}
							/* Enable INT0 */
							SET_BIT(GICR,6);
    12c2:	ab e5       	ldi	r26, 0x5B	; 91
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e5       	ldi	r30, 0x5B	; 91
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	8c 93       	st	X, r24
    12d0:	9a c0       	rjmp	.+308    	; 0x1406 <EXT_voidEnable+0x25c>
							break;
/**************************************************************************************************************************/
		case EXTINT1 :
						/* Disable INT1 */
						CLR_BIT(GICR,7);
    12d2:	ab e5       	ldi	r26, 0x5B	; 91
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e5       	ldi	r30, 0x5B	; 91
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 77       	andi	r24, 0x7F	; 127
    12de:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI1_SENSE_MODE ;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3e 83       	std	Y+6, r19	; 0x06
    12ec:	2d 83       	std	Y+5, r18	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	91 05       	cpc	r25, r1
    12f6:	a1 f1       	breq	.+104    	; 0x1360 <EXT_voidEnable+0x1b6>
    12f8:	2d 81       	ldd	r18, Y+5	; 0x05
    12fa:	3e 81       	ldd	r19, Y+6	; 0x06
    12fc:	25 30       	cpi	r18, 0x05	; 5
    12fe:	31 05       	cpc	r19, r1
    1300:	34 f4       	brge	.+12     	; 0x130e <EXT_voidEnable+0x164>
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	61 f0       	breq	.+24     	; 0x1324 <EXT_voidEnable+0x17a>
    130c:	46 c0       	rjmp	.+140    	; 0x139a <EXT_voidEnable+0x1f0>
    130e:	2d 81       	ldd	r18, Y+5	; 0x05
    1310:	3e 81       	ldd	r19, Y+6	; 0x06
    1312:	27 30       	cpi	r18, 0x07	; 7
    1314:	31 05       	cpc	r19, r1
    1316:	a9 f0       	breq	.+42     	; 0x1342 <EXT_voidEnable+0x198>
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	8a 30       	cpi	r24, 0x0A	; 10
    131e:	91 05       	cpc	r25, r1
    1320:	71 f1       	breq	.+92     	; 0x137e <EXT_voidEnable+0x1d4>
    1322:	3b c0       	rjmp	.+118    	; 0x139a <EXT_voidEnable+0x1f0>
						{
							case IOC :
										  SET_BIT(MCUCR , 2);
    1324:	a5 e5       	ldi	r26, 0x55	; 85
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e5       	ldi	r30, 0x55	; 85
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    1332:	a5 e5       	ldi	r26, 0x55	; 85
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e5 e5       	ldi	r30, 0x55	; 85
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	87 7f       	andi	r24, 0xF7	; 247
    133e:	8c 93       	st	X, r24
    1340:	2c c0       	rjmp	.+88     	; 0x139a <EXT_voidEnable+0x1f0>
										  break;
							case RISING :
										  SET_BIT(MCUCR , 2);
    1342:	a5 e5       	ldi	r26, 0x55	; 85
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e5       	ldi	r30, 0x55	; 85
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	84 60       	ori	r24, 0x04	; 4
    134e:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    1350:	a5 e5       	ldi	r26, 0x55	; 85
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e5       	ldi	r30, 0x55	; 85
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	88 60       	ori	r24, 0x08	; 8
    135c:	8c 93       	st	X, r24
    135e:	1d c0       	rjmp	.+58     	; 0x139a <EXT_voidEnable+0x1f0>
										  break;
							case FALLING :
										  CLR_BIT(MCUCR , 2);
    1360:	a5 e5       	ldi	r26, 0x55	; 85
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e5 e5       	ldi	r30, 0x55	; 85
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    136e:	a5 e5       	ldi	r26, 0x55	; 85
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e5       	ldi	r30, 0x55	; 85
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	88 60       	ori	r24, 0x08	; 8
    137a:	8c 93       	st	X, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <EXT_voidEnable+0x1f0>
										  break;
							case LOW_LEVEL :
										  CLR_BIT(MCUCR , 2);
    137e:	a5 e5       	ldi	r26, 0x55	; 85
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e5       	ldi	r30, 0x55	; 85
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8b 7f       	andi	r24, 0xFB	; 251
    138a:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    138c:	a5 e5       	ldi	r26, 0x55	; 85
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e5 e5       	ldi	r30, 0x55	; 85
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	87 7f       	andi	r24, 0xF7	; 247
    1398:	8c 93       	st	X, r24
										  break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,7);
    139a:	ab e5       	ldi	r26, 0x5B	; 91
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	eb e5       	ldi	r30, 0x5B	; 91
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	8c 93       	st	X, r24
    13a8:	2e c0       	rjmp	.+92     	; 0x1406 <EXT_voidEnable+0x25c>
						break;
/**************************************************************************************************************************/
		case EXTINT2 :
						/* Disable INT1 */
						CLR_BIT(GICR,5);
    13aa:	ab e5       	ldi	r26, 0x5B	; 91
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	eb e5       	ldi	r30, 0x5B	; 91
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 7d       	andi	r24, 0xDF	; 223
    13b6:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI2_SENSE_MODE ;
    13b8:	87 e0       	ldi	r24, 0x07	; 7
    13ba:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3c 83       	std	Y+4, r19	; 0x04
    13c4:	2b 83       	std	Y+3, r18	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	91 05       	cpc	r25, r1
    13ce:	69 f0       	breq	.+26     	; 0x13ea <EXT_voidEnable+0x240>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	27 30       	cpi	r18, 0x07	; 7
    13d6:	31 05       	cpc	r19, r1
    13d8:	79 f4       	brne	.+30     	; 0x13f8 <EXT_voidEnable+0x24e>
						{
							case RISING :
								           SET_BIT(MCUCSR , 6);
    13da:	a4 e5       	ldi	r26, 0x54	; 84
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e4 e5       	ldi	r30, 0x54	; 84
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	8c 93       	st	X, r24
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <EXT_voidEnable+0x24e>
					   					   break;
							case FALLING :
										   CLR_BIT(MCUCSR , 6);
    13ea:	a4 e5       	ldi	r26, 0x54	; 84
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e4 e5       	ldi	r30, 0x54	; 84
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 7b       	andi	r24, 0xBF	; 191
    13f6:	8c 93       	st	X, r24
					    				   break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,5);
    13f8:	ab e5       	ldi	r26, 0x5B	; 91
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e5       	ldi	r30, 0x5B	; 91
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 62       	ori	r24, 0x20	; 32
    1404:	8c 93       	st	X, r24
						break;
	}

}
    1406:	2a 96       	adiw	r28, 0x0a	; 10
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXT_voidDisable>:
/*                      I/P Parameters: copy_EXTINT_NUM                       */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidDisable( u8 copy_EXTINT_NUM )
	{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <EXT_voidDisable+0x6>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
		switch (copy_EXTINT_NUM)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3b 83       	std	Y+3, r19	; 0x03
    142e:	2a 83       	std	Y+2, r18	; 0x02
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	9b 81       	ldd	r25, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	89 f0       	breq	.+34     	; 0x145c <EXT_voidDisable+0x44>
    143a:	2a 81       	ldd	r18, Y+2	; 0x02
    143c:	3b 81       	ldd	r19, Y+3	; 0x03
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	a1 f0       	breq	.+40     	; 0x146c <EXT_voidDisable+0x54>
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	b9 f4       	brne	.+46     	; 0x147a <EXT_voidDisable+0x62>
			{
				case EXTINT0 : CLR_BIT(GICR,6);  break;
    144c:	ab e5       	ldi	r26, 0x5B	; 91
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7b       	andi	r24, 0xBF	; 191
    1458:	8c 93       	st	X, r24
    145a:	0f c0       	rjmp	.+30     	; 0x147a <EXT_voidDisable+0x62>
				case EXTINT1 : CLR_BIT(GICR,7);  break;
    145c:	ab e5       	ldi	r26, 0x5B	; 91
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	eb e5       	ldi	r30, 0x5B	; 91
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 77       	andi	r24, 0x7F	; 127
    1468:	8c 93       	st	X, r24
    146a:	07 c0       	rjmp	.+14     	; 0x147a <EXT_voidDisable+0x62>
				case EXTINT2 : CLR_BIT(GICR,5);  break;
    146c:	ab e5       	ldi	r26, 0x5B	; 91
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	eb e5       	ldi	r30, 0x5B	; 91
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	8c 93       	st	X, r24
			}
	}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <DIO_voidSetPinDirection>:
/*         I/P Parameters: Port Number , Pin Number & Pin Direction           */
/*                 Returns:it returns no thing                                */
/*      Desc:This Function Set the direction of the pin input or output       */
/******************************************************************************/
extern void DIO_voidSetPinDirection (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinDirection)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <DIO_voidSetPinDirection+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_voidSetPinDirection+0x8>
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
    1498:	4b 83       	std	Y+3, r20	; 0x03
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <DIO_voidSetPinDirection+0x1c>
    14a0:	e4 c0       	rjmp	.+456    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	88 30       	cpi	r24, 0x08	; 8
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <DIO_voidSetPinDirection+0x24>
    14a8:	e0 c0       	rjmp	.+448    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
	else
	{
		/* switching on the ports to enter the required port to set the pin dir. in this port       */
		/* For all the cases the direction of the pin will be checked and that will help with the   */
		/*  clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1 */
		switch (copy_u8PortNum)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <DIO_voidSetPinDirection+0x3a>
    14be:	47 c0       	rjmp	.+142    	; 0x154e <DIO_voidSetPinDirection+0xc8>
    14c0:	2c 81       	ldd	r18, Y+4	; 0x04
    14c2:	3d 81       	ldd	r19, Y+5	; 0x05
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <DIO_voidSetPinDirection+0x4e>
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	71 f0       	breq	.+28     	; 0x14ee <DIO_voidSetPinDirection+0x68>
    14d2:	cb c0       	rjmp	.+406    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
    14d4:	2c 81       	ldd	r18, Y+4	; 0x04
    14d6:	3d 81       	ldd	r19, Y+5	; 0x05
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <DIO_voidSetPinDirection+0x5a>
    14de:	67 c0       	rjmp	.+206    	; 0x15ae <DIO_voidSetPinDirection+0x128>
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <DIO_voidSetPinDirection+0x66>
    14ea:	91 c0       	rjmp	.+290    	; 0x160e <DIO_voidSetPinDirection+0x188>
    14ec:	be c0       	rjmp	.+380    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
		{
			case DIO_PORTA :
							if (copy_u8PinDirection == DIO_INPUT)
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 23       	and	r24, r24
    14f2:	a9 f4       	brne	.+42     	; 0x151e <DIO_voidSetPinDirection+0x98>
							{
								CLR_BIT(DDRA_REG,copy_u8PinNum);
    14f4:	aa e3       	ldi	r26, 0x3A	; 58
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ea e3       	ldi	r30, 0x3A	; 58
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_voidSetPinDirection+0x8c>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_voidSetPinDirection+0x88>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	a6 c0       	rjmp	.+332    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	09 f0       	breq	.+2      	; 0x1526 <DIO_voidSetPinDirection+0xa0>
    1524:	a2 c0       	rjmp	.+324    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRA_REG,copy_u8PinNum);
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_voidSetPinDirection+0xbe>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_voidSetPinDirection+0xba>
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	8e c0       	rjmp	.+284    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTB :
							if (copy_u8PinDirection == DIO_INPUT)
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 23       	and	r24, r24
    1552:	a9 f4       	brne	.+42     	; 0x157e <DIO_voidSetPinDirection+0xf8>
							{
								CLR_BIT(DDRB_REG,copy_u8PinNum);
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_voidSetPinDirection+0xec>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_voidSetPinDirection+0xe8>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	76 c0       	rjmp	.+236    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	09 f0       	breq	.+2      	; 0x1586 <DIO_voidSetPinDirection+0x100>
    1584:	72 c0       	rjmp	.+228    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRB_REG,copy_u8PinNum);
    1586:	a7 e3       	ldi	r26, 0x37	; 55
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e7 e3       	ldi	r30, 0x37	; 55
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_voidSetPinDirection+0x11e>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_voidSetPinDirection+0x11a>
    15a8:	84 2b       	or	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	5e c0       	rjmp	.+188    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTC :
							if (copy_u8PinDirection == DIO_INPUT)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	88 23       	and	r24, r24
    15b2:	a9 f4       	brne	.+42     	; 0x15de <DIO_voidSetPinDirection+0x158>
							{
								CLR_BIT(DDRC_REG,copy_u8PinNum);
    15b4:	a4 e3       	ldi	r26, 0x34	; 52
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_voidSetPinDirection+0x14c>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_voidSetPinDirection+0x148>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	46 c0       	rjmp	.+140    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <DIO_voidSetPinDirection+0x160>
    15e4:	42 c0       	rjmp	.+132    	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRC_REG,copy_u8PinNum);
    15e6:	a4 e3       	ldi	r26, 0x34	; 52
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e4 e3       	ldi	r30, 0x34	; 52
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_voidSetPinDirection+0x17e>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_voidSetPinDirection+0x17a>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	2e c0       	rjmp	.+92     	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTD :
							if (copy_u8PinDirection == DIO_INPUT)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 23       	and	r24, r24
    1612:	a9 f4       	brne	.+42     	; 0x163e <DIO_voidSetPinDirection+0x1b8>
							{
								CLR_BIT(DDRD_REG,copy_u8PinNum);
    1614:	a1 e3       	ldi	r26, 0x31	; 49
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_voidSetPinDirection+0x1ac>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_voidSetPinDirection+0x1a8>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	16 c0       	rjmp	.+44     	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	99 f4       	brne	.+38     	; 0x166a <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRD_REG,copy_u8PinNum);
    1644:	a1 e3       	ldi	r26, 0x31	; 49
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e1 e3       	ldi	r30, 0x31	; 49
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_voidSetPinDirection+0x1dc>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_voidSetPinDirection+0x1d8>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
			default:
							break;
		}

	}
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <DIO_voidSetPinValue>:
/*           I/P Parameters: Port Number , Pin Number & Pin Value             */
/*                    Returns:it returns no thing                             */
/*         Desc:This Function Set the direction of the pin High or Low        */
/******************************************************************************/
extern void DIO_voidSetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinValue)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <DIO_voidSetPinValue+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <DIO_voidSetPinValue+0x8>
    1682:	0f 92       	push	r0
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	4b 83       	std	Y+3, r20	; 0x03

		/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	84 30       	cpi	r24, 0x04	; 4
    1692:	08 f0       	brcs	.+2      	; 0x1696 <DIO_voidSetPinValue+0x1c>
    1694:	e4 c0       	rjmp	.+456    	; 0x185e <DIO_voidSetPinValue+0x1e4>
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	88 30       	cpi	r24, 0x08	; 8
    169a:	08 f0       	brcs	.+2      	; 0x169e <DIO_voidSetPinValue+0x24>
    169c:	e0 c0       	rjmp	.+448    	; 0x185e <DIO_voidSetPinValue+0x1e4>
		else
		{
			/* switching on the ports to enter the required port to set the pin value in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/*  clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1     */
			switch (copy_u8PortNum)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3d 83       	std	Y+5, r19	; 0x05
    16a6:	2c 83       	std	Y+4, r18	; 0x04
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <DIO_voidSetPinValue+0x3a>
    16b2:	47 c0       	rjmp	.+142    	; 0x1742 <DIO_voidSetPinValue+0xc8>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <DIO_voidSetPinValue+0x4e>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <DIO_voidSetPinValue+0x68>
    16c6:	cb c0       	rjmp	.+406    	; 0x185e <DIO_voidSetPinValue+0x1e4>
    16c8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ca:	3d 81       	ldd	r19, Y+5	; 0x05
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <DIO_voidSetPinValue+0x5a>
    16d2:	67 c0       	rjmp	.+206    	; 0x17a2 <DIO_voidSetPinValue+0x128>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <DIO_voidSetPinValue+0x66>
    16de:	91 c0       	rjmp	.+290    	; 0x1802 <DIO_voidSetPinValue+0x188>
    16e0:	be c0       	rjmp	.+380    	; 0x185e <DIO_voidSetPinValue+0x1e4>
			{
				case DIO_PORTA :
								if (copy_u8PinValue == DIO_LOW)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 23       	and	r24, r24
    16e6:	a9 f4       	brne	.+42     	; 0x1712 <DIO_voidSetPinValue+0x98>
								{
									CLR_BIT(PORTA_REG,copy_u8PinNum);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_voidSetPinValue+0x8c>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_voidSetPinValue+0x88>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	a6 c0       	rjmp	.+332    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	09 f0       	breq	.+2      	; 0x171a <DIO_voidSetPinValue+0xa0>
    1718:	a2 c0       	rjmp	.+324    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTA_REG,copy_u8PinNum);
    171a:	ab e3       	ldi	r26, 0x3B	; 59
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e3       	ldi	r30, 0x3B	; 59
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_voidSetPinValue+0xbe>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_voidSetPinValue+0xba>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	8e c0       	rjmp	.+284    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTB :
								if (copy_u8PinValue == DIO_LOW)
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 23       	and	r24, r24
    1746:	a9 f4       	brne	.+42     	; 0x1772 <DIO_voidSetPinValue+0xf8>
								{
									CLR_BIT(PORTB_REG,copy_u8PinNum);
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_voidSetPinValue+0xec>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_voidSetPinValue+0xe8>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	76 c0       	rjmp	.+236    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	09 f0       	breq	.+2      	; 0x177a <DIO_voidSetPinValue+0x100>
    1778:	72 c0       	rjmp	.+228    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTB_REG,copy_u8PinNum);
    177a:	a8 e3       	ldi	r26, 0x38	; 56
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_voidSetPinValue+0x11e>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_voidSetPinValue+0x11a>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	5e c0       	rjmp	.+188    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTC :
								if (copy_u8PinValue == DIO_LOW)
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 23       	and	r24, r24
    17a6:	a9 f4       	brne	.+42     	; 0x17d2 <DIO_voidSetPinValue+0x158>
								{
									CLR_BIT(PORTC_REG,copy_u8PinNum);
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_voidSetPinValue+0x14c>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_voidSetPinValue+0x148>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	46 c0       	rjmp	.+140    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	09 f0       	breq	.+2      	; 0x17da <DIO_voidSetPinValue+0x160>
    17d8:	42 c0       	rjmp	.+132    	; 0x185e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTC_REG,copy_u8PinNum);
    17da:	a5 e3       	ldi	r26, 0x35	; 53
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e3       	ldi	r30, 0x35	; 53
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_voidSetPinValue+0x17e>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_voidSetPinValue+0x17a>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	2e c0       	rjmp	.+92     	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTD :
								if (copy_u8PinValue == DIO_LOW)
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	88 23       	and	r24, r24
    1806:	a9 f4       	brne	.+42     	; 0x1832 <DIO_voidSetPinValue+0x1b8>
								{
									CLR_BIT(PORTD_REG,copy_u8PinNum);
    1808:	a2 e3       	ldi	r26, 0x32	; 50
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e2 e3       	ldi	r30, 0x32	; 50
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_voidSetPinValue+0x1ac>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_voidSetPinValue+0x1a8>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	16 c0       	rjmp	.+44     	; 0x185e <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	99 f4       	brne	.+38     	; 0x185e <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTD_REG,copy_u8PinNum);
    1838:	a2 e3       	ldi	r26, 0x32	; 50
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_voidSetPinValue+0x1dc>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_voidSetPinValue+0x1d8>
    185a:	84 2b       	or	r24, r20
    185c:	8c 93       	st	X, r24
								break;
				default:
								break;
			}
		}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <DIO_u8GetPinValue>:
/*                 I/P Parameters: Port Number , Pin Number                   */
/*                     Returns:it returns U8 Pin Value                        */
/*                   Desc:This Function Get The Pin Value                     */
/******************************************************************************/
extern u8 DIO_u8GetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <DIO_u8GetPinValue+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <DIO_u8GetPinValue+0x8>
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	84 30       	cpi	r24, 0x04	; 4
    1884:	18 f4       	brcc	.+6      	; 0x188c <DIO_u8GetPinValue+0x1e>
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	18 f0       	brcs	.+6      	; 0x1892 <DIO_u8GetPinValue+0x24>
	{
			/* The Function will terminate if the input is not valid */
			return 2;
    188c:	22 e0       	ldi	r18, 0x02	; 2
    188e:	2d 83       	std	Y+5, r18	; 0x05
    1890:	6e c0       	rjmp	.+220    	; 0x196e <DIO_u8GetPinValue+0x100>
	else
	{

		/* switching on the ports to enter the required port to get the pin value from this port      */
		/* For all the cases the value of the pin will be checked and return it to the callee fuction */
		switch (copy_u8PortNum)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	48 2f       	mov	r20, r24
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	5c 83       	std	Y+4, r21	; 0x04
    189a:	4b 83       	std	Y+3, r20	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	49 f1       	breq	.+82     	; 0x18f8 <DIO_u8GetPinValue+0x8a>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	34 f4       	brge	.+12     	; 0x18bc <DIO_u8GetPinValue+0x4e>
    18b0:	4b 81       	ldd	r20, Y+3	; 0x03
    18b2:	5c 81       	ldd	r21, Y+4	; 0x04
    18b4:	41 15       	cp	r20, r1
    18b6:	51 05       	cpc	r21, r1
    18b8:	61 f0       	breq	.+24     	; 0x18d2 <DIO_u8GetPinValue+0x64>
    18ba:	57 c0       	rjmp	.+174    	; 0x196a <DIO_u8GetPinValue+0xfc>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	91 05       	cpc	r25, r1
    18c4:	61 f1       	breq	.+88     	; 0x191e <DIO_u8GetPinValue+0xb0>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	23 30       	cpi	r18, 0x03	; 3
    18cc:	31 05       	cpc	r19, r1
    18ce:	d1 f1       	breq	.+116    	; 0x1944 <DIO_u8GetPinValue+0xd6>
    18d0:	4c c0       	rjmp	.+152    	; 0x196a <DIO_u8GetPinValue+0xfc>
			{
				case DIO_PORTA:
								return GET_BIT(PINA_REG,copy_u8PinNum);
    18d2:	e9 e3       	ldi	r30, 0x39	; 57
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_u8GetPinValue+0x7c>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_u8GetPinValue+0x78>
    18ee:	ca 01       	movw	r24, r20
    18f0:	58 2f       	mov	r21, r24
    18f2:	51 70       	andi	r21, 0x01	; 1
    18f4:	5d 83       	std	Y+5, r21	; 0x05
    18f6:	3b c0       	rjmp	.+118    	; 0x196e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTB:
								return GET_BIT(PINB_REG,copy_u8PinNum);
    18f8:	e6 e3       	ldi	r30, 0x36	; 54
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8GetPinValue+0xa2>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_u8GetPinValue+0x9e>
    1914:	ca 01       	movw	r24, r20
    1916:	58 2f       	mov	r21, r24
    1918:	51 70       	andi	r21, 0x01	; 1
    191a:	5d 83       	std	Y+5, r21	; 0x05
    191c:	28 c0       	rjmp	.+80     	; 0x196e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTC:
								return GET_BIT(PINC_REG,copy_u8PinNum);
    191e:	e3 e3       	ldi	r30, 0x33	; 51
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a9 01       	movw	r20, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_u8GetPinValue+0xc8>
    1932:	55 95       	asr	r21
    1934:	47 95       	ror	r20
    1936:	8a 95       	dec	r24
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_u8GetPinValue+0xc4>
    193a:	ca 01       	movw	r24, r20
    193c:	58 2f       	mov	r21, r24
    193e:	51 70       	andi	r21, 0x01	; 1
    1940:	5d 83       	std	Y+5, r21	; 0x05
    1942:	15 c0       	rjmp	.+42     	; 0x196e <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTD:
								return GET_BIT(PIND_REG,copy_u8PinNum);
    1944:	e0 e3       	ldi	r30, 0x30	; 48
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 2f       	mov	r24, r24
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a9 01       	movw	r20, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_u8GetPinValue+0xee>
    1958:	55 95       	asr	r21
    195a:	47 95       	ror	r20
    195c:	8a 95       	dec	r24
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_u8GetPinValue+0xea>
    1960:	ca 01       	movw	r24, r20
    1962:	58 2f       	mov	r21, r24
    1964:	51 70       	andi	r21, 0x01	; 1
    1966:	5d 83       	std	Y+5, r21	; 0x05
    1968:	02 c0       	rjmp	.+4      	; 0x196e <DIO_u8GetPinValue+0x100>
								break;

				default:
								return 2;
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	8d 83       	std	Y+5, r24	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
								break;
			}
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <DIO_voidSetPortDirection>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      	   Desc:This Function Set the direction of the port  		      */
/******************************************************************************/
extern void DIO_voidSetPortDirection (u8 copy_u8PortNum , u8 copy_u8PortDirection )
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <DIO_voidSetPortDirection+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <DIO_voidSetPortDirection+0x8>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) )
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	84 30       	cpi	r24, 0x04	; 4
    1994:	90 f5       	brcc	.+100    	; 0x19fa <DIO_voidSetPortDirection+0x7a>
		{
			/* switching on the ports to enter the required port to set the pins dir. in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/* clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1  */
			/* This will happen using a loop to check on each pin individually						    */
			switch(copy_u8PortNum)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	3c 83       	std	Y+4, r19	; 0x04
    199e:	2b 83       	std	Y+3, r18	; 0x03
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	91 05       	cpc	r25, r1
    19a8:	d1 f0       	breq	.+52     	; 0x19de <DIO_voidSetPortDirection+0x5e>
    19aa:	2b 81       	ldd	r18, Y+3	; 0x03
    19ac:	3c 81       	ldd	r19, Y+4	; 0x04
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	2c f4       	brge	.+10     	; 0x19be <DIO_voidSetPortDirection+0x3e>
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <DIO_voidSetPortDirection+0x54>
    19bc:	1e c0       	rjmp	.+60     	; 0x19fa <DIO_voidSetPortDirection+0x7a>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <DIO_voidSetPortDirection+0x68>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	91 05       	cpc	r25, r1
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <DIO_voidSetPortDirection+0x72>
    19d2:	13 c0       	rjmp	.+38     	; 0x19fa <DIO_voidSetPortDirection+0x7a>
			{
				case DIO_PORTA:
								DDRA_REG = copy_u8PortDirection;
    19d4:	ea e3       	ldi	r30, 0x3A	; 58
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTB:
								DDRB_REG = copy_u8PortDirection;
    19de:	e7 e3       	ldi	r30, 0x37	; 55
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTC:
								DDRC_REG = copy_u8PortDirection;
    19e8:	e4 e3       	ldi	r30, 0x34	; 52
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTD:
								DDRD_REG = copy_u8PortDirection;
    19f2:	e1 e3       	ldi	r30, 0x31	; 49
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24

						default:
								break;
					}
		}
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <DIO_voidSetPortValue>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      		  Desc:This Function Set the value of the port   		      */
/******************************************************************************/
extern void DIO_voidSetPortValue (u8 copy_u8PortNum , u8 copy_u8PortValue )
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <DIO_voidSetPortValue+0x6>
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <DIO_voidSetPortValue+0x8>
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	6a 83       	std	Y+2, r22	; 0x02

	/* switching on the ports to enter the required port to set the pins val. in this port      */
	/* For all the cases the value of the pin will be checked and that will help with the       */
	/* clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1      */
	/* This will happen using a loop to check on each pin individually						    */
	switch(copy_u8PortNum)
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3c 83       	std	Y+4, r19	; 0x04
    1a20:	2b 83       	std	Y+3, r18	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	d1 f0       	breq	.+52     	; 0x1a60 <DIO_voidSetPortValue+0x58>
    1a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <DIO_voidSetPortValue+0x38>
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <DIO_voidSetPortValue+0x4e>
    1a3e:	1e c0       	rjmp	.+60     	; 0x1a7c <DIO_voidSetPortValue+0x74>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <DIO_voidSetPortValue+0x62>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	91 05       	cpc	r25, r1
    1a52:	81 f0       	breq	.+32     	; 0x1a74 <DIO_voidSetPortValue+0x6c>
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA:
							PORTA_REG= copy_u8PortValue;
    1a56:	eb e3       	ldi	r30, 0x3B	; 59
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	80 83       	st	Z, r24
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTB:
							PORTB_REG= copy_u8PortValue;
    1a60:	e8 e3       	ldi	r30, 0x38	; 56
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	80 83       	st	Z, r24
    1a68:	09 c0       	rjmp	.+18     	; 0x1a7c <DIO_voidSetPortValue+0x74>
											break;
			case DIO_PORTC:
							PORTC_REG= copy_u8PortValue;
    1a6a:	e5 e3       	ldi	r30, 0x35	; 53
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTD:
							PORTD_REG= copy_u8PortValue;
    1a74:	e2 e3       	ldi	r30, 0x32	; 50
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
							break;

				default:
				break;
		}
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <ADC_voidInitTEMP>:
/*                          I/P Parameters: no thing                          */
/*                        Returns:it returns no thing                         */
/*             Desc:This Function to Initialize the ADC peripheral.           */
/******************************************************************************/
extern void ADC_voidInitTEMP()
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <ADC_voidInitTEMP+0x6>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP;
    1a94:	88 e6       	ldi	r24, 0x68	; 104
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1a9c:	a7 e2       	ldi	r26, 0x27	; 39
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e2       	ldi	r30, 0x27	; 39
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	90 81       	ld	r25, Z
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	80 81       	ld	r24, Z
    1aac:	89 2b       	or	r24, r25
    1aae:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1ab0:	a7 e2       	ldi	r26, 0x27	; 39
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e7 e2       	ldi	r30, 0x27	; 39
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	90 81       	ld	r25, Z
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	81 81       	ldd	r24, Z+1	; 0x01
    1ac0:	89 2b       	or	r24, r25
    1ac2:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1ac4:	a7 e2       	ldi	r26, 0x27	; 39
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e7 e2       	ldi	r30, 0x27	; 39
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	90 81       	ld	r25, Z
    1ace:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	89 2b       	or	r24, r25
    1ad6:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1ad8:	a6 e2       	ldi	r26, 0x26	; 38
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e6 e2       	ldi	r30, 0x26	; 38
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1ae6:	a6 e2       	ldi	r26, 0x26	; 38
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e6 e2       	ldi	r30, 0x26	; 38
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	90 81       	ld	r25, Z
    1af0:	e9 81       	ldd	r30, Y+1	; 0x01
    1af2:	fa 81       	ldd	r31, Y+2	; 0x02
    1af4:	83 81       	ldd	r24, Z+3	; 0x03
    1af6:	89 2b       	or	r24, r25
    1af8:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1afa:	a6 e2       	ldi	r26, 0x26	; 38
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e6 e2       	ldi	r30, 0x26	; 38
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	90 81       	ld	r25, Z
    1b04:	e9 81       	ldd	r30, Y+1	; 0x01
    1b06:	fa 81       	ldd	r31, Y+2	; 0x02
    1b08:	84 81       	ldd	r24, Z+4	; 0x04
    1b0a:	89 2b       	or	r24, r25
    1b0c:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1b0e:	a6 e2       	ldi	r26, 0x26	; 38
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e6 e2       	ldi	r30, 0x26	; 38
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	90 81       	ld	r25, Z
    1b18:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1c:	83 81       	ldd	r24, Z+3	; 0x03
    1b1e:	89 2b       	or	r24, r25
    1b20:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	83 81       	ldd	r24, Z+3	; 0x03
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	39 f4       	brne	.+14     	; 0x1b3a <ADC_voidInitTEMP+0xb0>
		{
			SREG |= (1<<7);
    1b2c:	af e5       	ldi	r26, 0x5F	; 95
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ef e5       	ldi	r30, 0x5F	; 95
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 68       	ori	r24, 0x80	; 128
    1b38:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <ADC_voidInitTEMP2>:


extern void ADC_voidInitTEMP2()
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <ADC_voidInitTEMP2+0x6>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP2;
    1b4e:	8d e6       	ldi	r24, 0x6D	; 109
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1b56:	a7 e2       	ldi	r26, 0x27	; 39
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e7 e2       	ldi	r30, 0x27	; 39
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	90 81       	ld	r25, Z
    1b60:	e9 81       	ldd	r30, Y+1	; 0x01
    1b62:	fa 81       	ldd	r31, Y+2	; 0x02
    1b64:	80 81       	ld	r24, Z
    1b66:	89 2b       	or	r24, r25
    1b68:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1b6a:	a7 e2       	ldi	r26, 0x27	; 39
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e7 e2       	ldi	r30, 0x27	; 39
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	90 81       	ld	r25, Z
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	89 2b       	or	r24, r25
    1b7c:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1b7e:	a7 e2       	ldi	r26, 0x27	; 39
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e7 e2       	ldi	r30, 0x27	; 39
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	90 81       	ld	r25, Z
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	89 2b       	or	r24, r25
    1b90:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 68       	ori	r24, 0x80	; 128
    1b9e:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1ba0:	a6 e2       	ldi	r26, 0x26	; 38
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e6 e2       	ldi	r30, 0x26	; 38
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	90 81       	ld	r25, Z
    1baa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bac:	fa 81       	ldd	r31, Y+2	; 0x02
    1bae:	83 81       	ldd	r24, Z+3	; 0x03
    1bb0:	89 2b       	or	r24, r25
    1bb2:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1bb4:	a6 e2       	ldi	r26, 0x26	; 38
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e6 e2       	ldi	r30, 0x26	; 38
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	90 81       	ld	r25, Z
    1bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc2:	84 81       	ldd	r24, Z+4	; 0x04
    1bc4:	89 2b       	or	r24, r25
    1bc6:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1bc8:	a6 e2       	ldi	r26, 0x26	; 38
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e6 e2       	ldi	r30, 0x26	; 38
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	90 81       	ld	r25, Z
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	83 81       	ldd	r24, Z+3	; 0x03
    1bd8:	89 2b       	or	r24, r25
    1bda:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	83 81       	ldd	r24, Z+3	; 0x03
    1be2:	88 30       	cpi	r24, 0x08	; 8
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <ADC_voidInitTEMP2+0xb0>
		{
			SREG |= (1<<7);
    1be6:	af e5       	ldi	r26, 0x5F	; 95
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ef e5       	ldi	r30, 0x5F	; 95
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <ADC_voidInitLDR>:
extern void ADC_voidInitLDR()
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <ADC_voidInitLDR+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationLDR;
    1c08:	82 e7       	ldi	r24, 0x72	; 114
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1c10:	a7 e2       	ldi	r26, 0x27	; 39
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e7 e2       	ldi	r30, 0x27	; 39
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	90 81       	ld	r25, Z
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	80 81       	ld	r24, Z
    1c20:	89 2b       	or	r24, r25
    1c22:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1c24:	a7 e2       	ldi	r26, 0x27	; 39
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e2       	ldi	r30, 0x27	; 39
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	90 81       	ld	r25, Z
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	81 81       	ldd	r24, Z+1	; 0x01
    1c34:	89 2b       	or	r24, r25
    1c36:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1c38:	a7 e2       	ldi	r26, 0x27	; 39
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e7 e2       	ldi	r30, 0x27	; 39
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	90 81       	ld	r25, Z
    1c42:	e9 81       	ldd	r30, Y+1	; 0x01
    1c44:	fa 81       	ldd	r31, Y+2	; 0x02
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	89 2b       	or	r24, r25
    1c4a:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1c4c:	a6 e2       	ldi	r26, 0x26	; 38
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e6 e2       	ldi	r30, 0x26	; 38
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	80 68       	ori	r24, 0x80	; 128
    1c58:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1c5a:	a6 e2       	ldi	r26, 0x26	; 38
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e6 e2       	ldi	r30, 0x26	; 38
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	90 81       	ld	r25, Z
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	83 81       	ldd	r24, Z+3	; 0x03
    1c6a:	89 2b       	or	r24, r25
    1c6c:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1c6e:	a6 e2       	ldi	r26, 0x26	; 38
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e6 e2       	ldi	r30, 0x26	; 38
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	90 81       	ld	r25, Z
    1c78:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7c:	84 81       	ldd	r24, Z+4	; 0x04
    1c7e:	89 2b       	or	r24, r25
    1c80:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1c82:	a6 e2       	ldi	r26, 0x26	; 38
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e6 e2       	ldi	r30, 0x26	; 38
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	90 81       	ld	r25, Z
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	83 81       	ldd	r24, Z+3	; 0x03
    1c92:	89 2b       	or	r24, r25
    1c94:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	83 81       	ldd	r24, Z+3	; 0x03
    1c9c:	88 30       	cpi	r24, 0x08	; 8
    1c9e:	39 f4       	brne	.+14     	; 0x1cae <ADC_voidInitLDR+0xb0>
		{
			SREG |= (1<<7);
    1ca0:	af e5       	ldi	r26, 0x5F	; 95
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	ef e5       	ldi	r30, 0x5F	; 95
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 68       	ori	r24, 0x80	; 128
    1cac:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <ADC_u16GetRawData>:
/*                    I/P Parameters: ADC Channel Number                      */
/*                           Returns:it returns u16                           */
/*             		 Desc:This Function to Get a Raw of Data.                 */
/******************************************************************************/
extern u16 ADC_u16GetRawData(ADCChannels ADCCHIndex)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <ADC_u16GetRawData+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <ADC_u16GetRawData+0x8>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
	/*Local variable to save the Raw data of the ADC conversion result*/
		u16 LOC_u16ADCResult=(u16)0x0000;
    1cc8:	1c 82       	std	Y+4, r1	; 0x04
    1cca:	1b 82       	std	Y+3, r1	; 0x03

		/*pointer to the Configuration structure*/
		ADCconfig * ptr = &ConfiurationTEMP;
    1ccc:	88 e6       	ldi	r24, 0x68	; 104
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
		 *
		 * Selecting the ADC Channel
		 *
		 */

		CLR_BIT(ADCSRA,7);
    1cd4:	a6 e2       	ldi	r26, 0x26	; 38
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e6 e2       	ldi	r30, 0x26	; 38
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8f 77       	andi	r24, 0x7F	; 127
    1ce0:	8c 93       	st	X, r24


		/*first zeros the ADC channel bits*/
		ADMUX &=0b11100000;
    1ce2:	a7 e2       	ldi	r26, 0x27	; 39
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e2       	ldi	r30, 0x27	; 39
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	80 7e       	andi	r24, 0xE0	; 224
    1cee:	8c 93       	st	X, r24
		/*second select the channel according*/
		ADMUX |= (ADCCHIndex);
    1cf0:	a7 e2       	ldi	r26, 0x27	; 39
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e7 e2       	ldi	r30, 0x27	; 39
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	90 81       	ld	r25, Z
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	89 2b       	or	r24, r25
    1cfe:	8c 93       	st	X, r24


		SET_BIT(ADCSRA,7);
    1d00:	a6 e2       	ldi	r26, 0x26	; 38
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e2       	ldi	r30, 0x26	; 38
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 68       	ori	r24, 0x80	; 128
    1d0c:	8c 93       	st	X, r24

		/*set ADC to start Conversion*/
		ADC_voidStartConversion();
    1d0e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <ADC_voidStartConversion>
		/*Polling on the ADC Interrupt Flag to know if conversion complete or not yet*/
		while ( GET_BIT(ADCSRA,4)==0);
    1d12:	e6 e2       	ldi	r30, 0x26	; 38
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	82 95       	swap	r24
    1d1a:	8f 70       	andi	r24, 0x0F	; 15
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	81 70       	andi	r24, 0x01	; 1
    1d22:	90 70       	andi	r25, 0x00	; 0
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	a9 f3       	breq	.-22     	; 0x1d12 <ADC_u16GetRawData+0x5a>

		/*Clear Interrupt flag By writing Logical one to it */
		ADCSRA |= (1<<4);
    1d28:	a6 e2       	ldi	r26, 0x26	; 38
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e6 e2       	ldi	r30, 0x26	; 38
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	80 61       	ori	r24, 0x10	; 16
    1d34:	8c 93       	st	X, r24

		if(ptr->AdjResFormat==LeftAdjustment)
    1d36:	e9 81       	ldd	r30, Y+1	; 0x01
    1d38:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3a:	81 81       	ldd	r24, Z+1	; 0x01
    1d3c:	80 32       	cpi	r24, 0x20	; 32
    1d3e:	b1 f4       	brne	.+44     	; 0x1d6c <ADC_u16GetRawData+0xb4>
			/*
			 * According to the data sheet P:215 you have to read ADCL first before ADCH
			 */


			LOC_u16ADCResult =(u16) ADCL;
    1d40:	e4 e2       	ldi	r30, 0x24	; 36
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
			LOC_u16ADCResult = (u16) ( (ADCH << 8)  |  LOC_u16ADCResult );
    1d4e:	e5 e2       	ldi	r30, 0x25	; 37
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	98 2f       	mov	r25, r24
    1d5a:	88 27       	eor	r24, r24
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	82 2b       	or	r24, r18
    1d64:	93 2b       	or	r25, r19
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	1a c0       	rjmp	.+52     	; 0x1da0 <ADC_u16GetRawData+0xe8>
		}
			else if(ptr->AdjResFormat==RightAdjutment)
    1d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d70:	81 81       	ldd	r24, Z+1	; 0x01
    1d72:	88 23       	and	r24, r24
    1d74:	a9 f4       	brne	.+42     	; 0x1da0 <ADC_u16GetRawData+0xe8>
			{
				/*
				 * According to the data sheet P:215 you have to read ADCL first before ADCH
				 */

				LOC_u16ADCResult = (u16) ADCL;
    1d76:	e4 e2       	ldi	r30, 0x24	; 36
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
				LOC_u16ADCResult = (u16) ( (ADCH << 8) | (LOC_u16ADCResult) );
    1d84:	e5 e2       	ldi	r30, 0x25	; 37
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 2f       	mov	r25, r24
    1d90:	88 27       	eor	r24, r24
    1d92:	9c 01       	movw	r18, r24
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	82 2b       	or	r24, r18
    1d9a:	93 2b       	or	r25, r19
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
			else
			{

			}

			return LOC_u16ADCResult;
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04

}
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <ADC_u16GetInterruptConvRes>:
/*                          I/P Parameters: no thing                          */
/*                     	     Returns:it returns u16                           */
/*             Desc:This Function to get the interrupt conversion res.        */
/******************************************************************************/
extern u16 ADC_u16GetInterruptConvRes(void)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ConversionResult;
    1dbc:	80 91 90 00 	lds	r24, 0x0090
    1dc0:	90 91 91 00 	lds	r25, 0x0091
}
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <ADC_voidStartConversion>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
static void ADC_voidStartConversion(void)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
	ADCSRA  |=  (1<<6);
    1dd2:	a6 e2       	ldi	r26, 0x26	; 38
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e6 e2       	ldi	r30, 0x26	; 38
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 64       	ori	r24, 0x40	; 64
    1dde:	8c 93       	st	X, r24
}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <__vector_16>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
void __vector_16 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_16(void)
{
    1de6:	1f 92       	push	r1
    1de8:	0f 92       	push	r0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	0f 92       	push	r0
    1dee:	11 24       	eor	r1, r1
    1df0:	2f 93       	push	r18
    1df2:	3f 93       	push	r19
    1df4:	8f 93       	push	r24
    1df6:	9f 93       	push	r25
    1df8:	ef 93       	push	r30
    1dfa:	ff 93       	push	r31
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <__vector_16+0x1c>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	ADCconfig * ptr = &ConfiurationTEMP;
    1e06:	88 e6       	ldi	r24, 0x68	; 104
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01


	if(ptr->AdjResFormat==LeftAdjustment)
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	81 81       	ldd	r24, Z+1	; 0x01
    1e14:	80 32       	cpi	r24, 0x20	; 32
    1e16:	61 f5       	brne	.+88     	; 0x1e70 <__vector_16+0x8a>
		{
		ADC_u16ConversionResult =(u16) ADCH;
    1e18:	e5 e2       	ldi	r30, 0x25	; 37
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	90 93 91 00 	sts	0x0091, r25
    1e26:	80 93 90 00 	sts	0x0090, r24
		ADC_u16ConversionResult = (u16) ((ADC_u16ConversionResult << 8)  |  (ADCL));
    1e2a:	80 91 90 00 	lds	r24, 0x0090
    1e2e:	90 91 91 00 	lds	r25, 0x0091
    1e32:	38 2f       	mov	r19, r24
    1e34:	22 27       	eor	r18, r18
    1e36:	e4 e2       	ldi	r30, 0x24	; 36
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	82 2b       	or	r24, r18
    1e42:	93 2b       	or	r25, r19
    1e44:	90 93 91 00 	sts	0x0091, r25
    1e48:	80 93 90 00 	sts	0x0090, r24
		ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult >> 6);
    1e4c:	80 91 90 00 	lds	r24, 0x0090
    1e50:	90 91 91 00 	lds	r25, 0x0091
    1e54:	00 24       	eor	r0, r0
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	00 1c       	adc	r0, r0
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	00 1c       	adc	r0, r0
    1e62:	89 2f       	mov	r24, r25
    1e64:	90 2d       	mov	r25, r0
    1e66:	90 93 91 00 	sts	0x0091, r25
    1e6a:	80 93 90 00 	sts	0x0090, r24
    1e6e:	1f c0       	rjmp	.+62     	; 0x1eae <__vector_16+0xc8>
		}
		else if(ptr->AdjResFormat==RightAdjutment)
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	88 23       	and	r24, r24
    1e78:	d1 f4       	brne	.+52     	; 0x1eae <__vector_16+0xc8>
		{
			ADC_u16ConversionResult = (u16) ADCH;
    1e7a:	e5 e2       	ldi	r30, 0x25	; 37
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	90 93 91 00 	sts	0x0091, r25
    1e88:	80 93 90 00 	sts	0x0090, r24
			ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult << 8) | (ADCL);
    1e8c:	80 91 90 00 	lds	r24, 0x0090
    1e90:	90 91 91 00 	lds	r25, 0x0091
    1e94:	38 2f       	mov	r19, r24
    1e96:	22 27       	eor	r18, r18
    1e98:	e4 e2       	ldi	r30, 0x24	; 36
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	82 2b       	or	r24, r18
    1ea4:	93 2b       	or	r25, r19
    1ea6:	90 93 91 00 	sts	0x0091, r25
    1eaa:	80 93 90 00 	sts	0x0090, r24
		}

}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	ff 91       	pop	r31
    1eb8:	ef 91       	pop	r30
    1eba:	9f 91       	pop	r25
    1ebc:	8f 91       	pop	r24
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <SevenSegmant_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmant_voidIntialization (u8 copy_u8SegmantType)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	0f 92       	push	r0
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	6f ef       	ldi	r22, 0xFF	; 255
    1edc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	21 f5       	brne	.+72     	; 0x1f2e <SevenSegmant_voidIntialization+0x62>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	63 e0       	ldi	r22, 0x03	; 3
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	65 e0       	ldi	r22, 0x05	; 5
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	66 e0       	ldi	r22, 0x06	; 6
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	67 e0       	ldi	r22, 0x07	; 7
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    1f2c:	26 c0       	rjmp	.+76     	; 0x1f7a <SevenSegmant_voidIntialization+0xae>
	}

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	19 f5       	brne	.+70     	; 0x1f7a <SevenSegmant_voidIntialization+0xae>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	62 e0       	ldi	r22, 0x02	; 2
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	63 e0       	ldi	r22, 0x03	; 3
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	64 e0       	ldi	r22, 0x04	; 4
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	65 e0       	ldi	r22, 0x05	; 5
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	66 e0       	ldi	r22, 0x06	; 6
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	67 e0       	ldi	r22, 0x07	; 7
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	}


}
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <SevenSegmant_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmant_voidDisplayNum (u8 copy_u8SegmantType,u32 copy_u8Number)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	2d 97       	sbiw	r28, 0x0d	; 13
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	4a 83       	std	Y+2, r20	; 0x02
    1f9a:	5b 83       	std	Y+3, r21	; 0x03
    1f9c:	6c 83       	std	Y+4, r22	; 0x04
    1f9e:	7d 83       	std	Y+5, r23	; 0x05
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <SevenSegmant_voidDisplayNum+0x26>
    1fa6:	01 c2       	rjmp	.+1026   	; 0x23aa <SevenSegmant_voidDisplayNum+0x428>
	{
		switch (copy_u8Number)
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	ac 81       	ldd	r26, Y+4	; 0x04
    1fae:	bd 81       	ldd	r27, Y+5	; 0x05
    1fb0:	8e 83       	std	Y+6, r24	; 0x06
    1fb2:	9f 83       	std	Y+7, r25	; 0x07
    1fb4:	a8 87       	std	Y+8, r26	; 0x08
    1fb6:	b9 87       	std	Y+9, r27	; 0x09
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	a8 85       	ldd	r26, Y+8	; 0x08
    1fbe:	b9 85       	ldd	r27, Y+9	; 0x09
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	a1 05       	cpc	r26, r1
    1fc6:	b1 05       	cpc	r27, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <SevenSegmant_voidDisplayNum+0x4a>
    1fca:	03 c1       	rjmp	.+518    	; 0x21d2 <SevenSegmant_voidDisplayNum+0x250>
    1fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fce:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd0:	a8 85       	ldd	r26, Y+8	; 0x08
    1fd2:	b9 85       	ldd	r27, Y+9	; 0x09
    1fd4:	85 30       	cpi	r24, 0x05	; 5
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	a1 05       	cpc	r26, r1
    1fda:	b1 05       	cpc	r27, r1
    1fdc:	48 f5       	brcc	.+82     	; 0x2030 <SevenSegmant_voidDisplayNum+0xae>
    1fde:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe2:	a8 85       	ldd	r26, Y+8	; 0x08
    1fe4:	b9 85       	ldd	r27, Y+9	; 0x09
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	91 05       	cpc	r25, r1
    1fea:	a1 05       	cpc	r26, r1
    1fec:	b1 05       	cpc	r27, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <SevenSegmant_voidDisplayNum+0x70>
    1ff0:	80 c0       	rjmp	.+256    	; 0x20f2 <SevenSegmant_voidDisplayNum+0x170>
    1ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ff8:	b9 85       	ldd	r27, Y+9	; 0x09
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	a1 05       	cpc	r26, r1
    2000:	b1 05       	cpc	r27, r1
    2002:	08 f4       	brcc	.+2      	; 0x2006 <SevenSegmant_voidDisplayNum+0x84>
    2004:	52 c0       	rjmp	.+164    	; 0x20aa <SevenSegmant_voidDisplayNum+0x128>
    2006:	8e 81       	ldd	r24, Y+6	; 0x06
    2008:	9f 81       	ldd	r25, Y+7	; 0x07
    200a:	a8 85       	ldd	r26, Y+8	; 0x08
    200c:	b9 85       	ldd	r27, Y+9	; 0x09
    200e:	82 30       	cpi	r24, 0x02	; 2
    2010:	91 05       	cpc	r25, r1
    2012:	a1 05       	cpc	r26, r1
    2014:	b1 05       	cpc	r27, r1
    2016:	09 f4       	brne	.+2      	; 0x201a <SevenSegmant_voidDisplayNum+0x98>
    2018:	94 c0       	rjmp	.+296    	; 0x2142 <SevenSegmant_voidDisplayNum+0x1c0>
    201a:	8e 81       	ldd	r24, Y+6	; 0x06
    201c:	9f 81       	ldd	r25, Y+7	; 0x07
    201e:	a8 85       	ldd	r26, Y+8	; 0x08
    2020:	b9 85       	ldd	r27, Y+9	; 0x09
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	a1 05       	cpc	r26, r1
    2028:	b1 05       	cpc	r27, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <SevenSegmant_voidDisplayNum+0xac>
    202c:	ae c0       	rjmp	.+348    	; 0x218a <SevenSegmant_voidDisplayNum+0x208>
    202e:	a9 c3       	rjmp	.+1874   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
    2030:	8e 81       	ldd	r24, Y+6	; 0x06
    2032:	9f 81       	ldd	r25, Y+7	; 0x07
    2034:	a8 85       	ldd	r26, Y+8	; 0x08
    2036:	b9 85       	ldd	r27, Y+9	; 0x09
    2038:	87 30       	cpi	r24, 0x07	; 7
    203a:	91 05       	cpc	r25, r1
    203c:	a1 05       	cpc	r26, r1
    203e:	b1 05       	cpc	r27, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <SevenSegmant_voidDisplayNum+0xc2>
    2042:	3b c1       	rjmp	.+630    	; 0x22ba <SevenSegmant_voidDisplayNum+0x338>
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	a8 85       	ldd	r26, Y+8	; 0x08
    204a:	b9 85       	ldd	r27, Y+9	; 0x09
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	91 05       	cpc	r25, r1
    2050:	a1 05       	cpc	r26, r1
    2052:	b1 05       	cpc	r27, r1
    2054:	a8 f4       	brcc	.+42     	; 0x2080 <SevenSegmant_voidDisplayNum+0xfe>
    2056:	8e 81       	ldd	r24, Y+6	; 0x06
    2058:	9f 81       	ldd	r25, Y+7	; 0x07
    205a:	a8 85       	ldd	r26, Y+8	; 0x08
    205c:	b9 85       	ldd	r27, Y+9	; 0x09
    205e:	85 30       	cpi	r24, 0x05	; 5
    2060:	91 05       	cpc	r25, r1
    2062:	a1 05       	cpc	r26, r1
    2064:	b1 05       	cpc	r27, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <SevenSegmant_voidDisplayNum+0xe8>
    2068:	d8 c0       	rjmp	.+432    	; 0x221a <SevenSegmant_voidDisplayNum+0x298>
    206a:	8e 81       	ldd	r24, Y+6	; 0x06
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	a8 85       	ldd	r26, Y+8	; 0x08
    2070:	b9 85       	ldd	r27, Y+9	; 0x09
    2072:	86 30       	cpi	r24, 0x06	; 6
    2074:	91 05       	cpc	r25, r1
    2076:	a1 05       	cpc	r26, r1
    2078:	b1 05       	cpc	r27, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <SevenSegmant_voidDisplayNum+0xfc>
    207c:	f6 c0       	rjmp	.+492    	; 0x226a <SevenSegmant_voidDisplayNum+0x2e8>
    207e:	81 c3       	rjmp	.+1794   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
    2080:	8e 81       	ldd	r24, Y+6	; 0x06
    2082:	9f 81       	ldd	r25, Y+7	; 0x07
    2084:	a8 85       	ldd	r26, Y+8	; 0x08
    2086:	b9 85       	ldd	r27, Y+9	; 0x09
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	91 05       	cpc	r25, r1
    208c:	a1 05       	cpc	r26, r1
    208e:	b1 05       	cpc	r27, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <SevenSegmant_voidDisplayNum+0x112>
    2092:	3b c1       	rjmp	.+630    	; 0x230a <SevenSegmant_voidDisplayNum+0x388>
    2094:	8e 81       	ldd	r24, Y+6	; 0x06
    2096:	9f 81       	ldd	r25, Y+7	; 0x07
    2098:	a8 85       	ldd	r26, Y+8	; 0x08
    209a:	b9 85       	ldd	r27, Y+9	; 0x09
    209c:	89 30       	cpi	r24, 0x09	; 9
    209e:	91 05       	cpc	r25, r1
    20a0:	a1 05       	cpc	r26, r1
    20a2:	b1 05       	cpc	r27, r1
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <SevenSegmant_voidDisplayNum+0x126>
    20a6:	59 c1       	rjmp	.+690    	; 0x235a <SevenSegmant_voidDisplayNum+0x3d8>
    20a8:	6c c3       	rjmp	.+1752   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
			  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	63 e0       	ldi	r22, 0x03	; 3
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	65 e0       	ldi	r22, 0x05	; 5
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	66 e0       	ldi	r22, 0x06	; 6
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	67 e0       	ldi	r22, 0x07	; 7
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    20f0:	48 c3       	rjmp	.+1680   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>

			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	66 e0       	ldi	r22, 0x06	; 6
    20f6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	64 e0       	ldi	r22, 0x04	; 4
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	66 e0       	ldi	r22, 0x06	; 6
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	67 e0       	ldi	r22, 0x07	; 7
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2140:	20 c3       	rjmp	.+1600   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	62 e0       	ldi	r22, 0x02	; 2
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	63 e0       	ldi	r22, 0x03	; 3
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	65 e0       	ldi	r22, 0x05	; 5
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	66 e0       	ldi	r22, 0x06	; 6
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	67 e0       	ldi	r22, 0x07	; 7
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2188:	fc c2       	rjmp	.+1528   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	62 e0       	ldi	r22, 0x02	; 2
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	63 e0       	ldi	r22, 0x03	; 3
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	64 e0       	ldi	r22, 0x04	; 4
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	65 e0       	ldi	r22, 0x05	; 5
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    21bc:	82 e0       	ldi	r24, 0x02	; 2
    21be:	66 e0       	ldi	r22, 0x06	; 6
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    21d0:	d8 c2       	rjmp	.+1456   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
		  	  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	63 e0       	ldi	r22, 0x03	; 3
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	64 e0       	ldi	r22, 0x04	; 4
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	65 e0       	ldi	r22, 0x05	; 5
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	66 e0       	ldi	r22, 0x06	; 6
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	67 e0       	ldi	r22, 0x07	; 7
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2218:	b4 c2       	rjmp	.+1384   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	6d e6       	ldi	r22, 0x6D	; 109
    221e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
		  	  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	62 e0       	ldi	r22, 0x02	; 2
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	63 e0       	ldi	r22, 0x03	; 3
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	65 e0       	ldi	r22, 0x05	; 5
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	66 e0       	ldi	r22, 0x06	; 6
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	67 e0       	ldi	r22, 0x07	; 7
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2268:	8c c2       	rjmp	.+1304   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	6d e7       	ldi	r22, 0x7D	; 125
    226e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	64 e0       	ldi	r22, 0x04	; 4
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	65 e0       	ldi	r22, 0x05	; 5
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	66 e0       	ldi	r22, 0x06	; 6
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	67 e0       	ldi	r22, 0x07	; 7
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    22b8:	64 c2       	rjmp	.+1224   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	67 e0       	ldi	r22, 0x07	; 7
    22be:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	62 e0       	ldi	r22, 0x02	; 2
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	64 e0       	ldi	r22, 0x04	; 4
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	65 e0       	ldi	r22, 0x05	; 5
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	66 e0       	ldi	r22, 0x06	; 6
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	67 e0       	ldi	r22, 0x07	; 7
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2308:	3c c2       	rjmp	.+1144   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	6f e7       	ldi	r22, 0x7F	; 127
    230e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	62 e0       	ldi	r22, 0x02	; 2
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2326:	82 e0       	ldi	r24, 0x02	; 2
    2328:	63 e0       	ldi	r22, 0x03	; 3
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	64 e0       	ldi	r22, 0x04	; 4
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	65 e0       	ldi	r22, 0x05	; 5
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2358:	14 c2       	rjmp	.+1064   	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	6f e6       	ldi	r22, 0x6F	; 111
    235e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	64 e0       	ldi	r22, 0x04	; 4
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	65 e0       	ldi	r22, 0x05	; 5
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	66 e0       	ldi	r22, 0x06	; 6
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	67 e0       	ldi	r22, 0x07	; 7
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    23a8:	ec c1       	rjmp	.+984    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <SevenSegmant_voidDisplayNum+0x430>
    23b0:	e8 c1       	rjmp	.+976    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
	{
		switch (copy_u8Number)
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	ac 81       	ldd	r26, Y+4	; 0x04
    23b8:	bd 81       	ldd	r27, Y+5	; 0x05
    23ba:	8a 87       	std	Y+10, r24	; 0x0a
    23bc:	9b 87       	std	Y+11, r25	; 0x0b
    23be:	ac 87       	std	Y+12, r26	; 0x0c
    23c0:	bd 87       	std	Y+13, r27	; 0x0d
    23c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    23c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	91 05       	cpc	r25, r1
    23ce:	a1 05       	cpc	r26, r1
    23d0:	b1 05       	cpc	r27, r1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <SevenSegmant_voidDisplayNum+0x454>
    23d4:	ff c0       	rjmp	.+510    	; 0x25d4 <SevenSegmant_voidDisplayNum+0x652>
    23d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23da:	ac 85       	ldd	r26, Y+12	; 0x0c
    23dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    23de:	85 30       	cpi	r24, 0x05	; 5
    23e0:	91 05       	cpc	r25, r1
    23e2:	a1 05       	cpc	r26, r1
    23e4:	b1 05       	cpc	r27, r1
    23e6:	48 f5       	brcc	.+82     	; 0x243a <SevenSegmant_voidDisplayNum+0x4b8>
    23e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ec:	ac 85       	ldd	r26, Y+12	; 0x0c
    23ee:	bd 85       	ldd	r27, Y+13	; 0x0d
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	91 05       	cpc	r25, r1
    23f4:	a1 05       	cpc	r26, r1
    23f6:	b1 05       	cpc	r27, r1
    23f8:	09 f4       	brne	.+2      	; 0x23fc <SevenSegmant_voidDisplayNum+0x47a>
    23fa:	80 c0       	rjmp	.+256    	; 0x24fc <SevenSegmant_voidDisplayNum+0x57a>
    23fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2400:	ac 85       	ldd	r26, Y+12	; 0x0c
    2402:	bd 85       	ldd	r27, Y+13	; 0x0d
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	a1 05       	cpc	r26, r1
    240a:	b1 05       	cpc	r27, r1
    240c:	08 f4       	brcc	.+2      	; 0x2410 <SevenSegmant_voidDisplayNum+0x48e>
    240e:	52 c0       	rjmp	.+164    	; 0x24b4 <SevenSegmant_voidDisplayNum+0x532>
    2410:	8a 85       	ldd	r24, Y+10	; 0x0a
    2412:	9b 85       	ldd	r25, Y+11	; 0x0b
    2414:	ac 85       	ldd	r26, Y+12	; 0x0c
    2416:	bd 85       	ldd	r27, Y+13	; 0x0d
    2418:	82 30       	cpi	r24, 0x02	; 2
    241a:	91 05       	cpc	r25, r1
    241c:	a1 05       	cpc	r26, r1
    241e:	b1 05       	cpc	r27, r1
    2420:	09 f4       	brne	.+2      	; 0x2424 <SevenSegmant_voidDisplayNum+0x4a2>
    2422:	90 c0       	rjmp	.+288    	; 0x2544 <SevenSegmant_voidDisplayNum+0x5c2>
    2424:	8a 85       	ldd	r24, Y+10	; 0x0a
    2426:	9b 85       	ldd	r25, Y+11	; 0x0b
    2428:	ac 85       	ldd	r26, Y+12	; 0x0c
    242a:	bd 85       	ldd	r27, Y+13	; 0x0d
    242c:	83 30       	cpi	r24, 0x03	; 3
    242e:	91 05       	cpc	r25, r1
    2430:	a1 05       	cpc	r26, r1
    2432:	b1 05       	cpc	r27, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <SevenSegmant_voidDisplayNum+0x4b6>
    2436:	aa c0       	rjmp	.+340    	; 0x258c <SevenSegmant_voidDisplayNum+0x60a>
    2438:	a4 c1       	rjmp	.+840    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
    243a:	8a 85       	ldd	r24, Y+10	; 0x0a
    243c:	9b 85       	ldd	r25, Y+11	; 0x0b
    243e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2440:	bd 85       	ldd	r27, Y+13	; 0x0d
    2442:	87 30       	cpi	r24, 0x07	; 7
    2444:	91 05       	cpc	r25, r1
    2446:	a1 05       	cpc	r26, r1
    2448:	b1 05       	cpc	r27, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <SevenSegmant_voidDisplayNum+0x4cc>
    244c:	2f c1       	rjmp	.+606    	; 0x26ac <SevenSegmant_voidDisplayNum+0x72a>
    244e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2450:	9b 85       	ldd	r25, Y+11	; 0x0b
    2452:	ac 85       	ldd	r26, Y+12	; 0x0c
    2454:	bd 85       	ldd	r27, Y+13	; 0x0d
    2456:	88 30       	cpi	r24, 0x08	; 8
    2458:	91 05       	cpc	r25, r1
    245a:	a1 05       	cpc	r26, r1
    245c:	b1 05       	cpc	r27, r1
    245e:	a8 f4       	brcc	.+42     	; 0x248a <SevenSegmant_voidDisplayNum+0x508>
    2460:	8a 85       	ldd	r24, Y+10	; 0x0a
    2462:	9b 85       	ldd	r25, Y+11	; 0x0b
    2464:	ac 85       	ldd	r26, Y+12	; 0x0c
    2466:	bd 85       	ldd	r27, Y+13	; 0x0d
    2468:	85 30       	cpi	r24, 0x05	; 5
    246a:	91 05       	cpc	r25, r1
    246c:	a1 05       	cpc	r26, r1
    246e:	b1 05       	cpc	r27, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <SevenSegmant_voidDisplayNum+0x4f2>
    2472:	d4 c0       	rjmp	.+424    	; 0x261c <SevenSegmant_voidDisplayNum+0x69a>
    2474:	8a 85       	ldd	r24, Y+10	; 0x0a
    2476:	9b 85       	ldd	r25, Y+11	; 0x0b
    2478:	ac 85       	ldd	r26, Y+12	; 0x0c
    247a:	bd 85       	ldd	r27, Y+13	; 0x0d
    247c:	86 30       	cpi	r24, 0x06	; 6
    247e:	91 05       	cpc	r25, r1
    2480:	a1 05       	cpc	r26, r1
    2482:	b1 05       	cpc	r27, r1
    2484:	09 f4       	brne	.+2      	; 0x2488 <SevenSegmant_voidDisplayNum+0x506>
    2486:	ee c0       	rjmp	.+476    	; 0x2664 <SevenSegmant_voidDisplayNum+0x6e2>
    2488:	7c c1       	rjmp	.+760    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
    248a:	8a 85       	ldd	r24, Y+10	; 0x0a
    248c:	9b 85       	ldd	r25, Y+11	; 0x0b
    248e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2490:	bd 85       	ldd	r27, Y+13	; 0x0d
    2492:	88 30       	cpi	r24, 0x08	; 8
    2494:	91 05       	cpc	r25, r1
    2496:	a1 05       	cpc	r26, r1
    2498:	b1 05       	cpc	r27, r1
    249a:	09 f4       	brne	.+2      	; 0x249e <SevenSegmant_voidDisplayNum+0x51c>
    249c:	2b c1       	rjmp	.+598    	; 0x26f4 <SevenSegmant_voidDisplayNum+0x772>
    249e:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    24a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    24a6:	89 30       	cpi	r24, 0x09	; 9
    24a8:	91 05       	cpc	r25, r1
    24aa:	a1 05       	cpc	r26, r1
    24ac:	b1 05       	cpc	r27, r1
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <SevenSegmant_voidDisplayNum+0x530>
    24b0:	45 c1       	rjmp	.+650    	; 0x273c <SevenSegmant_voidDisplayNum+0x7ba>
    24b2:	67 c1       	rjmp	.+718    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	62 e0       	ldi	r22, 0x02	; 2
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	63 e0       	ldi	r22, 0x03	; 3
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	64 e0       	ldi	r22, 0x04	; 4
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	65 e0       	ldi	r22, 0x05	; 5
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	66 e0       	ldi	r22, 0x06	; 6
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	67 e0       	ldi	r22, 0x07	; 7
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    24fa:	43 c1       	rjmp	.+646    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 1 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	62 e0       	ldi	r22, 0x02	; 2
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	63 e0       	ldi	r22, 0x03	; 3
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	64 e0       	ldi	r22, 0x04	; 4
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	65 e0       	ldi	r22, 0x05	; 5
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	66 e0       	ldi	r22, 0x06	; 6
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	67 e0       	ldi	r22, 0x07	; 7
    253c:	41 e0       	ldi	r20, 0x01	; 1
    253e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2542:	1f c1       	rjmp	.+574    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	 //DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2544:	82 e0       	ldi	r24, 0x02	; 2
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	62 e0       	ldi	r22, 0x02	; 2
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	63 e0       	ldi	r22, 0x03	; 3
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2562:	82 e0       	ldi	r24, 0x02	; 2
    2564:	64 e0       	ldi	r22, 0x04	; 4
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	65 e0       	ldi	r22, 0x05	; 5
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	66 e0       	ldi	r22, 0x06	; 6
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	67 e0       	ldi	r22, 0x07	; 7
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    258a:	fb c0       	rjmp	.+502    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2596:	82 e0       	ldi	r24, 0x02	; 2
    2598:	62 e0       	ldi	r22, 0x02	; 2
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	63 e0       	ldi	r22, 0x03	; 3
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	64 e0       	ldi	r22, 0x04	; 4
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	66 e0       	ldi	r22, 0x06	; 6
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	67 e0       	ldi	r22, 0x07	; 7
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    25d2:	d7 c0       	rjmp	.+430    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>

		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	62 e0       	ldi	r22, 0x02	; 2
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	63 e0       	ldi	r22, 0x03	; 3
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	64 e0       	ldi	r22, 0x04	; 4
    25f6:	41 e0       	ldi	r20, 0x01	; 1
    25f8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	65 e0       	ldi	r22, 0x05	; 5
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	66 e0       	ldi	r22, 0x06	; 6
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	67 e0       	ldi	r22, 0x07	; 7
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    261a:	b3 c0       	rjmp	.+358    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	63 e0       	ldi	r22, 0x03	; 3
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	64 e0       	ldi	r22, 0x04	; 4
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	65 e0       	ldi	r22, 0x05	; 5
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	66 e0       	ldi	r22, 0x06	; 6
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	67 e0       	ldi	r22, 0x07	; 7
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2662:	8f c0       	rjmp	.+286    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	63 e0       	ldi	r22, 0x03	; 3
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	64 e0       	ldi	r22, 0x04	; 4
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	65 e0       	ldi	r22, 0x05	; 5
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	66 e0       	ldi	r22, 0x06	; 6
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	67 e0       	ldi	r22, 0x07	; 7
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    26aa:	6b c0       	rjmp	.+214    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	62 e0       	ldi	r22, 0x02	; 2
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	63 e0       	ldi	r22, 0x03	; 3
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	64 e0       	ldi	r22, 0x04	; 4
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	65 e0       	ldi	r22, 0x05	; 5
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	66 e0       	ldi	r22, 0x06	; 6
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	67 e0       	ldi	r22, 0x07	; 7
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    26f2:	47 c0       	rjmp	.+142    	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	62 e0       	ldi	r22, 0x02	; 2
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	63 e0       	ldi	r22, 0x03	; 3
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	64 e0       	ldi	r22, 0x04	; 4
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	65 e0       	ldi	r22, 0x05	; 5
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	66 e0       	ldi	r22, 0x06	; 6
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	67 e0       	ldi	r22, 0x07	; 7
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    273a:	23 c0       	rjmp	.+70     	; 0x2782 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	63 e0       	ldi	r22, 0x03	; 3
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    275a:	82 e0       	ldi	r24, 0x02	; 2
    275c:	64 e0       	ldi	r22, 0x04	; 4
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	65 e0       	ldi	r22, 0x05	; 5
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	66 e0       	ldi	r22, 0x06	; 6
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	67 e0       	ldi	r22, 0x07	; 7
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    2782:	2d 96       	adiw	r28, 0x0d	; 13
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <SevenSegmantPORT_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmantPORT_voidIntialization (u8 copy_u8SegmantType)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	0f 92       	push	r0
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	6f ef       	ldi	r22, 0xFF	; 255
    27a4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	29 f4       	brne	.+10     	; 0x27b8 <SevenSegmantPORT_voidIntialization+0x24>
	DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    27ae:	82 e0       	ldi	r24, 0x02	; 2
    27b0:	6f e3       	ldi	r22, 0x3F	; 63
    27b2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <SevenSegmantPORT_voidIntialization+0x32>

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	82 30       	cpi	r24, 0x02	; 2
    27bc:	21 f4       	brne	.+8      	; 0x27c6 <SevenSegmantPORT_voidIntialization+0x32>
	DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	60 e4       	ldi	r22, 0x40	; 64
    27c2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>

}
    27c6:	0f 90       	pop	r0
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <SevenSegmantPORT_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmantPORT_voidDisplayNum (u8 copy_u8SegmantType,u8 copy_u8Number)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <SevenSegmantPORT_voidDisplayNum+0x6>
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <SevenSegmantPORT_voidDisplayNum+0x8>
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <SevenSegmantPORT_voidDisplayNum+0xa>
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	09 f0       	breq	.+2      	; 0x27e8 <SevenSegmantPORT_voidDisplayNum+0x1a>
    27e6:	7e c0       	rjmp	.+252    	; 0x28e4 <SevenSegmantPORT_voidDisplayNum+0x116>
	{
		switch (copy_u8Number)
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	3e 83       	std	Y+6, r19	; 0x06
    27f0:	2d 83       	std	Y+5, r18	; 0x05
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <SevenSegmantPORT_voidDisplayNum+0x30>
    27fc:	55 c0       	rjmp	.+170    	; 0x28a8 <SevenSegmantPORT_voidDisplayNum+0xda>
    27fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2800:	3e 81       	ldd	r19, Y+6	; 0x06
    2802:	25 30       	cpi	r18, 0x05	; 5
    2804:	31 05       	cpc	r19, r1
    2806:	dc f4       	brge	.+54     	; 0x283e <SevenSegmantPORT_voidDisplayNum+0x70>
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <SevenSegmantPORT_voidDisplayNum+0x46>
    2812:	3b c0       	rjmp	.+118    	; 0x288a <SevenSegmantPORT_voidDisplayNum+0xbc>
    2814:	2d 81       	ldd	r18, Y+5	; 0x05
    2816:	3e 81       	ldd	r19, Y+6	; 0x06
    2818:	22 30       	cpi	r18, 0x02	; 2
    281a:	31 05       	cpc	r19, r1
    281c:	2c f4       	brge	.+10     	; 0x2828 <SevenSegmantPORT_voidDisplayNum+0x5a>
    281e:	8d 81       	ldd	r24, Y+5	; 0x05
    2820:	9e 81       	ldd	r25, Y+6	; 0x06
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	69 f1       	breq	.+90     	; 0x2880 <SevenSegmantPORT_voidDisplayNum+0xb2>
    2826:	df c0       	rjmp	.+446    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    2828:	2d 81       	ldd	r18, Y+5	; 0x05
    282a:	3e 81       	ldd	r19, Y+6	; 0x06
    282c:	22 30       	cpi	r18, 0x02	; 2
    282e:	31 05       	cpc	r19, r1
    2830:	89 f1       	breq	.+98     	; 0x2894 <SevenSegmantPORT_voidDisplayNum+0xc6>
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	83 30       	cpi	r24, 0x03	; 3
    2838:	91 05       	cpc	r25, r1
    283a:	89 f1       	breq	.+98     	; 0x289e <SevenSegmantPORT_voidDisplayNum+0xd0>
    283c:	d4 c0       	rjmp	.+424    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    283e:	2d 81       	ldd	r18, Y+5	; 0x05
    2840:	3e 81       	ldd	r19, Y+6	; 0x06
    2842:	27 30       	cpi	r18, 0x07	; 7
    2844:	31 05       	cpc	r19, r1
    2846:	09 f4       	brne	.+2      	; 0x284a <SevenSegmantPORT_voidDisplayNum+0x7c>
    2848:	3e c0       	rjmp	.+124    	; 0x28c6 <SevenSegmantPORT_voidDisplayNum+0xf8>
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	88 30       	cpi	r24, 0x08	; 8
    2850:	91 05       	cpc	r25, r1
    2852:	5c f4       	brge	.+22     	; 0x286a <SevenSegmantPORT_voidDisplayNum+0x9c>
    2854:	2d 81       	ldd	r18, Y+5	; 0x05
    2856:	3e 81       	ldd	r19, Y+6	; 0x06
    2858:	25 30       	cpi	r18, 0x05	; 5
    285a:	31 05       	cpc	r19, r1
    285c:	51 f1       	breq	.+84     	; 0x28b2 <SevenSegmantPORT_voidDisplayNum+0xe4>
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	86 30       	cpi	r24, 0x06	; 6
    2864:	91 05       	cpc	r25, r1
    2866:	51 f1       	breq	.+84     	; 0x28bc <SevenSegmantPORT_voidDisplayNum+0xee>
    2868:	be c0       	rjmp	.+380    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    286a:	2d 81       	ldd	r18, Y+5	; 0x05
    286c:	3e 81       	ldd	r19, Y+6	; 0x06
    286e:	28 30       	cpi	r18, 0x08	; 8
    2870:	31 05       	cpc	r19, r1
    2872:	71 f1       	breq	.+92     	; 0x28d0 <SevenSegmantPORT_voidDisplayNum+0x102>
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	89 30       	cpi	r24, 0x09	; 9
    287a:	91 05       	cpc	r25, r1
    287c:	71 f1       	breq	.+92     	; 0x28da <SevenSegmantPORT_voidDisplayNum+0x10c>
    287e:	b3 c0       	rjmp	.+358    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	6f e3       	ldi	r22, 0x3F	; 63
    2884:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    2888:	ae c0       	rjmp	.+348    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	66 e0       	ldi	r22, 0x06	; 6
    288e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    2892:	a9 c0       	rjmp	.+338    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	6b e5       	ldi	r22, 0x5B	; 91
    2898:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    289c:	a4 c0       	rjmp	.+328    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	6f e4       	ldi	r22, 0x4F	; 79
    28a2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28a6:	9f c0       	rjmp	.+318    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	66 e6       	ldi	r22, 0x66	; 102
    28ac:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28b0:	9a c0       	rjmp	.+308    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	6d e6       	ldi	r22, 0x6D	; 109
    28b6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28ba:	95 c0       	rjmp	.+298    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	6d e7       	ldi	r22, 0x7D	; 125
    28c0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28c4:	90 c0       	rjmp	.+288    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	67 e0       	ldi	r22, 0x07	; 7
    28ca:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28ce:	8b c0       	rjmp	.+278    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	6f e7       	ldi	r22, 0x7F	; 127
    28d4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28d8:	86 c0       	rjmp	.+268    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	6f e6       	ldi	r22, 0x6F	; 111
    28de:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    28e2:	81 c0       	rjmp	.+258    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	09 f0       	breq	.+2      	; 0x28ec <SevenSegmantPORT_voidDisplayNum+0x11e>
    28ea:	7d c0       	rjmp	.+250    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
	{
		switch (copy_u8Number)
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	3c 83       	std	Y+4, r19	; 0x04
    28f4:	2b 83       	std	Y+3, r18	; 0x03
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	91 05       	cpc	r25, r1
    28fe:	09 f4       	brne	.+2      	; 0x2902 <SevenSegmantPORT_voidDisplayNum+0x134>
    2900:	55 c0       	rjmp	.+170    	; 0x29ac <SevenSegmantPORT_voidDisplayNum+0x1de>
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	3c 81       	ldd	r19, Y+4	; 0x04
    2906:	25 30       	cpi	r18, 0x05	; 5
    2908:	31 05       	cpc	r19, r1
    290a:	dc f4       	brge	.+54     	; 0x2942 <SevenSegmantPORT_voidDisplayNum+0x174>
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	91 05       	cpc	r25, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <SevenSegmantPORT_voidDisplayNum+0x14a>
    2916:	3b c0       	rjmp	.+118    	; 0x298e <SevenSegmantPORT_voidDisplayNum+0x1c0>
    2918:	2b 81       	ldd	r18, Y+3	; 0x03
    291a:	3c 81       	ldd	r19, Y+4	; 0x04
    291c:	22 30       	cpi	r18, 0x02	; 2
    291e:	31 05       	cpc	r19, r1
    2920:	2c f4       	brge	.+10     	; 0x292c <SevenSegmantPORT_voidDisplayNum+0x15e>
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f1       	breq	.+90     	; 0x2984 <SevenSegmantPORT_voidDisplayNum+0x1b6>
    292a:	5d c0       	rjmp	.+186    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	22 30       	cpi	r18, 0x02	; 2
    2932:	31 05       	cpc	r19, r1
    2934:	89 f1       	breq	.+98     	; 0x2998 <SevenSegmantPORT_voidDisplayNum+0x1ca>
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	83 30       	cpi	r24, 0x03	; 3
    293c:	91 05       	cpc	r25, r1
    293e:	89 f1       	breq	.+98     	; 0x29a2 <SevenSegmantPORT_voidDisplayNum+0x1d4>
    2940:	52 c0       	rjmp	.+164    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    2942:	2b 81       	ldd	r18, Y+3	; 0x03
    2944:	3c 81       	ldd	r19, Y+4	; 0x04
    2946:	27 30       	cpi	r18, 0x07	; 7
    2948:	31 05       	cpc	r19, r1
    294a:	09 f4       	brne	.+2      	; 0x294e <SevenSegmantPORT_voidDisplayNum+0x180>
    294c:	3e c0       	rjmp	.+124    	; 0x29ca <SevenSegmantPORT_voidDisplayNum+0x1fc>
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	88 30       	cpi	r24, 0x08	; 8
    2954:	91 05       	cpc	r25, r1
    2956:	5c f4       	brge	.+22     	; 0x296e <SevenSegmantPORT_voidDisplayNum+0x1a0>
    2958:	2b 81       	ldd	r18, Y+3	; 0x03
    295a:	3c 81       	ldd	r19, Y+4	; 0x04
    295c:	25 30       	cpi	r18, 0x05	; 5
    295e:	31 05       	cpc	r19, r1
    2960:	51 f1       	breq	.+84     	; 0x29b6 <SevenSegmantPORT_voidDisplayNum+0x1e8>
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	86 30       	cpi	r24, 0x06	; 6
    2968:	91 05       	cpc	r25, r1
    296a:	51 f1       	breq	.+84     	; 0x29c0 <SevenSegmantPORT_voidDisplayNum+0x1f2>
    296c:	3c c0       	rjmp	.+120    	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
    296e:	2b 81       	ldd	r18, Y+3	; 0x03
    2970:	3c 81       	ldd	r19, Y+4	; 0x04
    2972:	28 30       	cpi	r18, 0x08	; 8
    2974:	31 05       	cpc	r19, r1
    2976:	71 f1       	breq	.+92     	; 0x29d4 <SevenSegmantPORT_voidDisplayNum+0x206>
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	89 30       	cpi	r24, 0x09	; 9
    297e:	91 05       	cpc	r25, r1
    2980:	71 f1       	breq	.+92     	; 0x29de <SevenSegmantPORT_voidDisplayNum+0x210>
    2982:	31 c0       	rjmp	.+98     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    2984:	82 e0       	ldi	r24, 0x02	; 2
    2986:	60 e4       	ldi	r22, 0x40	; 64
    2988:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    298c:	2c c0       	rjmp	.+88     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	69 e7       	ldi	r22, 0x79	; 121
    2992:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    2996:	27 c0       	rjmp	.+78     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	64 e2       	ldi	r22, 0x24	; 36
    299c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29a0:	22 c0       	rjmp	.+68     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	60 e3       	ldi	r22, 0x30	; 48
    29a6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29aa:	1d c0       	rjmp	.+58     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	69 e1       	ldi	r22, 0x19	; 25
    29b0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29b4:	18 c0       	rjmp	.+48     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	62 e1       	ldi	r22, 0x12	; 18
    29ba:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29be:	13 c0       	rjmp	.+38     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
    29c0:	82 e0       	ldi	r24, 0x02	; 2
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	68 e7       	ldi	r22, 0x78	; 120
    29ce:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29d2:	09 c0       	rjmp	.+18     	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	60 e1       	ldi	r22, 0x10	; 16
    29e2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    29e6:	26 96       	adiw	r28, 0x06	; 6
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <LCD_voidSend_Command>:
/***************************************************/
#include <avr\delay.h>
/*********************************************************************************************************************************/

extern void LCD_voidSend_Command (u8 copy_u8Command)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	2f 97       	sbiw	r28, 0x0f	; 15
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	8f 87       	std	Y+15, r24	; 0x0f
	/***********************************/
//	DIO_voidSetPortDirection (LCD_Data_PORT,DIO_OUTPUT);
//	DIO_voidSetPortDirection (LCD_CNT_PORT,DIO_OUTPUT);


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	64 e0       	ldi	r22, 0x04	; 4
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	65 e0       	ldi	r22, 0x05	; 5
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8Command);
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a26:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	66 e0       	ldi	r22, 0x06	; 6
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e0       	ldi	r26, 0x00	; 0
    2a3a:	b0 e4       	ldi	r27, 0x40	; 64
    2a3c:	8b 87       	std	Y+11, r24	; 0x0b
    2a3e:	9c 87       	std	Y+12, r25	; 0x0c
    2a40:	ad 87       	std	Y+13, r26	; 0x0d
    2a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8f 83       	std	Y+7, r24	; 0x07
    2a5e:	98 87       	std	Y+8, r25	; 0x08
    2a60:	a9 87       	std	Y+9, r26	; 0x09
    2a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a64:	6f 81       	ldd	r22, Y+7	; 0x07
    2a66:	78 85       	ldd	r23, Y+8	; 0x08
    2a68:	89 85       	ldd	r24, Y+9	; 0x09
    2a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <LCD_voidSend_Command+0x8e>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <LCD_voidSend_Command+0x10c>
	else if (__tmp > 65535)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <LCD_voidSend_Command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <LCD_voidSend_Command+0xee>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9c 83       	std	Y+4, r25	; 0x04
    2ace:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_voidSend_Command+0xdc>
    2ad8:	9c 83       	std	Y+4, r25	; 0x04
    2ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <LCD_voidSend_Command+0xd0>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <LCD_voidSend_Command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LCD_voidSend_Command+0x118>
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	66 e0       	ldi	r22, 0x06	; 6
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
}
    2b22:	2f 96       	adiw	r28, 0x0f	; 15
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_voidIntialization>:


extern void LCD_voidIntialization (void)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	aa 97       	sbiw	r28, 0x2a	; 42
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(35);

	/***********************************/
	/*      Set PORT A & D output      */
	/***********************************/
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	64 e0       	ldi	r22, 0x04	; 4
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    2b52:	83 e0       	ldi	r24, 0x03	; 3
    2b54:	65 e0       	ldi	r22, 0x05	; 5
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	66 e0       	ldi	r22, 0x06	; 6
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection (LCD_Data_PORT,0b11111111);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	6f ef       	ldi	r22, 0xFF	; 255
    2b6a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPortDirection>


	/***********************************/
	/*           Function Set          */
	/***********************************/
	LCD_voidSend_Command(0b00111100);//0->1
    2b6e:	8c e3       	ldi	r24, 0x3C	; 60
    2b70:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e8       	ldi	r26, 0x80	; 128
    2b7a:	bf e3       	ldi	r27, 0x3F	; 63
    2b7c:	8f a3       	std	Y+39, r24	; 0x27
    2b7e:	98 a7       	std	Y+40, r25	; 0x28
    2b80:	a9 a7       	std	Y+41, r26	; 0x29
    2b82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6f a1       	ldd	r22, Y+39	; 0x27
    2b86:	78 a5       	ldd	r23, Y+40	; 0x28
    2b88:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8b a3       	std	Y+35, r24	; 0x23
    2b9e:	9c a3       	std	Y+36, r25	; 0x24
    2ba0:	ad a3       	std	Y+37, r26	; 0x25
    2ba2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_voidIntialization+0x92>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_voidIntialization+0x110>
	else if (__tmp > 65535)
    2bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bca:	8d a1       	ldd	r24, Y+37	; 0x25
    2bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_voidIntialization+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6f a1       	ldd	r22, Y+39	; 0x27
    2be0:	78 a5       	ldd	r23, Y+40	; 0x28
    2be2:	89 a5       	ldd	r24, Y+41	; 0x29
    2be4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_voidIntialization+0xf2>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	98 a3       	std	Y+32, r25	; 0x20
    2c0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c12:	98 a1       	ldd	r25, Y+32	; 0x20
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_voidIntialization+0xe0>
    2c18:	98 a3       	std	Y+32, r25	; 0x20
    2c1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	89 a1       	ldd	r24, Y+33	; 0x21
    2c28:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_voidIntialization+0xd4>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_voidIntialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6b a1       	ldd	r22, Y+35	; 0x23
    2c32:	7c a1       	ldd	r23, Y+36	; 0x24
    2c34:	8d a1       	ldd	r24, Y+37	; 0x25
    2c36:	9e a1       	ldd	r25, Y+38	; 0x26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	89 a1       	ldd	r24, Y+33	; 0x21
    2c46:	9a a1       	ldd	r25, Y+34	; 0x22
    2c48:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_voidIntialization+0x11c>
    2c54:	9e 8f       	std	Y+30, r25	; 0x1e
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/***********************************/
	/*     Display off/on control      */
	/***********************************/
	LCD_voidSend_Command(0b00001111);
    2c58:	8f e0       	ldi	r24, 0x0F	; 15
    2c5a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 e8       	ldi	r26, 0x80	; 128
    2c64:	bf e3       	ldi	r27, 0x3F	; 63
    2c66:	89 8f       	std	Y+25, r24	; 0x19
    2c68:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a ef       	ldi	r20, 0xFA	; 250
    2c7c:	54 e4       	ldi	r21, 0x44	; 68
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8d 8b       	std	Y+21, r24	; 0x15
    2c88:	9e 8b       	std	Y+22, r25	; 0x16
    2c8a:	af 8b       	std	Y+23, r26	; 0x17
    2c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <LCD_voidIntialization+0x17c>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <LCD_voidIntialization+0x1fa>
	else if (__tmp > 65535)
    2cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <LCD_voidIntialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <LCD_voidIntialization+0x1dc>
    2cf2:	88 ec       	ldi	r24, 0xC8	; 200
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	89 8b       	std	Y+17, r24	; 0x11
    2cfa:	89 89       	ldd	r24, Y+17	; 0x11
    2cfc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_voidIntialization+0x1ca>
    2d02:	9a 8b       	std	Y+18, r25	; 0x12
    2d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9c 8b       	std	Y+20, r25	; 0x14
    2d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8b 89       	ldd	r24, Y+19	; 0x13
    2d12:	9c 89       	ldd	r25, Y+20	; 0x14
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <LCD_voidIntialization+0x1be>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <LCD_voidIntialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d20:	98 8d       	ldd	r25, Y+24	; 0x18
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d30:	9c 89       	ldd	r25, Y+20	; 0x14
    2d32:	98 8b       	std	Y+16, r25	; 0x10
    2d34:	8f 87       	std	Y+15, r24	; 0x0f
    2d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d38:	98 89       	ldd	r25, Y+16	; 0x10
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_voidIntialization+0x206>
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/***********************************/
	/*         Display Clear           */
	/***********************************/
	LCD_voidSend_Command(0b00000001);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e8       	ldi	r26, 0x80	; 128
    2d4e:	bf e3       	ldi	r27, 0x3F	; 63
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
    2d52:	9c 87       	std	Y+12, r25	; 0x0c
    2d54:	ad 87       	std	Y+13, r26	; 0x0d
    2d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8f 83       	std	Y+7, r24	; 0x07
    2d72:	98 87       	std	Y+8, r25	; 0x08
    2d74:	a9 87       	std	Y+9, r26	; 0x09
    2d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <LCD_voidIntialization+0x266>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <LCD_voidIntialization+0x2e4>
	else if (__tmp > 65535)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <LCD_voidIntialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <LCD_voidIntialization+0x2c6>
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_voidIntialization+0x2b4>
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <LCD_voidIntialization+0x2a8>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <LCD_voidIntialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <LCD_voidIntialization+0x2f0>
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	//LCD_voidSend_Command(0x06);
	/* Wait more than 1.39 ms */
	//_delay_ms(20);


}
    2e2c:	aa 96       	adiw	r28, 0x2a	; 42
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <LCD_voidSend_Data>:

extern void LCD_voidSend_Data (u8 copy_u8data)
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	2f 97       	sbiw	r28, 0x0f	; 15
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RW, DIO_LOW);
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	65 e0       	ldi	r22, 0x05	; 5
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RS, DIO_HIGH);
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	64 e0       	ldi	r22, 0x04	; 4
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8data);
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e6c:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_HIGH);
    2e70:	83 e0       	ldi	r24, 0x03	; 3
    2e72:	66 e0       	ldi	r22, 0x06	; 6
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a0 e0       	ldi	r26, 0x00	; 0
    2e80:	b0 e4       	ldi	r27, 0x40	; 64
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <LCD_voidSend_Data+0x8e>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_voidSend_Data+0x10c>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <LCD_voidSend_Data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <LCD_voidSend_Data+0xee>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <LCD_voidSend_Data+0xdc>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <LCD_voidSend_Data+0xd0>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <LCD_voidSend_Data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <LCD_voidSend_Data+0x118>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	66 e0       	ldi	r22, 0x06	; 6
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
}
    2f68:	2f 96       	adiw	r28, 0x0f	; 15
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <LCD_voidSend_String>:

void LCD_voidSend_String (char *copy_ptrString)
{
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <LCD_voidSend_String+0x6>
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	0b c0       	rjmp	.+22     	; 0x2fa0 <LCD_voidSend_String+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_Data (*copy_ptrString++);
    2f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8e:	20 81       	ld	r18, Z
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	9a 81       	ldd	r25, Y+2	; 0x02
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	82 2f       	mov	r24, r18
    2f9c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <LCD_voidSend_Data>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
}

void LCD_voidSend_String (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    2fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa4:	80 81       	ld	r24, Z
    2fa6:	88 23       	and	r24, r24
    2fa8:	81 f7       	brne	.-32     	; 0x2f8a <LCD_voidSend_String+0x10>
	{
		LCD_voidSend_Data (*copy_ptrString++);
	}
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <LCD_voidSend_4bitCommand>:


extern void LCD_voidSend_4bitCommand (u8 copy_u8Command)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	e5 97       	sbiw	r28, 0x35	; 53
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	8d ab       	std	Y+53, r24	; 0x35
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	64 e0       	ldi	r22, 0x04	; 4
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	65 e0       	ldi	r22, 0x05	; 5
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,4));
    2fde:	8d a9       	ldd	r24, Y+53	; 0x35
    2fe0:	82 95       	swap	r24
    2fe2:	8f 70       	andi	r24, 0x0F	; 15
    2fe4:	98 2f       	mov	r25, r24
    2fe6:	91 70       	andi	r25, 0x01	; 1
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	64 e0       	ldi	r22, 0x04	; 4
    2fec:	49 2f       	mov	r20, r25
    2fee:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,5));
    2ff2:	8d a9       	ldd	r24, Y+53	; 0x35
    2ff4:	82 95       	swap	r24
    2ff6:	86 95       	lsr	r24
    2ff8:	87 70       	andi	r24, 0x07	; 7
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	91 70       	andi	r25, 0x01	; 1
    2ffe:	82 e0       	ldi	r24, 0x02	; 2
    3000:	65 e0       	ldi	r22, 0x05	; 5
    3002:	49 2f       	mov	r20, r25
    3004:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,6));
    3008:	8d a9       	ldd	r24, Y+53	; 0x35
    300a:	82 95       	swap	r24
    300c:	86 95       	lsr	r24
    300e:	86 95       	lsr	r24
    3010:	83 70       	andi	r24, 0x03	; 3
    3012:	98 2f       	mov	r25, r24
    3014:	91 70       	andi	r25, 0x01	; 1
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	66 e0       	ldi	r22, 0x06	; 6
    301a:	49 2f       	mov	r20, r25
    301c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,7));
    3020:	8d a9       	ldd	r24, Y+53	; 0x35
    3022:	98 2f       	mov	r25, r24
    3024:	99 1f       	adc	r25, r25
    3026:	99 27       	eor	r25, r25
    3028:	99 1f       	adc	r25, r25
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	67 e0       	ldi	r22, 0x07	; 7
    302e:	49 2f       	mov	r20, r25
    3030:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    3034:	83 e0       	ldi	r24, 0x03	; 3
    3036:	66 e0       	ldi	r22, 0x06	; 6
    3038:	41 e0       	ldi	r20, 0x01	; 1
    303a:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 e0       	ldi	r26, 0x00	; 0
    3044:	b0 e4       	ldi	r27, 0x40	; 64
    3046:	89 ab       	std	Y+49, r24	; 0x31
    3048:	9a ab       	std	Y+50, r25	; 0x32
    304a:	ab ab       	std	Y+51, r26	; 0x33
    304c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	69 a9       	ldd	r22, Y+49	; 0x31
    3050:	7a a9       	ldd	r23, Y+50	; 0x32
    3052:	8b a9       	ldd	r24, Y+51	; 0x33
    3054:	9c a9       	ldd	r25, Y+52	; 0x34
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8d a7       	std	Y+45, r24	; 0x2d
    3068:	9e a7       	std	Y+46, r25	; 0x2e
    306a:	af a7       	std	Y+47, r26	; 0x2f
    306c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    306e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3070:	7e a5       	ldd	r23, Y+46	; 0x2e
    3072:	8f a5       	ldd	r24, Y+47	; 0x2f
    3074:	98 a9       	ldd	r25, Y+48	; 0x30
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <LCD_voidSend_4bitCommand+0xdc>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9c a7       	std	Y+44, r25	; 0x2c
    308c:	8b a7       	std	Y+43, r24	; 0x2b
    308e:	3f c0       	rjmp	.+126    	; 0x310e <LCD_voidSend_4bitCommand+0x15a>
	else if (__tmp > 65535)
    3090:	6d a5       	ldd	r22, Y+45	; 0x2d
    3092:	7e a5       	ldd	r23, Y+46	; 0x2e
    3094:	8f a5       	ldd	r24, Y+47	; 0x2f
    3096:	98 a9       	ldd	r25, Y+48	; 0x30
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <LCD_voidSend_4bitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	69 a9       	ldd	r22, Y+49	; 0x31
    30aa:	7a a9       	ldd	r23, Y+50	; 0x32
    30ac:	8b a9       	ldd	r24, Y+51	; 0x33
    30ae:	9c a9       	ldd	r25, Y+52	; 0x34
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9c a7       	std	Y+44, r25	; 0x2c
    30ce:	8b a7       	std	Y+43, r24	; 0x2b
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <LCD_voidSend_4bitCommand+0x13c>
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9a a7       	std	Y+42, r25	; 0x2a
    30d8:	89 a7       	std	Y+41, r24	; 0x29
    30da:	89 a5       	ldd	r24, Y+41	; 0x29
    30dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <LCD_voidSend_4bitCommand+0x12a>
    30e2:	9a a7       	std	Y+42, r25	; 0x2a
    30e4:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9c a7       	std	Y+44, r25	; 0x2c
    30ee:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <LCD_voidSend_4bitCommand+0x11e>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <LCD_voidSend_4bitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    30fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9c a7       	std	Y+44, r25	; 0x2c
    310c:	8b a7       	std	Y+43, r24	; 0x2b
    310e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3110:	9c a5       	ldd	r25, Y+44	; 0x2c
    3112:	98 a7       	std	Y+40, r25	; 0x28
    3114:	8f a3       	std	Y+39, r24	; 0x27
    3116:	8f a1       	ldd	r24, Y+39	; 0x27
    3118:	98 a5       	ldd	r25, Y+40	; 0x28
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <LCD_voidSend_4bitCommand+0x166>
    311e:	98 a7       	std	Y+40, r25	; 0x28
    3120:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    3122:	83 e0       	ldi	r24, 0x03	; 3
    3124:	66 e0       	ldi	r22, 0x06	; 6
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a8 e4       	ldi	r26, 0x48	; 72
    3132:	b3 e4       	ldi	r27, 0x43	; 67
    3134:	8b a3       	std	Y+35, r24	; 0x23
    3136:	9c a3       	std	Y+36, r25	; 0x24
    3138:	ad a3       	std	Y+37, r26	; 0x25
    313a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    313c:	6b a1       	ldd	r22, Y+35	; 0x23
    313e:	7c a1       	ldd	r23, Y+36	; 0x24
    3140:	8d a1       	ldd	r24, Y+37	; 0x25
    3142:	9e a1       	ldd	r25, Y+38	; 0x26
    3144:	2b ea       	ldi	r18, 0xAB	; 171
    3146:	3a ea       	ldi	r19, 0xAA	; 170
    3148:	4a e2       	ldi	r20, 0x2A	; 42
    314a:	50 e4       	ldi	r21, 0x40	; 64
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8f 8f       	std	Y+31, r24	; 0x1f
    3156:	98 a3       	std	Y+32, r25	; 0x20
    3158:	a9 a3       	std	Y+33, r26	; 0x21
    315a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    315c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    315e:	78 a1       	ldd	r23, Y+32	; 0x20
    3160:	89 a1       	ldd	r24, Y+33	; 0x21
    3162:	9a a1       	ldd	r25, Y+34	; 0x22
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	1c f4       	brge	.+6      	; 0x317a <LCD_voidSend_4bitCommand+0x1c6>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	8e 8f       	std	Y+30, r24	; 0x1e
    3178:	91 c0       	rjmp	.+290    	; 0x329c <LCD_voidSend_4bitCommand+0x2e8>
	else if (__tmp > 255)
    317a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    317c:	78 a1       	ldd	r23, Y+32	; 0x20
    317e:	89 a1       	ldd	r24, Y+33	; 0x21
    3180:	9a a1       	ldd	r25, Y+34	; 0x22
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	53 e4       	ldi	r21, 0x43	; 67
    318a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	0c f0       	brlt	.+2      	; 0x3194 <LCD_voidSend_4bitCommand+0x1e0>
    3192:	7b c0       	rjmp	.+246    	; 0x328a <LCD_voidSend_4bitCommand+0x2d6>
	{
		_delay_ms(__us / 1000.0);
    3194:	6b a1       	ldd	r22, Y+35	; 0x23
    3196:	7c a1       	ldd	r23, Y+36	; 0x24
    3198:	8d a1       	ldd	r24, Y+37	; 0x25
    319a:	9e a1       	ldd	r25, Y+38	; 0x26
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a e7       	ldi	r20, 0x7A	; 122
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8a 8f       	std	Y+26, r24	; 0x1a
    31ae:	9b 8f       	std	Y+27, r25	; 0x1b
    31b0:	ac 8f       	std	Y+28, r26	; 0x1c
    31b2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    31b6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    31b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a ef       	ldi	r20, 0xFA	; 250
    31c2:	54 e4       	ldi	r21, 0x44	; 68
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	8e 8b       	std	Y+22, r24	; 0x16
    31ce:	9f 8b       	std	Y+23, r25	; 0x17
    31d0:	a8 8f       	std	Y+24, r26	; 0x18
    31d2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    31d4:	6e 89       	ldd	r22, Y+22	; 0x16
    31d6:	7f 89       	ldd	r23, Y+23	; 0x17
    31d8:	88 8d       	ldd	r24, Y+24	; 0x18
    31da:	99 8d       	ldd	r25, Y+25	; 0x19
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	5f e3       	ldi	r21, 0x3F	; 63
    31e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e8:	88 23       	and	r24, r24
    31ea:	2c f4       	brge	.+10     	; 0x31f6 <LCD_voidSend_4bitCommand+0x242>
		__ticks = 1;
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9d 8b       	std	Y+21, r25	; 0x15
    31f2:	8c 8b       	std	Y+20, r24	; 0x14
    31f4:	3f c0       	rjmp	.+126    	; 0x3274 <LCD_voidSend_4bitCommand+0x2c0>
	else if (__tmp > 65535)
    31f6:	6e 89       	ldd	r22, Y+22	; 0x16
    31f8:	7f 89       	ldd	r23, Y+23	; 0x17
    31fa:	88 8d       	ldd	r24, Y+24	; 0x18
    31fc:	99 8d       	ldd	r25, Y+25	; 0x19
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	3f ef       	ldi	r19, 0xFF	; 255
    3202:	4f e7       	ldi	r20, 0x7F	; 127
    3204:	57 e4       	ldi	r21, 0x47	; 71
    3206:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    320a:	18 16       	cp	r1, r24
    320c:	4c f5       	brge	.+82     	; 0x3260 <LCD_voidSend_4bitCommand+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3210:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3212:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3214:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e2       	ldi	r20, 0x20	; 32
    321c:	51 e4       	ldi	r21, 0x41	; 65
    321e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9d 8b       	std	Y+21, r25	; 0x15
    3234:	8c 8b       	std	Y+20, r24	; 0x14
    3236:	0f c0       	rjmp	.+30     	; 0x3256 <LCD_voidSend_4bitCommand+0x2a2>
    3238:	88 ec       	ldi	r24, 0xC8	; 200
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9b 8b       	std	Y+19, r25	; 0x13
    323e:	8a 8b       	std	Y+18, r24	; 0x12
    3240:	8a 89       	ldd	r24, Y+18	; 0x12
    3242:	9b 89       	ldd	r25, Y+19	; 0x13
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_voidSend_4bitCommand+0x290>
    3248:	9b 8b       	std	Y+19, r25	; 0x13
    324a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	8c 89       	ldd	r24, Y+20	; 0x14
    324e:	9d 89       	ldd	r25, Y+21	; 0x15
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	9d 8b       	std	Y+21, r25	; 0x15
    3254:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	8c 89       	ldd	r24, Y+20	; 0x14
    3258:	9d 89       	ldd	r25, Y+21	; 0x15
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	69 f7       	brne	.-38     	; 0x3238 <LCD_voidSend_4bitCommand+0x284>
    325e:	24 c0       	rjmp	.+72     	; 0x32a8 <LCD_voidSend_4bitCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3260:	6e 89       	ldd	r22, Y+22	; 0x16
    3262:	7f 89       	ldd	r23, Y+23	; 0x17
    3264:	88 8d       	ldd	r24, Y+24	; 0x18
    3266:	99 8d       	ldd	r25, Y+25	; 0x19
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9d 8b       	std	Y+21, r25	; 0x15
    3272:	8c 8b       	std	Y+20, r24	; 0x14
    3274:	8c 89       	ldd	r24, Y+20	; 0x14
    3276:	9d 89       	ldd	r25, Y+21	; 0x15
    3278:	99 8b       	std	Y+17, r25	; 0x11
    327a:	88 8b       	std	Y+16, r24	; 0x10
    327c:	88 89       	ldd	r24, Y+16	; 0x10
    327e:	99 89       	ldd	r25, Y+17	; 0x11
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <LCD_voidSend_4bitCommand+0x2cc>
    3284:	99 8b       	std	Y+17, r25	; 0x11
    3286:	88 8b       	std	Y+16, r24	; 0x10
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <LCD_voidSend_4bitCommand+0x2f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    328a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    328c:	78 a1       	ldd	r23, Y+32	; 0x20
    328e:	89 a1       	ldd	r24, Y+33	; 0x21
    3290:	9a a1       	ldd	r25, Y+34	; 0x22
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	8e 8f       	std	Y+30, r24	; 0x1e
    329c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    329e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a2:	8a 95       	dec	r24
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_voidSend_4bitCommand+0x2ee>
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
		/*///////////////////////////////////////////////////////////////////////////////////*/
		_delay_us(200);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    32a8:	83 e0       	ldi	r24, 0x03	; 3
    32aa:	64 e0       	ldi	r22, 0x04	; 4
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    32b2:	83 e0       	ldi	r24, 0x03	; 3
    32b4:	65 e0       	ldi	r22, 0x05	; 5
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,0));
    32bc:	8d a9       	ldd	r24, Y+53	; 0x35
    32be:	98 2f       	mov	r25, r24
    32c0:	91 70       	andi	r25, 0x01	; 1
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	64 e0       	ldi	r22, 0x04	; 4
    32c6:	49 2f       	mov	r20, r25
    32c8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,1));
    32cc:	8d a9       	ldd	r24, Y+53	; 0x35
    32ce:	86 95       	lsr	r24
    32d0:	98 2f       	mov	r25, r24
    32d2:	91 70       	andi	r25, 0x01	; 1
    32d4:	82 e0       	ldi	r24, 0x02	; 2
    32d6:	65 e0       	ldi	r22, 0x05	; 5
    32d8:	49 2f       	mov	r20, r25
    32da:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,2));
    32de:	8d a9       	ldd	r24, Y+53	; 0x35
    32e0:	86 95       	lsr	r24
    32e2:	86 95       	lsr	r24
    32e4:	98 2f       	mov	r25, r24
    32e6:	91 70       	andi	r25, 0x01	; 1
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	66 e0       	ldi	r22, 0x06	; 6
    32ec:	49 2f       	mov	r20, r25
    32ee:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,3));
    32f2:	8d a9       	ldd	r24, Y+53	; 0x35
    32f4:	86 95       	lsr	r24
    32f6:	86 95       	lsr	r24
    32f8:	86 95       	lsr	r24
    32fa:	98 2f       	mov	r25, r24
    32fc:	91 70       	andi	r25, 0x01	; 1
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	67 e0       	ldi	r22, 0x07	; 7
    3302:	49 2f       	mov	r20, r25
    3304:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    3308:	83 e0       	ldi	r24, 0x03	; 3
    330a:	66 e0       	ldi	r22, 0x06	; 6
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	a0 e0       	ldi	r26, 0x00	; 0
    3318:	b0 e4       	ldi	r27, 0x40	; 64
    331a:	8b 87       	std	Y+11, r24	; 0x0b
    331c:	9c 87       	std	Y+12, r25	; 0x0c
    331e:	ad 87       	std	Y+13, r26	; 0x0d
    3320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3322:	6b 85       	ldd	r22, Y+11	; 0x0b
    3324:	7c 85       	ldd	r23, Y+12	; 0x0c
    3326:	8d 85       	ldd	r24, Y+13	; 0x0d
    3328:	9e 85       	ldd	r25, Y+14	; 0x0e
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a ef       	ldi	r20, 0xFA	; 250
    3330:	54 e4       	ldi	r21, 0x44	; 68
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	8f 83       	std	Y+7, r24	; 0x07
    333c:	98 87       	std	Y+8, r25	; 0x08
    333e:	a9 87       	std	Y+9, r26	; 0x09
    3340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3342:	6f 81       	ldd	r22, Y+7	; 0x07
    3344:	78 85       	ldd	r23, Y+8	; 0x08
    3346:	89 85       	ldd	r24, Y+9	; 0x09
    3348:	9a 85       	ldd	r25, Y+10	; 0x0a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e8       	ldi	r20, 0x80	; 128
    3350:	5f e3       	ldi	r21, 0x3F	; 63
    3352:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3356:	88 23       	and	r24, r24
    3358:	2c f4       	brge	.+10     	; 0x3364 <LCD_voidSend_4bitCommand+0x3b0>
		__ticks = 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	3f c0       	rjmp	.+126    	; 0x33e2 <LCD_voidSend_4bitCommand+0x42e>
	else if (__tmp > 65535)
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	3f ef       	ldi	r19, 0xFF	; 255
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	57 e4       	ldi	r21, 0x47	; 71
    3374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3378:	18 16       	cp	r1, r24
    337a:	4c f5       	brge	.+82     	; 0x33ce <LCD_voidSend_4bitCommand+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337c:	6b 85       	ldd	r22, Y+11	; 0x0b
    337e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3380:	8d 85       	ldd	r24, Y+13	; 0x0d
    3382:	9e 85       	ldd	r25, Y+14	; 0x0e
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e2       	ldi	r20, 0x20	; 32
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9e 83       	std	Y+6, r25	; 0x06
    33a2:	8d 83       	std	Y+5, r24	; 0x05
    33a4:	0f c0       	rjmp	.+30     	; 0x33c4 <LCD_voidSend_4bitCommand+0x410>
    33a6:	88 ec       	ldi	r24, 0xC8	; 200
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9c 83       	std	Y+4, r25	; 0x04
    33ac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <LCD_voidSend_4bitCommand+0x3fe>
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	69 f7       	brne	.-38     	; 0x33a6 <LCD_voidSend_4bitCommand+0x3f2>
    33cc:	14 c0       	rjmp	.+40     	; 0x33f6 <LCD_voidSend_4bitCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ce:	6f 81       	ldd	r22, Y+7	; 0x07
    33d0:	78 85       	ldd	r23, Y+8	; 0x08
    33d2:	89 85       	ldd	r24, Y+9	; 0x09
    33d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_voidSend_4bitCommand+0x43a>
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	66 e0       	ldi	r22, 0x06	; 6
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
}
    3400:	e5 96       	adiw	r28, 0x35	; 53
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <LCD_4bitIntialization>:

extern void LCD_4bitIntialization (void)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	2e 97       	sbiw	r28, 0x0e	; 14
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	64 e0       	ldi	r22, 0x04	; 4
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	41 e0       	ldi	r20, 0x01	; 1
    3436:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    343a:	83 e0       	ldi	r24, 0x03	; 3
    343c:	66 e0       	ldi	r22, 0x06	; 6
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN4,DIO_OUTPUT);
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	64 e0       	ldi	r22, 0x04	; 4
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN5,DIO_OUTPUT);
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	65 e0       	ldi	r22, 0x05	; 5
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN6,DIO_OUTPUT);
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	66 e0       	ldi	r22, 0x06	; 6
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN7,DIO_OUTPUT);
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	67 e0       	ldi	r22, 0x07	; 7
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	0e 94 43 0a 	call	0x1486	; 0x1486 <DIO_voidSetPinDirection>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a0 ea       	ldi	r26, 0xA0	; 160
    3472:	b1 e4       	ldi	r27, 0x41	; 65
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a ef       	ldi	r20, 0xFA	; 250
    348a:	54 e4       	ldi	r21, 0x44	; 68
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	98 87       	std	Y+8, r25	; 0x08
    3498:	a9 87       	std	Y+9, r26	; 0x09
    349a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <LCD_4bitIntialization+0xac>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <LCD_4bitIntialization+0x12a>
	else if (__tmp > 65535)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <LCD_4bitIntialization+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <LCD_4bitIntialization+0x10c>
    3500:	88 ec       	ldi	r24, 0xC8	; 200
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <LCD_4bitIntialization+0xfa>
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <LCD_4bitIntialization+0xee>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <LCD_4bitIntialization+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <LCD_4bitIntialization+0x136>
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

		LCD_voidSend_4bitCommand(0x33);
    3550:	83 e3       	ldi	r24, 0x33	; 51
    3552:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    3556:	82 e3       	ldi	r24, 0x32	; 50
    3558:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    355c:	88 e2       	ldi	r24, 0x28	; 40
    355e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x0c);	/* Display on cursor off */
    3562:	8c e0       	ldi	r24, 0x0C	; 12
    3564:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x06);	/* Increment cursor (shift cursor to right) */
    3568:	86 e0       	ldi	r24, 0x06	; 6
    356a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x01);	/* Clear display screen */
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
}
    3574:	2e 96       	adiw	r28, 0x0e	; 14
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <LCD_voidSend_4bitData>:


extern void LCD_voidSend_4bitData (u8 copy_u8data)
{
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	e5 97       	sbiw	r28, 0x35	; 53
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	8d ab       	std	Y+53, r24	; 0x35
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,4));
    359c:	8d a9       	ldd	r24, Y+53	; 0x35
    359e:	82 95       	swap	r24
    35a0:	8f 70       	andi	r24, 0x0F	; 15
    35a2:	98 2f       	mov	r25, r24
    35a4:	91 70       	andi	r25, 0x01	; 1
    35a6:	82 e0       	ldi	r24, 0x02	; 2
    35a8:	64 e0       	ldi	r22, 0x04	; 4
    35aa:	49 2f       	mov	r20, r25
    35ac:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,5));
    35b0:	8d a9       	ldd	r24, Y+53	; 0x35
    35b2:	82 95       	swap	r24
    35b4:	86 95       	lsr	r24
    35b6:	87 70       	andi	r24, 0x07	; 7
    35b8:	98 2f       	mov	r25, r24
    35ba:	91 70       	andi	r25, 0x01	; 1
    35bc:	82 e0       	ldi	r24, 0x02	; 2
    35be:	65 e0       	ldi	r22, 0x05	; 5
    35c0:	49 2f       	mov	r20, r25
    35c2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,6));
    35c6:	8d a9       	ldd	r24, Y+53	; 0x35
    35c8:	82 95       	swap	r24
    35ca:	86 95       	lsr	r24
    35cc:	86 95       	lsr	r24
    35ce:	83 70       	andi	r24, 0x03	; 3
    35d0:	98 2f       	mov	r25, r24
    35d2:	91 70       	andi	r25, 0x01	; 1
    35d4:	82 e0       	ldi	r24, 0x02	; 2
    35d6:	66 e0       	ldi	r22, 0x06	; 6
    35d8:	49 2f       	mov	r20, r25
    35da:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,7));
    35de:	8d a9       	ldd	r24, Y+53	; 0x35
    35e0:	98 2f       	mov	r25, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	99 27       	eor	r25, r25
    35e6:	99 1f       	adc	r25, r25
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	67 e0       	ldi	r22, 0x07	; 7
    35ec:	49 2f       	mov	r20, r25
    35ee:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
    35f2:	83 e0       	ldi	r24, 0x03	; 3
    35f4:	64 e0       	ldi	r22, 0x04	; 4
    35f6:	41 e0       	ldi	r20, 0x01	; 1
    35f8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    35fc:	83 e0       	ldi	r24, 0x03	; 3
    35fe:	66 e0       	ldi	r22, 0x06	; 6
    3600:	41 e0       	ldi	r20, 0x01	; 1
    3602:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
    360c:	b0 e4       	ldi	r27, 0x40	; 64
    360e:	89 ab       	std	Y+49, r24	; 0x31
    3610:	9a ab       	std	Y+50, r25	; 0x32
    3612:	ab ab       	std	Y+51, r26	; 0x33
    3614:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	69 a9       	ldd	r22, Y+49	; 0x31
    3618:	7a a9       	ldd	r23, Y+50	; 0x32
    361a:	8b a9       	ldd	r24, Y+51	; 0x33
    361c:	9c a9       	ldd	r25, Y+52	; 0x34
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	4a ef       	ldi	r20, 0xFA	; 250
    3624:	54 e4       	ldi	r21, 0x44	; 68
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	8d a7       	std	Y+45, r24	; 0x2d
    3630:	9e a7       	std	Y+46, r25	; 0x2e
    3632:	af a7       	std	Y+47, r26	; 0x2f
    3634:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3636:	6d a5       	ldd	r22, Y+45	; 0x2d
    3638:	7e a5       	ldd	r23, Y+46	; 0x2e
    363a:	8f a5       	ldd	r24, Y+47	; 0x2f
    363c:	98 a9       	ldd	r25, Y+48	; 0x30
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <LCD_voidSend_4bitData+0xd2>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9c a7       	std	Y+44, r25	; 0x2c
    3654:	8b a7       	std	Y+43, r24	; 0x2b
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <LCD_voidSend_4bitData+0x150>
	else if (__tmp > 65535)
    3658:	6d a5       	ldd	r22, Y+45	; 0x2d
    365a:	7e a5       	ldd	r23, Y+46	; 0x2e
    365c:	8f a5       	ldd	r24, Y+47	; 0x2f
    365e:	98 a9       	ldd	r25, Y+48	; 0x30
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <LCD_voidSend_4bitData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	69 a9       	ldd	r22, Y+49	; 0x31
    3672:	7a a9       	ldd	r23, Y+50	; 0x32
    3674:	8b a9       	ldd	r24, Y+51	; 0x33
    3676:	9c a9       	ldd	r25, Y+52	; 0x34
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9c a7       	std	Y+44, r25	; 0x2c
    3696:	8b a7       	std	Y+43, r24	; 0x2b
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <LCD_voidSend_4bitData+0x132>
    369a:	88 ec       	ldi	r24, 0xC8	; 200
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9a a7       	std	Y+42, r25	; 0x2a
    36a0:	89 a7       	std	Y+41, r24	; 0x29
    36a2:	89 a5       	ldd	r24, Y+41	; 0x29
    36a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <LCD_voidSend_4bitData+0x120>
    36aa:	9a a7       	std	Y+42, r25	; 0x2a
    36ac:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    36b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9c a7       	std	Y+44, r25	; 0x2c
    36b6:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <LCD_voidSend_4bitData+0x114>
    36c0:	14 c0       	rjmp	.+40     	; 0x36ea <LCD_voidSend_4bitData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	6d a5       	ldd	r22, Y+45	; 0x2d
    36c4:	7e a5       	ldd	r23, Y+46	; 0x2e
    36c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c8:	98 a9       	ldd	r25, Y+48	; 0x30
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9c a7       	std	Y+44, r25	; 0x2c
    36d4:	8b a7       	std	Y+43, r24	; 0x2b
    36d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    36d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    36da:	98 a7       	std	Y+40, r25	; 0x28
    36dc:	8f a3       	std	Y+39, r24	; 0x27
    36de:	8f a1       	ldd	r24, Y+39	; 0x27
    36e0:	98 a5       	ldd	r25, Y+40	; 0x28
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <LCD_voidSend_4bitData+0x15c>
    36e6:	98 a7       	std	Y+40, r25	; 0x28
    36e8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    36ea:	83 e0       	ldi	r24, 0x03	; 3
    36ec:	66 e0       	ldi	r22, 0x06	; 6
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	a8 e4       	ldi	r26, 0x48	; 72
    36fa:	b3 e4       	ldi	r27, 0x43	; 67
    36fc:	8b a3       	std	Y+35, r24	; 0x23
    36fe:	9c a3       	std	Y+36, r25	; 0x24
    3700:	ad a3       	std	Y+37, r26	; 0x25
    3702:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3704:	6b a1       	ldd	r22, Y+35	; 0x23
    3706:	7c a1       	ldd	r23, Y+36	; 0x24
    3708:	8d a1       	ldd	r24, Y+37	; 0x25
    370a:	9e a1       	ldd	r25, Y+38	; 0x26
    370c:	2b ea       	ldi	r18, 0xAB	; 171
    370e:	3a ea       	ldi	r19, 0xAA	; 170
    3710:	4a e2       	ldi	r20, 0x2A	; 42
    3712:	50 e4       	ldi	r21, 0x40	; 64
    3714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	8f 8f       	std	Y+31, r24	; 0x1f
    371e:	98 a3       	std	Y+32, r25	; 0x20
    3720:	a9 a3       	std	Y+33, r26	; 0x21
    3722:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3724:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3726:	78 a1       	ldd	r23, Y+32	; 0x20
    3728:	89 a1       	ldd	r24, Y+33	; 0x21
    372a:	9a a1       	ldd	r25, Y+34	; 0x22
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e8       	ldi	r20, 0x80	; 128
    3732:	5f e3       	ldi	r21, 0x3F	; 63
    3734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3738:	88 23       	and	r24, r24
    373a:	1c f4       	brge	.+6      	; 0x3742 <LCD_voidSend_4bitData+0x1bc>
		__ticks = 1;
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	8e 8f       	std	Y+30, r24	; 0x1e
    3740:	91 c0       	rjmp	.+290    	; 0x3864 <LCD_voidSend_4bitData+0x2de>
	else if (__tmp > 255)
    3742:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3744:	78 a1       	ldd	r23, Y+32	; 0x20
    3746:	89 a1       	ldd	r24, Y+33	; 0x21
    3748:	9a a1       	ldd	r25, Y+34	; 0x22
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	53 e4       	ldi	r21, 0x43	; 67
    3752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	0c f0       	brlt	.+2      	; 0x375c <LCD_voidSend_4bitData+0x1d6>
    375a:	7b c0       	rjmp	.+246    	; 0x3852 <LCD_voidSend_4bitData+0x2cc>
	{
		_delay_ms(__us / 1000.0);
    375c:	6b a1       	ldd	r22, Y+35	; 0x23
    375e:	7c a1       	ldd	r23, Y+36	; 0x24
    3760:	8d a1       	ldd	r24, Y+37	; 0x25
    3762:	9e a1       	ldd	r25, Y+38	; 0x26
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a e7       	ldi	r20, 0x7A	; 122
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	8a 8f       	std	Y+26, r24	; 0x1a
    3776:	9b 8f       	std	Y+27, r25	; 0x1b
    3778:	ac 8f       	std	Y+28, r26	; 0x1c
    377a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    377e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3780:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3782:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	4a ef       	ldi	r20, 0xFA	; 250
    378a:	54 e4       	ldi	r21, 0x44	; 68
    378c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	8e 8b       	std	Y+22, r24	; 0x16
    3796:	9f 8b       	std	Y+23, r25	; 0x17
    3798:	a8 8f       	std	Y+24, r26	; 0x18
    379a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    379c:	6e 89       	ldd	r22, Y+22	; 0x16
    379e:	7f 89       	ldd	r23, Y+23	; 0x17
    37a0:	88 8d       	ldd	r24, Y+24	; 0x18
    37a2:	99 8d       	ldd	r25, Y+25	; 0x19
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e8       	ldi	r20, 0x80	; 128
    37aa:	5f e3       	ldi	r21, 0x3F	; 63
    37ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b0:	88 23       	and	r24, r24
    37b2:	2c f4       	brge	.+10     	; 0x37be <LCD_voidSend_4bitData+0x238>
		__ticks = 1;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9d 8b       	std	Y+21, r25	; 0x15
    37ba:	8c 8b       	std	Y+20, r24	; 0x14
    37bc:	3f c0       	rjmp	.+126    	; 0x383c <LCD_voidSend_4bitData+0x2b6>
	else if (__tmp > 65535)
    37be:	6e 89       	ldd	r22, Y+22	; 0x16
    37c0:	7f 89       	ldd	r23, Y+23	; 0x17
    37c2:	88 8d       	ldd	r24, Y+24	; 0x18
    37c4:	99 8d       	ldd	r25, Y+25	; 0x19
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	3f ef       	ldi	r19, 0xFF	; 255
    37ca:	4f e7       	ldi	r20, 0x7F	; 127
    37cc:	57 e4       	ldi	r21, 0x47	; 71
    37ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d2:	18 16       	cp	r1, r24
    37d4:	4c f5       	brge	.+82     	; 0x3828 <LCD_voidSend_4bitData+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    37d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    37da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e2       	ldi	r20, 0x20	; 32
    37e4:	51 e4       	ldi	r21, 0x41	; 65
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9d 8b       	std	Y+21, r25	; 0x15
    37fc:	8c 8b       	std	Y+20, r24	; 0x14
    37fe:	0f c0       	rjmp	.+30     	; 0x381e <LCD_voidSend_4bitData+0x298>
    3800:	88 ec       	ldi	r24, 0xC8	; 200
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9b 8b       	std	Y+19, r25	; 0x13
    3806:	8a 8b       	std	Y+18, r24	; 0x12
    3808:	8a 89       	ldd	r24, Y+18	; 0x12
    380a:	9b 89       	ldd	r25, Y+19	; 0x13
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	f1 f7       	brne	.-4      	; 0x380c <LCD_voidSend_4bitData+0x286>
    3810:	9b 8b       	std	Y+19, r25	; 0x13
    3812:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	8c 89       	ldd	r24, Y+20	; 0x14
    3816:	9d 89       	ldd	r25, Y+21	; 0x15
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	9d 8b       	std	Y+21, r25	; 0x15
    381c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381e:	8c 89       	ldd	r24, Y+20	; 0x14
    3820:	9d 89       	ldd	r25, Y+21	; 0x15
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	69 f7       	brne	.-38     	; 0x3800 <LCD_voidSend_4bitData+0x27a>
    3826:	24 c0       	rjmp	.+72     	; 0x3870 <LCD_voidSend_4bitData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3828:	6e 89       	ldd	r22, Y+22	; 0x16
    382a:	7f 89       	ldd	r23, Y+23	; 0x17
    382c:	88 8d       	ldd	r24, Y+24	; 0x18
    382e:	99 8d       	ldd	r25, Y+25	; 0x19
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9d 8b       	std	Y+21, r25	; 0x15
    383a:	8c 8b       	std	Y+20, r24	; 0x14
    383c:	8c 89       	ldd	r24, Y+20	; 0x14
    383e:	9d 89       	ldd	r25, Y+21	; 0x15
    3840:	99 8b       	std	Y+17, r25	; 0x11
    3842:	88 8b       	std	Y+16, r24	; 0x10
    3844:	88 89       	ldd	r24, Y+16	; 0x10
    3846:	99 89       	ldd	r25, Y+17	; 0x11
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <LCD_voidSend_4bitData+0x2c2>
    384c:	99 8b       	std	Y+17, r25	; 0x11
    384e:	88 8b       	std	Y+16, r24	; 0x10
    3850:	0f c0       	rjmp	.+30     	; 0x3870 <LCD_voidSend_4bitData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3852:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3854:	78 a1       	ldd	r23, Y+32	; 0x20
    3856:	89 a1       	ldd	r24, Y+33	; 0x21
    3858:	9a a1       	ldd	r25, Y+34	; 0x22
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	8e 8f       	std	Y+30, r24	; 0x1e
    3864:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3866:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3868:	8f 85       	ldd	r24, Y+15	; 0x0f
    386a:	8a 95       	dec	r24
    386c:	f1 f7       	brne	.-4      	; 0x386a <LCD_voidSend_4bitData+0x2e4>
    386e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(200);
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,0));
    3870:	8d a9       	ldd	r24, Y+53	; 0x35
    3872:	98 2f       	mov	r25, r24
    3874:	91 70       	andi	r25, 0x01	; 1
    3876:	82 e0       	ldi	r24, 0x02	; 2
    3878:	64 e0       	ldi	r22, 0x04	; 4
    387a:	49 2f       	mov	r20, r25
    387c:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,1));
    3880:	8d a9       	ldd	r24, Y+53	; 0x35
    3882:	86 95       	lsr	r24
    3884:	98 2f       	mov	r25, r24
    3886:	91 70       	andi	r25, 0x01	; 1
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	65 e0       	ldi	r22, 0x05	; 5
    388c:	49 2f       	mov	r20, r25
    388e:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,2));
    3892:	8d a9       	ldd	r24, Y+53	; 0x35
    3894:	86 95       	lsr	r24
    3896:	86 95       	lsr	r24
    3898:	98 2f       	mov	r25, r24
    389a:	91 70       	andi	r25, 0x01	; 1
    389c:	82 e0       	ldi	r24, 0x02	; 2
    389e:	66 e0       	ldi	r22, 0x06	; 6
    38a0:	49 2f       	mov	r20, r25
    38a2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,3));
    38a6:	8d a9       	ldd	r24, Y+53	; 0x35
    38a8:	86 95       	lsr	r24
    38aa:	86 95       	lsr	r24
    38ac:	86 95       	lsr	r24
    38ae:	98 2f       	mov	r25, r24
    38b0:	91 70       	andi	r25, 0x01	; 1
    38b2:	82 e0       	ldi	r24, 0x02	; 2
    38b4:	67 e0       	ldi	r22, 0x07	; 7
    38b6:	49 2f       	mov	r20, r25
    38b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	66 e0       	ldi	r22, 0x06	; 6
    38c0:	41 e0       	ldi	r20, 0x01	; 1
    38c2:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	a0 e0       	ldi	r26, 0x00	; 0
    38cc:	b0 e4       	ldi	r27, 0x40	; 64
    38ce:	8b 87       	std	Y+11, r24	; 0x0b
    38d0:	9c 87       	std	Y+12, r25	; 0x0c
    38d2:	ad 87       	std	Y+13, r26	; 0x0d
    38d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38da:	8d 85       	ldd	r24, Y+13	; 0x0d
    38dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	4a ef       	ldi	r20, 0xFA	; 250
    38e4:	54 e4       	ldi	r21, 0x44	; 68
    38e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8f 83       	std	Y+7, r24	; 0x07
    38f0:	98 87       	std	Y+8, r25	; 0x08
    38f2:	a9 87       	std	Y+9, r26	; 0x09
    38f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38f6:	6f 81       	ldd	r22, Y+7	; 0x07
    38f8:	78 85       	ldd	r23, Y+8	; 0x08
    38fa:	89 85       	ldd	r24, Y+9	; 0x09
    38fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	40 e8       	ldi	r20, 0x80	; 128
    3904:	5f e3       	ldi	r21, 0x3F	; 63
    3906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    390a:	88 23       	and	r24, r24
    390c:	2c f4       	brge	.+10     	; 0x3918 <LCD_voidSend_4bitData+0x392>
		__ticks = 1;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	9e 83       	std	Y+6, r25	; 0x06
    3914:	8d 83       	std	Y+5, r24	; 0x05
    3916:	3f c0       	rjmp	.+126    	; 0x3996 <LCD_voidSend_4bitData+0x410>
	else if (__tmp > 65535)
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	3f ef       	ldi	r19, 0xFF	; 255
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	57 e4       	ldi	r21, 0x47	; 71
    3928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	4c f5       	brge	.+82     	; 0x3982 <LCD_voidSend_4bitData+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3930:	6b 85       	ldd	r22, Y+11	; 0x0b
    3932:	7c 85       	ldd	r23, Y+12	; 0x0c
    3934:	8d 85       	ldd	r24, Y+13	; 0x0d
    3936:	9e 85       	ldd	r25, Y+14	; 0x0e
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e2       	ldi	r20, 0x20	; 32
    393e:	51 e4       	ldi	r21, 0x41	; 65
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	0f c0       	rjmp	.+30     	; 0x3978 <LCD_voidSend_4bitData+0x3f2>
    395a:	88 ec       	ldi	r24, 0xC8	; 200
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9c 83       	std	Y+4, r25	; 0x04
    3960:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <LCD_voidSend_4bitData+0x3e0>
    396a:	9c 83       	std	Y+4, r25	; 0x04
    396c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396e:	8d 81       	ldd	r24, Y+5	; 0x05
    3970:	9e 81       	ldd	r25, Y+6	; 0x06
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	69 f7       	brne	.-38     	; 0x395a <LCD_voidSend_4bitData+0x3d4>
    3980:	14 c0       	rjmp	.+40     	; 0x39aa <LCD_voidSend_4bitData+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3982:	6f 81       	ldd	r22, Y+7	; 0x07
    3984:	78 85       	ldd	r23, Y+8	; 0x08
    3986:	89 85       	ldd	r24, Y+9	; 0x09
    3988:	9a 85       	ldd	r25, Y+10	; 0x0a
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9e 83       	std	Y+6, r25	; 0x06
    3994:	8d 83       	std	Y+5, r24	; 0x05
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	9a 81       	ldd	r25, Y+2	; 0x02
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <LCD_voidSend_4bitData+0x41c>
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    39aa:	83 e0       	ldi	r24, 0x03	; 3
    39ac:	66 e0       	ldi	r22, 0x06	; 6
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	0e 94 3d 0b 	call	0x167a	; 0x167a <DIO_voidSetPinValue>
}
    39b4:	e5 96       	adiw	r28, 0x35	; 53
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <LCD_voidSend_4bitString>:


void LCD_voidSend_4bitString (char *copy_ptrString)
{
    39c6:	df 93       	push	r29
    39c8:	cf 93       	push	r28
    39ca:	00 d0       	rcall	.+0      	; 0x39cc <LCD_voidSend_4bitString+0x6>
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	9a 83       	std	Y+2, r25	; 0x02
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	0b c0       	rjmp	.+22     	; 0x39ec <LCD_voidSend_4bitString+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
    39d6:	e9 81       	ldd	r30, Y+1	; 0x01
    39d8:	fa 81       	ldd	r31, Y+2	; 0x02
    39da:	20 81       	ld	r18, Z
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	9a 81       	ldd	r25, Y+2	; 0x02
    39e0:	01 96       	adiw	r24, 0x01	; 1
    39e2:	9a 83       	std	Y+2, r25	; 0x02
    39e4:	89 83       	std	Y+1, r24	; 0x01
    39e6:	82 2f       	mov	r24, r18
    39e8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <LCD_voidSend_4bitData>
}


void LCD_voidSend_4bitString (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    39ec:	e9 81       	ldd	r30, Y+1	; 0x01
    39ee:	fa 81       	ldd	r31, Y+2	; 0x02
    39f0:	80 81       	ld	r24, Z
    39f2:	88 23       	and	r24, r24
    39f4:	81 f7       	brne	.-32     	; 0x39d6 <LCD_voidSend_4bitString+0x10>
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
	}
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	08 95       	ret

00003a00 <LCD_void4bitDisplayNumber>:

extern void LCD_void4bitDisplayNumber(u32 x)
{
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	28 97       	sbiw	r28, 0x08	; 8
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	6d 83       	std	Y+5, r22	; 0x05
    3a1e:	7e 83       	std	Y+6, r23	; 0x06
    3a20:	8f 83       	std	Y+7, r24	; 0x07
    3a22:	98 87       	std	Y+8, r25	; 0x08
	u32 y = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	a0 e0       	ldi	r26, 0x00	; 0
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	9a 83       	std	Y+2, r25	; 0x02
    3a30:	ab 83       	std	Y+3, r26	; 0x03
    3a32:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
    3a34:	8d 81       	ldd	r24, Y+5	; 0x05
    3a36:	9e 81       	ldd	r25, Y+6	; 0x06
    3a38:	af 81       	ldd	r26, Y+7	; 0x07
    3a3a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	a1 05       	cpc	r26, r1
    3a40:	b1 05       	cpc	r27, r1
    3a42:	d1 f5       	brne	.+116    	; 0x3ab8 <LCD_void4bitDisplayNumber+0xb8>
	{
		LCD_voidSend_4bitData('0');
    3a44:	80 e3       	ldi	r24, 0x30	; 48
    3a46:	0e 94 c3 1a 	call	0x3586	; 0x3586 <LCD_voidSend_4bitData>
    3a4a:	36 c0       	rjmp	.+108    	; 0x3ab8 <LCD_void4bitDisplayNumber+0xb8>
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a50:	ab 81       	ldd	r26, Y+3	; 0x03
    3a52:	bc 81       	ldd	r27, Y+4	; 0x04
    3a54:	2a e0       	ldi	r18, 0x0A	; 10
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 4a 20 	call	0x4094	; 0x4094 <__mulsi3>
    3a64:	7b 01       	movw	r14, r22
    3a66:	8c 01       	movw	r16, r24
    3a68:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6c:	af 81       	ldd	r26, Y+7	; 0x07
    3a6e:	b8 85       	ldd	r27, Y+8	; 0x08
    3a70:	2a e0       	ldi	r18, 0x0A	; 10
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	8e 0d       	add	r24, r14
    3a86:	9f 1d       	adc	r25, r15
    3a88:	a0 1f       	adc	r26, r16
    3a8a:	b1 1f       	adc	r27, r17
    3a8c:	89 83       	std	Y+1, r24	; 0x01
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	ab 83       	std	Y+3, r26	; 0x03
    3a92:	bc 83       	std	Y+4, r27	; 0x04
		x = (x / 10);
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	af 81       	ldd	r26, Y+7	; 0x07
    3a9a:	b8 85       	ldd	r27, Y+8	; 0x08
    3a9c:	2a e0       	ldi	r18, 0x0A	; 10
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	40 e0       	ldi	r20, 0x00	; 0
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    3aac:	da 01       	movw	r26, r20
    3aae:	c9 01       	movw	r24, r18
    3ab0:	8d 83       	std	Y+5, r24	; 0x05
    3ab2:	9e 83       	std	Y+6, r25	; 0x06
    3ab4:	af 83       	std	Y+7, r26	; 0x07
    3ab6:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	9e 81       	ldd	r25, Y+6	; 0x06
    3abc:	af 81       	ldd	r26, Y+7	; 0x07
    3abe:	b8 85       	ldd	r27, Y+8	; 0x08
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	a1 05       	cpc	r26, r1
    3ac4:	b1 05       	cpc	r27, r1
    3ac6:	11 f6       	brne	.-124    	; 0x3a4c <LCD_void4bitDisplayNumber+0x4c>
    3ac8:	23 c0       	rjmp	.+70     	; 0x3b10 <LCD_void4bitDisplayNumber+0x110>
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
		LCD_voidSend_4bitData((y % 10) + 48);
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	ab 81       	ldd	r26, Y+3	; 0x03
    3ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ad2:	2a e0       	ldi	r18, 0x0A	; 10
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	50 e0       	ldi	r21, 0x00	; 0
    3ada:	bc 01       	movw	r22, r24
    3adc:	cd 01       	movw	r24, r26
    3ade:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	80 5d       	subi	r24, 0xD0	; 208
    3ae8:	0e 94 c3 1a 	call	0x3586	; 0x3586 <LCD_voidSend_4bitData>
		y = (y / 10);
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	ab 81       	ldd	r26, Y+3	; 0x03
    3af2:	bc 81       	ldd	r27, Y+4	; 0x04
    3af4:	2a e0       	ldi	r18, 0x0A	; 10
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	50 e0       	ldi	r21, 0x00	; 0
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	0e 94 69 20 	call	0x40d2	; 0x40d2 <__udivmodsi4>
    3b04:	da 01       	movw	r26, r20
    3b06:	c9 01       	movw	r24, r18
    3b08:	89 83       	std	Y+1, r24	; 0x01
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	ab 83       	std	Y+3, r26	; 0x03
    3b0e:	bc 83       	std	Y+4, r27	; 0x04
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	9a 81       	ldd	r25, Y+2	; 0x02
    3b14:	ab 81       	ldd	r26, Y+3	; 0x03
    3b16:	bc 81       	ldd	r27, Y+4	; 0x04
    3b18:	81 30       	cpi	r24, 0x01	; 1
    3b1a:	91 05       	cpc	r25, r1
    3b1c:	a1 05       	cpc	r26, r1
    3b1e:	b1 05       	cpc	r27, r1
    3b20:	a1 f6       	brne	.-88     	; 0x3aca <LCD_void4bitDisplayNumber+0xca>
		LCD_voidSend_4bitData((y % 10) + 48);
		y = (y / 10);
	}
}
    3b22:	28 96       	adiw	r28, 0x08	; 8
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	ff 90       	pop	r15
    3b38:	ef 90       	pop	r14
    3b3a:	08 95       	ret

00003b3c <LCD_voidGoToPos>:


void LCD_voidGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <LCD_voidGoToPos+0x6>
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_Command(0b10000000);
    3b4a:	80 e8       	ldi	r24, 0x80	; 128
    3b4c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
		if(Copy_u8RowNum==1)
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	59 f4       	brne	.+22     	; 0x3b6c <LCD_voidGoToPos+0x30>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3b56:	8a 81       	ldd	r24, Y+2	; 0x02
    3b58:	88 23       	and	r24, r24
    3b5a:	a9 f0       	breq	.+42     	; 0x3b86 <LCD_voidGoToPos+0x4a>
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	81 31       	cpi	r24, 0x11	; 17
    3b60:	90 f4       	brcc	.+36     	; 0x3b86 <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(127+Copy_u8ColNum);}
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	81 58       	subi	r24, 0x81	; 129
    3b66:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
    3b6a:	0d c0       	rjmp	.+26     	; 0x3b86 <LCD_voidGoToPos+0x4a>
		}
		else if (Copy_u8RowNum==2)
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	82 30       	cpi	r24, 0x02	; 2
    3b70:	51 f4       	brne	.+20     	; 0x3b86 <LCD_voidGoToPos+0x4a>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	88 23       	and	r24, r24
    3b76:	39 f0       	breq	.+14     	; 0x3b86 <LCD_voidGoToPos+0x4a>
    3b78:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7a:	81 31       	cpi	r24, 0x11	; 17
    3b7c:	20 f4       	brcc	.+8      	; 0x3b86 <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(191+Copy_u8ColNum);}
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	81 54       	subi	r24, 0x41	; 65
    3b82:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <LCD_voidSend_Command>
		}
}
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	cf 91       	pop	r28
    3b8c:	df 91       	pop	r29
    3b8e:	08 95       	ret

00003b90 <LCD_void4bitGoToPos>:
void LCD_void4bitGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3b90:	df 93       	push	r29
    3b92:	cf 93       	push	r28
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <LCD_void4bitGoToPos+0x6>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_4bitCommand(0b10000000);
    3b9e:	80 e8       	ldi	r24, 0x80	; 128
    3ba0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
			if(Copy_u8RowNum==1)
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	59 f4       	brne	.+22     	; 0x3bc0 <LCD_void4bitGoToPos+0x30>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3baa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bac:	88 23       	and	r24, r24
    3bae:	a9 f0       	breq	.+42     	; 0x3bda <LCD_void4bitGoToPos+0x4a>
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	81 31       	cpi	r24, 0x11	; 17
    3bb4:	90 f4       	brcc	.+36     	; 0x3bda <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(127+Copy_u8ColNum);}
    3bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb8:	81 58       	subi	r24, 0x81	; 129
    3bba:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
    3bbe:	0d c0       	rjmp	.+26     	; 0x3bda <LCD_void4bitGoToPos+0x4a>
			}
			else if (Copy_u8RowNum==2)
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	82 30       	cpi	r24, 0x02	; 2
    3bc4:	51 f4       	brne	.+20     	; 0x3bda <LCD_void4bitGoToPos+0x4a>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	88 23       	and	r24, r24
    3bca:	39 f0       	breq	.+14     	; 0x3bda <LCD_void4bitGoToPos+0x4a>
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	81 31       	cpi	r24, 0x11	; 17
    3bd0:	20 f4       	brcc	.+8      	; 0x3bda <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(191+Copy_u8ColNum);}
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	81 54       	subi	r24, 0x41	; 65
    3bd6:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_voidSend_4bitCommand>
			}
}
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	08 95       	ret

00003be4 <KBD_voidInitialization>:
											{ '@', '0', '*'}
                                          };
/*********************************************************************************************************************************/
/* Initialization to set the keypad pins and ports */
extern void KBD_voidInitialization (void)
{
    3be4:	df 93       	push	r29
    3be6:	cf 93       	push	r28
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
	/* This instruction is to set half of pins to be input ant the other half to be output */
	DIO_voidSetPortDirection(KBD_PORT_HW, 0b11110000 );
    3bec:	83 e0       	ldi	r24, 0x03	; 3
    3bee:	60 ef       	ldi	r22, 0xF0	; 240
    3bf0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPortDirection>
	/* This instruction is to out high on the pins which are o/p and to switch the pull up resistors on for the i/p pins  */
	DIO_voidSetPortValue(KBD_PORT_HW ,0b01111111);
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	6f e7       	ldi	r22, 0x7F	; 127
    3bf8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_voidSetPortValue>
}
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	08 95       	ret

00003c02 <KBD_u8GetKeyPressed>:


extern u8 KBD_u8GetKeyPressed(void)
{
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	63 97       	sbiw	r28, 0x13	; 19
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	de bf       	out	0x3e, r29	; 62
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3c16:	18 8a       	std	Y+16, r1	; 0x10
    3c18:	00 c1       	rjmp	.+512    	; 0x3e1a <KBD_u8GetKeyPressed+0x218>
			{
					/* activate only one column, then read all rows  */
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
    3c1a:	a2 e3       	ldi	r26, 0x32	; 50
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e2 e3       	ldi	r30, 0x32	; 50
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	48 2f       	mov	r20, r24
    3c26:	88 89       	ldd	r24, Y+16	; 0x10
    3c28:	88 2f       	mov	r24, r24
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	e5 58       	subi	r30, 0x85	; 133
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	02 2e       	mov	r0, r18
    3c3e:	02 c0       	rjmp	.+4      	; 0x3c44 <KBD_u8GetKeyPressed+0x42>
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	0a 94       	dec	r0
    3c46:	e2 f7       	brpl	.-8      	; 0x3c40 <KBD_u8GetKeyPressed+0x3e>
    3c48:	80 95       	com	r24
    3c4a:	84 23       	and	r24, r20
    3c4c:	8c 93       	st	X, r24
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;
    3c4e:	88 89       	ldd	r24, Y+16	; 0x10
    3c50:	8a 8b       	std	Y+18, r24	; 0x12

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3c52:	1f 86       	std	Y+15, r1	; 0x0f
    3c54:	c2 c0       	rjmp	.+388    	; 0x3dda <KBD_u8GetKeyPressed+0x1d8>
					{
						/* Get the value of the row to check if it is pressed or not */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3c56:	e0 e3       	ldi	r30, 0x30	; 48
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	fc 01       	movw	r30, r24
    3c68:	e9 58       	subi	r30, 0x89	; 137
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	80 81       	ld	r24, Z
    3c6e:	88 2f       	mov	r24, r24
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a9 01       	movw	r20, r18
    3c74:	02 c0       	rjmp	.+4      	; 0x3c7a <KBD_u8GetKeyPressed+0x78>
    3c76:	55 95       	asr	r21
    3c78:	47 95       	ror	r20
    3c7a:	8a 95       	dec	r24
    3c7c:	e2 f7       	brpl	.-8      	; 0x3c76 <KBD_u8GetKeyPressed+0x74>
    3c7e:	ca 01       	movw	r24, r20
    3c80:	81 70       	andi	r24, 0x01	; 1
    3c82:	89 8b       	std	Y+17, r24	; 0x11
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	a0 ea       	ldi	r26, 0xA0	; 160
    3c8a:	b1 e4       	ldi	r27, 0x41	; 65
    3c8c:	8b 87       	std	Y+11, r24	; 0x0b
    3c8e:	9c 87       	std	Y+12, r25	; 0x0c
    3c90:	ad 87       	std	Y+13, r26	; 0x0d
    3c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	4a ef       	ldi	r20, 0xFA	; 250
    3ca2:	54 e4       	ldi	r21, 0x44	; 68
    3ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	8f 83       	std	Y+7, r24	; 0x07
    3cae:	98 87       	std	Y+8, r25	; 0x08
    3cb0:	a9 87       	std	Y+9, r26	; 0x09
    3cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 e8       	ldi	r20, 0x80	; 128
    3cc2:	5f e3       	ldi	r21, 0x3F	; 63
    3cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc8:	88 23       	and	r24, r24
    3cca:	2c f4       	brge	.+10     	; 0x3cd6 <KBD_u8GetKeyPressed+0xd4>
		__ticks = 1;
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
    3cd4:	3f c0       	rjmp	.+126    	; 0x3d54 <KBD_u8GetKeyPressed+0x152>
	else if (__tmp > 65535)
    3cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd8:	78 85       	ldd	r23, Y+8	; 0x08
    3cda:	89 85       	ldd	r24, Y+9	; 0x09
    3cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	3f ef       	ldi	r19, 0xFF	; 255
    3ce2:	4f e7       	ldi	r20, 0x7F	; 127
    3ce4:	57 e4       	ldi	r21, 0x47	; 71
    3ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cea:	18 16       	cp	r1, r24
    3cec:	4c f5       	brge	.+82     	; 0x3d40 <KBD_u8GetKeyPressed+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e2       	ldi	r20, 0x20	; 32
    3cfc:	51 e4       	ldi	r21, 0x41	; 65
    3cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	bc 01       	movw	r22, r24
    3d08:	cd 01       	movw	r24, r26
    3d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	9e 83       	std	Y+6, r25	; 0x06
    3d14:	8d 83       	std	Y+5, r24	; 0x05
    3d16:	0f c0       	rjmp	.+30     	; 0x3d36 <KBD_u8GetKeyPressed+0x134>
    3d18:	88 ec       	ldi	r24, 0xC8	; 200
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 83       	std	Y+4, r25	; 0x04
    3d1e:	8b 83       	std	Y+3, r24	; 0x03
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <KBD_u8GetKeyPressed+0x122>
    3d28:	9c 83       	std	Y+4, r25	; 0x04
    3d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	9e 83       	std	Y+6, r25	; 0x06
    3d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	00 97       	sbiw	r24, 0x00	; 0
    3d3c:	69 f7       	brne	.-38     	; 0x3d18 <KBD_u8GetKeyPressed+0x116>
    3d3e:	14 c0       	rjmp	.+40     	; 0x3d68 <KBD_u8GetKeyPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d40:	6f 81       	ldd	r22, Y+7	; 0x07
    3d42:	78 85       	ldd	r23, Y+8	; 0x08
    3d44:	89 85       	ldd	r24, Y+9	; 0x09
    3d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	9e 83       	std	Y+6, r25	; 0x06
    3d52:	8d 83       	std	Y+5, r24	; 0x05
    3d54:	8d 81       	ldd	r24, Y+5	; 0x05
    3d56:	9e 81       	ldd	r25, Y+6	; 0x06
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <KBD_u8GetKeyPressed+0x15e>
    3d64:	9a 83       	std	Y+2, r25	; 0x02
    3d66:	89 83       	std	Y+1, r24	; 0x01
						/*This delay is to fix The bouncing Effect  */
						_delay_ms(20);
						/* Get the value again to make sure it is right after avoiding The Debouncing Effect  */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3d68:	e0 e3       	ldi	r30, 0x30	; 48
    3d6a:	f0 e0       	ldi	r31, 0x00	; 0
    3d6c:	80 81       	ld	r24, Z
    3d6e:	28 2f       	mov	r18, r24
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d74:	88 2f       	mov	r24, r24
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	fc 01       	movw	r30, r24
    3d7a:	e9 58       	subi	r30, 0x89	; 137
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	88 2f       	mov	r24, r24
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	a9 01       	movw	r20, r18
    3d86:	02 c0       	rjmp	.+4      	; 0x3d8c <KBD_u8GetKeyPressed+0x18a>
    3d88:	55 95       	asr	r21
    3d8a:	47 95       	ror	r20
    3d8c:	8a 95       	dec	r24
    3d8e:	e2 f7       	brpl	.-8      	; 0x3d88 <KBD_u8GetKeyPressed+0x186>
    3d90:	ca 01       	movw	r24, r20
    3d92:	81 70       	andi	r24, 0x01	; 1
    3d94:	89 8b       	std	Y+17, r24	; 0x11
						/* Store the row index which is the counter of the for loop */
						Local_u8RowIndex = j;
    3d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d98:	8b 8b       	std	Y+19, r24	; 0x13

						/* Check if the key is pressed or not by getting the pin value of the row */
						if (Local_u8val==KBD_KEY_PRESSED)
    3d9a:	89 89       	ldd	r24, Y+17	; 0x11
    3d9c:	88 23       	and	r24, r24
    3d9e:	d1 f4       	brne	.+52     	; 0x3dd4 <KBD_u8GetKeyPressed+0x1d2>
						{
							/* Return a value from the global array  */
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
    3da0:	8b 89       	ldd	r24, Y+19	; 0x13
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	8a 89       	ldd	r24, Y+18	; 0x12
    3da8:	48 2f       	mov	r20, r24
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	c9 01       	movw	r24, r18
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	82 0f       	add	r24, r18
    3db4:	93 1f       	adc	r25, r19
    3db6:	84 0f       	add	r24, r20
    3db8:	95 1f       	adc	r25, r21
    3dba:	fc 01       	movw	r30, r24
    3dbc:	e2 58       	subi	r30, 0x82	; 130
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
			}
	}
}
    3dc2:	63 96       	adiw	r28, 0x13	; 19
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	de bf       	out	0x3e, r29	; 62
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	08 95       	ret
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd6:	8f 5f       	subi	r24, 0xFF	; 255
    3dd8:	8f 87       	std	Y+15, r24	; 0x0f
    3dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ddc:	84 30       	cpi	r24, 0x04	; 4
    3dde:	08 f4       	brcc	.+2      	; 0x3de2 <KBD_u8GetKeyPressed+0x1e0>
    3de0:	3a cf       	rjmp	.-396    	; 0x3c56 <KBD_u8GetKeyPressed+0x54>
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
						}
					}

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
    3de2:	a2 e3       	ldi	r26, 0x32	; 50
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	e2 e3       	ldi	r30, 0x32	; 50
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	80 81       	ld	r24, Z
    3dec:	48 2f       	mov	r20, r24
    3dee:	88 89       	ldd	r24, Y+16	; 0x10
    3df0:	88 2f       	mov	r24, r24
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	fc 01       	movw	r30, r24
    3df6:	e5 58       	subi	r30, 0x85	; 133
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	02 2e       	mov	r0, r18
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <KBD_u8GetKeyPressed+0x20a>
    3e08:	88 0f       	add	r24, r24
    3e0a:	99 1f       	adc	r25, r25
    3e0c:	0a 94       	dec	r0
    3e0e:	e2 f7       	brpl	.-8      	; 0x3e08 <KBD_u8GetKeyPressed+0x206>
    3e10:	84 2b       	or	r24, r20
    3e12:	8c 93       	st	X, r24

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3e14:	88 89       	ldd	r24, Y+16	; 0x10
    3e16:	8f 5f       	subi	r24, 0xFF	; 255
    3e18:	88 8b       	std	Y+16, r24	; 0x10
    3e1a:	88 89       	ldd	r24, Y+16	; 0x10
    3e1c:	83 30       	cpi	r24, 0x03	; 3
    3e1e:	08 f4       	brcc	.+2      	; 0x3e22 <KBD_u8GetKeyPressed+0x220>
    3e20:	fc ce       	rjmp	.-520    	; 0x3c1a <KBD_u8GetKeyPressed+0x18>
    3e22:	f9 ce       	rjmp	.-526    	; 0x3c16 <KBD_u8GetKeyPressed+0x14>

00003e24 <main>:
#define End_Bit               59//;

/* Global array for the signal values */
u8 Global_u8Signal[100];
void main (void)
{
    3e24:	df 93       	push	r29
    3e26:	cf 93       	push	r28
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	6d 97       	sbiw	r28, 0x1d	; 29
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(DIO_PORTA,DIO_INPUT);
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <DIO_voidSetPortDirection>
	/* Initialize the USART using the Pre-Configuration */
	UART_Init();
    3e40:	0e 94 7d 06 	call	0xcfa	; 0xcfa <UART_Init>
	/*
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN1,DIO_INPUT);
	*/
	/* Initialize the LCD 16*2 Uing the 4 Bit Mode  */
	LCD_4bitIntialization();
    3e44:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_4bitIntialization>
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	a8 e4       	ldi	r26, 0x48	; 72
    3e4e:	b3 e4       	ldi	r27, 0x43	; 67
    3e50:	89 8f       	std	Y+25, r24	; 0x19
    3e52:	9a 8f       	std	Y+26, r25	; 0x1a
    3e54:	ab 8f       	std	Y+27, r26	; 0x1b
    3e56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e58:	69 8d       	ldd	r22, Y+25	; 0x19
    3e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	4a ef       	ldi	r20, 0xFA	; 250
    3e66:	54 e4       	ldi	r21, 0x44	; 68
    3e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6c:	dc 01       	movw	r26, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	8d 8b       	std	Y+21, r24	; 0x15
    3e72:	9e 8b       	std	Y+22, r25	; 0x16
    3e74:	af 8b       	std	Y+23, r26	; 0x17
    3e76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e78:	6d 89       	ldd	r22, Y+21	; 0x15
    3e7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	40 e8       	ldi	r20, 0x80	; 128
    3e86:	5f e3       	ldi	r21, 0x3F	; 63
    3e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e8c:	88 23       	and	r24, r24
    3e8e:	2c f4       	brge	.+10     	; 0x3e9a <main+0x76>
		__ticks = 1;
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	9c 8b       	std	Y+20, r25	; 0x14
    3e96:	8b 8b       	std	Y+19, r24	; 0x13
    3e98:	3f c0       	rjmp	.+126    	; 0x3f18 <main+0xf4>
	else if (__tmp > 65535)
    3e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	4f e7       	ldi	r20, 0x7F	; 127
    3ea8:	57 e4       	ldi	r21, 0x47	; 71
    3eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	4c f5       	brge	.+82     	; 0x3f04 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb2:	69 8d       	ldd	r22, Y+25	; 0x19
    3eb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	40 e2       	ldi	r20, 0x20	; 32
    3ec0:	51 e4       	ldi	r21, 0x41	; 65
    3ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	9c 8b       	std	Y+20, r25	; 0x14
    3ed8:	8b 8b       	std	Y+19, r24	; 0x13
    3eda:	0f c0       	rjmp	.+30     	; 0x3efa <main+0xd6>
    3edc:	88 ec       	ldi	r24, 0xC8	; 200
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9a 8b       	std	Y+18, r25	; 0x12
    3ee2:	89 8b       	std	Y+17, r24	; 0x11
    3ee4:	89 89       	ldd	r24, Y+17	; 0x11
    3ee6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	f1 f7       	brne	.-4      	; 0x3ee8 <main+0xc4>
    3eec:	9a 8b       	std	Y+18, r25	; 0x12
    3eee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef4:	01 97       	sbiw	r24, 0x01	; 1
    3ef6:	9c 8b       	std	Y+20, r25	; 0x14
    3ef8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efa:	8b 89       	ldd	r24, Y+19	; 0x13
    3efc:	9c 89       	ldd	r25, Y+20	; 0x14
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	69 f7       	brne	.-38     	; 0x3edc <main+0xb8>
    3f02:	14 c0       	rjmp	.+40     	; 0x3f2c <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f04:	6d 89       	ldd	r22, Y+21	; 0x15
    3f06:	7e 89       	ldd	r23, Y+22	; 0x16
    3f08:	8f 89       	ldd	r24, Y+23	; 0x17
    3f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	9c 8b       	std	Y+20, r25	; 0x14
    3f16:	8b 8b       	std	Y+19, r24	; 0x13
    3f18:	8b 89       	ldd	r24, Y+19	; 0x13
    3f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3f1c:	98 8b       	std	Y+16, r25	; 0x10
    3f1e:	8f 87       	std	Y+15, r24	; 0x0f
    3f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f22:	98 89       	ldd	r25, Y+16	; 0x10
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	f1 f7       	brne	.-4      	; 0x3f24 <main+0x100>
    3f28:	98 8b       	std	Y+16, r25	; 0x10
    3f2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	/* Counter for samples number */
	u8 Local_u8Counter;
	Local_u8Counter=0;
    3f2c:	1d 8e       	std	Y+29, r1	; 0x1d
	while (1)
	{
		Global_u8Signal[Local_u8Counter]=PINA_REG;
    3f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f30:	88 2f       	mov	r24, r24
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	e9 e3       	ldi	r30, 0x39	; 57
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	20 81       	ld	r18, Z
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	ee 56       	subi	r30, 0x6E	; 110
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	20 83       	st	Z, r18
		LCD_void4bitDisplayNumber(Global_u8Signal[Local_u8Counter]);
    3f42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f44:	88 2f       	mov	r24, r24
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	fc 01       	movw	r30, r24
    3f4a:	ee 56       	subi	r30, 0x6E	; 110
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	80 81       	ld	r24, Z
    3f50:	88 2f       	mov	r24, r24
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	a0 e0       	ldi	r26, 0x00	; 0
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <LCD_void4bitDisplayNumber>
		LCD_voidSend_4bitData(44); //  ' , '
    3f60:	8c e2       	ldi	r24, 0x2C	; 44
    3f62:	0e 94 c3 1a 	call	0x3586	; 0x3586 <LCD_voidSend_4bitData>
		{
			UART_TransmitData(Start_Bit);
    3f66:	80 e4       	ldi	r24, 0x40	; 64
    3f68:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
			UART_voidSendNumber((u32)Global_u8Signal[Local_u8Counter]);
    3f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f6e:	88 2f       	mov	r24, r24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	fc 01       	movw	r30, r24
    3f74:	ee 56       	subi	r30, 0x6E	; 110
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	80 81       	ld	r24, Z
    3f7a:	88 2f       	mov	r24, r24
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	a0 e0       	ldi	r26, 0x00	; 0
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <UART_voidSendNumber>
			UART_TransmitData(Comma);
    3f8a:	8c e2       	ldi	r24, 0x2C	; 44
    3f8c:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
			UART_voidSendNumber((u32)Local_u8Counter);
    3f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f92:	88 2f       	mov	r24, r24
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	a0 e0       	ldi	r26, 0x00	; 0
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
    3f9a:	bc 01       	movw	r22, r24
    3f9c:	cd 01       	movw	r24, r26
    3f9e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <UART_voidSendNumber>
			UART_TransmitData(End_Bit);
    3fa2:	8b e3       	ldi	r24, 0x3B	; 59
    3fa4:	0e 94 a0 06 	call	0xd40	; 0xd40 <UART_TransmitData>
		}

		Local_u8Counter++;
    3fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	8d 8f       	std	Y+29, r24	; 0x1d
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a0 e8       	ldi	r26, 0x80	; 128
    3fb4:	bf e3       	ldi	r27, 0x3F	; 63
    3fb6:	8b 87       	std	Y+11, r24	; 0x0b
    3fb8:	9c 87       	std	Y+12, r25	; 0x0c
    3fba:	ad 87       	std	Y+13, r26	; 0x0d
    3fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	4a ef       	ldi	r20, 0xFA	; 250
    3fcc:	54 e4       	ldi	r21, 0x44	; 68
    3fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	8f 83       	std	Y+7, r24	; 0x07
    3fd8:	98 87       	std	Y+8, r25	; 0x08
    3fda:	a9 87       	std	Y+9, r26	; 0x09
    3fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fde:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe0:	78 85       	ldd	r23, Y+8	; 0x08
    3fe2:	89 85       	ldd	r24, Y+9	; 0x09
    3fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	40 e8       	ldi	r20, 0x80	; 128
    3fec:	5f e3       	ldi	r21, 0x3F	; 63
    3fee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ff2:	88 23       	and	r24, r24
    3ff4:	2c f4       	brge	.+10     	; 0x4000 <main+0x1dc>
		__ticks = 1;
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	9e 83       	std	Y+6, r25	; 0x06
    3ffc:	8d 83       	std	Y+5, r24	; 0x05
    3ffe:	3f c0       	rjmp	.+126    	; 0x407e <main+0x25a>
	else if (__tmp > 65535)
    4000:	6f 81       	ldd	r22, Y+7	; 0x07
    4002:	78 85       	ldd	r23, Y+8	; 0x08
    4004:	89 85       	ldd	r24, Y+9	; 0x09
    4006:	9a 85       	ldd	r25, Y+10	; 0x0a
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	3f ef       	ldi	r19, 0xFF	; 255
    400c:	4f e7       	ldi	r20, 0x7F	; 127
    400e:	57 e4       	ldi	r21, 0x47	; 71
    4010:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4014:	18 16       	cp	r1, r24
    4016:	4c f5       	brge	.+82     	; 0x406a <main+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4018:	6b 85       	ldd	r22, Y+11	; 0x0b
    401a:	7c 85       	ldd	r23, Y+12	; 0x0c
    401c:	8d 85       	ldd	r24, Y+13	; 0x0d
    401e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 e2       	ldi	r20, 0x20	; 32
    4026:	51 e4       	ldi	r21, 0x41	; 65
    4028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	bc 01       	movw	r22, r24
    4032:	cd 01       	movw	r24, r26
    4034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	9e 83       	std	Y+6, r25	; 0x06
    403e:	8d 83       	std	Y+5, r24	; 0x05
    4040:	0f c0       	rjmp	.+30     	; 0x4060 <main+0x23c>
    4042:	88 ec       	ldi	r24, 0xC8	; 200
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	9c 83       	std	Y+4, r25	; 0x04
    4048:	8b 83       	std	Y+3, r24	; 0x03
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	9c 81       	ldd	r25, Y+4	; 0x04
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	f1 f7       	brne	.-4      	; 0x404e <main+0x22a>
    4052:	9c 83       	std	Y+4, r25	; 0x04
    4054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4056:	8d 81       	ldd	r24, Y+5	; 0x05
    4058:	9e 81       	ldd	r25, Y+6	; 0x06
    405a:	01 97       	sbiw	r24, 0x01	; 1
    405c:	9e 83       	std	Y+6, r25	; 0x06
    405e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	69 f7       	brne	.-38     	; 0x4042 <main+0x21e>
    4068:	62 cf       	rjmp	.-316    	; 0x3f2e <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    406a:	6f 81       	ldd	r22, Y+7	; 0x07
    406c:	78 85       	ldd	r23, Y+8	; 0x08
    406e:	89 85       	ldd	r24, Y+9	; 0x09
    4070:	9a 85       	ldd	r25, Y+10	; 0x0a
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9e 83       	std	Y+6, r25	; 0x06
    407c:	8d 83       	std	Y+5, r24	; 0x05
    407e:	8d 81       	ldd	r24, Y+5	; 0x05
    4080:	9e 81       	ldd	r25, Y+6	; 0x06
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	9a 81       	ldd	r25, Y+2	; 0x02
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <main+0x266>
    408e:	9a 83       	std	Y+2, r25	; 0x02
    4090:	89 83       	std	Y+1, r24	; 0x01
    4092:	4d cf       	rjmp	.-358    	; 0x3f2e <main+0x10a>

00004094 <__mulsi3>:
    4094:	62 9f       	mul	r22, r18
    4096:	d0 01       	movw	r26, r0
    4098:	73 9f       	mul	r23, r19
    409a:	f0 01       	movw	r30, r0
    409c:	82 9f       	mul	r24, r18
    409e:	e0 0d       	add	r30, r0
    40a0:	f1 1d       	adc	r31, r1
    40a2:	64 9f       	mul	r22, r20
    40a4:	e0 0d       	add	r30, r0
    40a6:	f1 1d       	adc	r31, r1
    40a8:	92 9f       	mul	r25, r18
    40aa:	f0 0d       	add	r31, r0
    40ac:	83 9f       	mul	r24, r19
    40ae:	f0 0d       	add	r31, r0
    40b0:	74 9f       	mul	r23, r20
    40b2:	f0 0d       	add	r31, r0
    40b4:	65 9f       	mul	r22, r21
    40b6:	f0 0d       	add	r31, r0
    40b8:	99 27       	eor	r25, r25
    40ba:	72 9f       	mul	r23, r18
    40bc:	b0 0d       	add	r27, r0
    40be:	e1 1d       	adc	r30, r1
    40c0:	f9 1f       	adc	r31, r25
    40c2:	63 9f       	mul	r22, r19
    40c4:	b0 0d       	add	r27, r0
    40c6:	e1 1d       	adc	r30, r1
    40c8:	f9 1f       	adc	r31, r25
    40ca:	bd 01       	movw	r22, r26
    40cc:	cf 01       	movw	r24, r30
    40ce:	11 24       	eor	r1, r1
    40d0:	08 95       	ret

000040d2 <__udivmodsi4>:
    40d2:	a1 e2       	ldi	r26, 0x21	; 33
    40d4:	1a 2e       	mov	r1, r26
    40d6:	aa 1b       	sub	r26, r26
    40d8:	bb 1b       	sub	r27, r27
    40da:	fd 01       	movw	r30, r26
    40dc:	0d c0       	rjmp	.+26     	; 0x40f8 <__udivmodsi4_ep>

000040de <__udivmodsi4_loop>:
    40de:	aa 1f       	adc	r26, r26
    40e0:	bb 1f       	adc	r27, r27
    40e2:	ee 1f       	adc	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	a2 17       	cp	r26, r18
    40e8:	b3 07       	cpc	r27, r19
    40ea:	e4 07       	cpc	r30, r20
    40ec:	f5 07       	cpc	r31, r21
    40ee:	20 f0       	brcs	.+8      	; 0x40f8 <__udivmodsi4_ep>
    40f0:	a2 1b       	sub	r26, r18
    40f2:	b3 0b       	sbc	r27, r19
    40f4:	e4 0b       	sbc	r30, r20
    40f6:	f5 0b       	sbc	r31, r21

000040f8 <__udivmodsi4_ep>:
    40f8:	66 1f       	adc	r22, r22
    40fa:	77 1f       	adc	r23, r23
    40fc:	88 1f       	adc	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	1a 94       	dec	r1
    4102:	69 f7       	brne	.-38     	; 0x40de <__udivmodsi4_loop>
    4104:	60 95       	com	r22
    4106:	70 95       	com	r23
    4108:	80 95       	com	r24
    410a:	90 95       	com	r25
    410c:	9b 01       	movw	r18, r22
    410e:	ac 01       	movw	r20, r24
    4110:	bd 01       	movw	r22, r26
    4112:	cf 01       	movw	r24, r30
    4114:	08 95       	ret

00004116 <__prologue_saves__>:
    4116:	2f 92       	push	r2
    4118:	3f 92       	push	r3
    411a:	4f 92       	push	r4
    411c:	5f 92       	push	r5
    411e:	6f 92       	push	r6
    4120:	7f 92       	push	r7
    4122:	8f 92       	push	r8
    4124:	9f 92       	push	r9
    4126:	af 92       	push	r10
    4128:	bf 92       	push	r11
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	ca 1b       	sub	r28, r26
    4140:	db 0b       	sbc	r29, r27
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	09 94       	ijmp

0000414e <__epilogue_restores__>:
    414e:	2a 88       	ldd	r2, Y+18	; 0x12
    4150:	39 88       	ldd	r3, Y+17	; 0x11
    4152:	48 88       	ldd	r4, Y+16	; 0x10
    4154:	5f 84       	ldd	r5, Y+15	; 0x0f
    4156:	6e 84       	ldd	r6, Y+14	; 0x0e
    4158:	7d 84       	ldd	r7, Y+13	; 0x0d
    415a:	8c 84       	ldd	r8, Y+12	; 0x0c
    415c:	9b 84       	ldd	r9, Y+11	; 0x0b
    415e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4160:	b9 84       	ldd	r11, Y+9	; 0x09
    4162:	c8 84       	ldd	r12, Y+8	; 0x08
    4164:	df 80       	ldd	r13, Y+7	; 0x07
    4166:	ee 80       	ldd	r14, Y+6	; 0x06
    4168:	fd 80       	ldd	r15, Y+5	; 0x05
    416a:	0c 81       	ldd	r16, Y+4	; 0x04
    416c:	1b 81       	ldd	r17, Y+3	; 0x03
    416e:	aa 81       	ldd	r26, Y+2	; 0x02
    4170:	b9 81       	ldd	r27, Y+1	; 0x01
    4172:	ce 0f       	add	r28, r30
    4174:	d1 1d       	adc	r29, r1
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	ed 01       	movw	r28, r26
    4182:	08 95       	ret

00004184 <_exit>:
    4184:	f8 94       	cli

00004186 <__stop_program>:
    4186:	ff cf       	rjmp	.-2      	; 0x4186 <__stop_program>
