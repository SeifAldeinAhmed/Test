
oscliscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000441a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  0000441a  000044ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000328  0080018a  0080018a  000045d8  2**0
                  ALLOC
  3 .stab         00004458  00000000  00000000  000045d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001924  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000a6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000de67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f040  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000f4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fec1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <main>
      8a:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 21 	jmp	0x43b8	; 0x43b8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <WDT_vidInit>:
/*To disable the WDT the bit WDTOE should be on before disabling the WDT*/



extern void WDT_vidInit(WDT_TimeOut TimeOut)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	89 83       	std	Y+1, r24	; 0x01
	WDTCR |= (1<<WDE_bit);
     e04:	a1 e4       	ldi	r26, 0x41	; 65
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e4       	ldi	r30, 0x41	; 65
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 60       	ori	r24, 0x08	; 8
     e10:	8c 93       	st	X, r24
	WDTCR |= TimeOut;
     e12:	a1 e4       	ldi	r26, 0x41	; 65
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e4       	ldi	r30, 0x41	; 65
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	90 81       	ld	r25, Z
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	89 2b       	or	r24, r25
     e20:	8c 93       	st	X, r24

}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <WDT_vidRefresh>:
extern void WDT_vidRefresh(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62

}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <WDT_vidTurnOff>:

extern void WDT_vidTurnOff(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	 * 1st write one to WDTOE and WDE at the same operation
	 * 2nd  after 4 cycles write zero WDE */


	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE_bit) | (1<<WDE_bit);
     e40:	e1 e4       	ldi	r30, 0x41	; 65
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	88 e1       	ldi	r24, 0x18	; 24
     e46:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     e48:	e1 e4       	ldi	r30, 0x41	; 65
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	10 82       	st	Z, r1
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <UART_Init>:



//============================================================================================
extern void UART_Init (void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the Rx pin to be input*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT);
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>

	/* Configure the Tx pin as output*/
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_OUTPUT);
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
     e70:	e9 e2       	ldi	r30, 0x29	; 41
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	83 e3       	ldi	r24, 0x33	; 51
     e76:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
     e7e:	eb e2       	ldi	r30, 0x2B	; 43
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
     e84:	ea e2       	ldi	r30, 0x2A	; 42
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	86 e8       	ldi	r24, 0x86	; 134
     e92:	80 83       	st	Z, r24
			| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));

	//set_bit(SREG,7);
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
     ea6:	ec e2       	ldi	r30, 0x2C	; 44
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
     eae:	eb e2       	ldi	r30, 0x2B	; 43
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	82 95       	swap	r24
     eb6:	86 95       	lsr	r24
     eb8:	87 70       	andi	r24, 0x07	; 7
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	a1 f3       	breq	.-24     	; 0xeae <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
     ec6:	ab e2       	ldi	r26, 0x2B	; 43
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e2       	ldi	r30, 0x2B	; 43
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 64       	ori	r24, 0x40	; 64
     ed2:	8c 93       	st	X, r24
}
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
     ee4:	eb e2       	ldi	r30, 0x2B	; 43
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 23       	and	r24, r24
     eec:	dc f7       	brge	.-10     	; 0xee4 <UART_RecieveData+0x8>
	return UDR;
     eee:	ec e2       	ldi	r30, 0x2C	; 44
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z

}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <UART_voidPrintf+0x6>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	9b 83       	std	Y+3, r25	; 0x03
     f08:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
     f0a:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     f0c:	19 82       	std	Y+1, r1	; 0x01
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	39 f7       	brne	.-50     	; 0xf10 <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <UART_voidSendNumber>:

extern void UART_voidSendNumber(u32 x)
{
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2c 97       	sbiw	r28, 0x0c	; 12
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	69 87       	std	Y+9, r22	; 0x09
     f6c:	7a 87       	std	Y+10, r23	; 0x0a
     f6e:	8b 87       	std	Y+11, r24	; 0x0b
     f70:	9c 87       	std	Y+12, r25	; 0x0c
	u32 y = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	af 83       	std	Y+7, r26	; 0x07
     f80:	b8 87       	std	Y+8, r27	; 0x08
	u32 z = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	ab 83       	std	Y+3, r26	; 0x03
     f90:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	ab 85       	ldd	r26, Y+11	; 0x0b
     f98:	bc 85       	ldd	r27, Y+12	; 0x0c
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	a1 05       	cpc	r26, r1
     f9e:	b1 05       	cpc	r27, r1
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <UART_voidSendNumber+0x5a>
	{
		UART_TransmitData(48);
     fa2:	80 e3       	ldi	r24, 0x30	; 48
     fa4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
	}
	if (x < 0) {
		UART_TransmitData('-');
		x *= -1;
	}
	if (x<10)
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	ab 85       	ldd	r26, Y+11	; 0x0b
     fae:	bc 85       	ldd	r27, Y+12	; 0x0c
     fb0:	8a 30       	cpi	r24, 0x0A	; 10
     fb2:	91 05       	cpc	r25, r1
     fb4:	a1 05       	cpc	r26, r1
     fb6:	b1 05       	cpc	r27, r1
     fb8:	28 f4       	brcc	.+10     	; 0xfc4 <UART_voidSendNumber+0x76>
	{
	   UART_TransmitData(x+48);
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	80 5d       	subi	r24, 0xD0	; 208
     fbe:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
     fc2:	07 c1       	rjmp	.+526    	; 0x11d2 <UART_voidSendNumber+0x284>
	  // UART_TransmitData(44);
    }
	else if(x==10)
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	ab 85       	ldd	r26, Y+11	; 0x0b
     fca:	bc 85       	ldd	r27, Y+12	; 0x0c
     fcc:	8a 30       	cpi	r24, 0x0A	; 10
     fce:	91 05       	cpc	r25, r1
     fd0:	a1 05       	cpc	r26, r1
     fd2:	b1 05       	cpc	r27, r1
     fd4:	39 f4       	brne	.+14     	; 0xfe4 <UART_voidSendNumber+0x96>
	{
		UART_TransmitData(49);
     fd6:	81 e3       	ldi	r24, 0x31	; 49
     fd8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
		UART_TransmitData(48);
     fdc:	80 e3       	ldi	r24, 0x30	; 48
     fde:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
     fe2:	f7 c0       	rjmp	.+494    	; 0x11d2 <UART_voidSendNumber+0x284>
	}
	else if ((x > 10) && (x < 100))
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	ab 85       	ldd	r26, Y+11	; 0x0b
     fea:	bc 85       	ldd	r27, Y+12	; 0x0c
     fec:	8b 30       	cpi	r24, 0x0B	; 11
     fee:	91 05       	cpc	r25, r1
     ff0:	a1 05       	cpc	r26, r1
     ff2:	b1 05       	cpc	r27, r1
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <UART_voidSendNumber+0xaa>
     ff6:	4b c0       	rjmp	.+150    	; 0x108e <UART_voidSendNumber+0x140>
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	ab 85       	ldd	r26, Y+11	; 0x0b
     ffe:	bc 85       	ldd	r27, Y+12	; 0x0c
    1000:	84 36       	cpi	r24, 0x64	; 100
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	08 f0       	brcs	.+2      	; 0x100c <UART_voidSendNumber+0xbe>
    100a:	41 c0       	rjmp	.+130    	; 0x108e <UART_voidSendNumber+0x140>
	{
		y=x%10;
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	ab 85       	ldd	r26, Y+11	; 0x0b
    1012:	bc 85       	ldd	r27, Y+12	; 0x0c
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	8d 83       	std	Y+5, r24	; 0x05
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	af 83       	std	Y+7, r26	; 0x07
    102e:	b8 87       	std	Y+8, r27	; 0x08
		x=x-y;
    1030:	29 85       	ldd	r18, Y+9	; 0x09
    1032:	3a 85       	ldd	r19, Y+10	; 0x0a
    1034:	4b 85       	ldd	r20, Y+11	; 0x0b
    1036:	5c 85       	ldd	r21, Y+12	; 0x0c
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	af 81       	ldd	r26, Y+7	; 0x07
    103e:	b8 85       	ldd	r27, Y+8	; 0x08
    1040:	79 01       	movw	r14, r18
    1042:	8a 01       	movw	r16, r20
    1044:	e8 1a       	sub	r14, r24
    1046:	f9 0a       	sbc	r15, r25
    1048:	0a 0b       	sbc	r16, r26
    104a:	1b 0b       	sbc	r17, r27
    104c:	d8 01       	movw	r26, r16
    104e:	c7 01       	movw	r24, r14
    1050:	89 87       	std	Y+9, r24	; 0x09
    1052:	9a 87       	std	Y+10, r25	; 0x0a
    1054:	ab 87       	std	Y+11, r26	; 0x0b
    1056:	bc 87       	std	Y+12, r27	; 0x0c
		x=x/10;
    1058:	89 85       	ldd	r24, Y+9	; 0x09
    105a:	9a 85       	ldd	r25, Y+10	; 0x0a
    105c:	ab 85       	ldd	r26, Y+11	; 0x0b
    105e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    1070:	da 01       	movw	r26, r20
    1072:	c9 01       	movw	r24, r18
    1074:	89 87       	std	Y+9, r24	; 0x09
    1076:	9a 87       	std	Y+10, r25	; 0x0a
    1078:	ab 87       	std	Y+11, r26	; 0x0b
    107a:	bc 87       	std	Y+12, r27	; 0x0c
		UART_TransmitData(x+48);
    107c:	89 85       	ldd	r24, Y+9	; 0x09
    107e:	80 5d       	subi	r24, 0xD0	; 208
    1080:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
		UART_TransmitData(y+48);
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	80 5d       	subi	r24, 0xD0	; 208
    1088:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
    108c:	a2 c0       	rjmp	.+324    	; 0x11d2 <UART_voidSendNumber+0x284>
		//UART_TransmitData(44);
	}
	else if ((x >= 100))
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	ab 85       	ldd	r26, Y+11	; 0x0b
    1094:	bc 85       	ldd	r27, Y+12	; 0x0c
    1096:	84 36       	cpi	r24, 0x64	; 100
    1098:	91 05       	cpc	r25, r1
    109a:	a1 05       	cpc	r26, r1
    109c:	b1 05       	cpc	r27, r1
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <UART_voidSendNumber+0x154>
    10a0:	98 c0       	rjmp	.+304    	; 0x11d2 <UART_voidSendNumber+0x284>
		{
			y=x%10;
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    10a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    10aa:	2a e0       	ldi	r18, 0x0A	; 10
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	af 83       	std	Y+7, r26	; 0x07
    10c4:	b8 87       	std	Y+8, r27	; 0x08
			x=x-y;
    10c6:	29 85       	ldd	r18, Y+9	; 0x09
    10c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    10cc:	5c 85       	ldd	r21, Y+12	; 0x0c
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	af 81       	ldd	r26, Y+7	; 0x07
    10d4:	b8 85       	ldd	r27, Y+8	; 0x08
    10d6:	79 01       	movw	r14, r18
    10d8:	8a 01       	movw	r16, r20
    10da:	e8 1a       	sub	r14, r24
    10dc:	f9 0a       	sbc	r15, r25
    10de:	0a 0b       	sbc	r16, r26
    10e0:	1b 0b       	sbc	r17, r27
    10e2:	d8 01       	movw	r26, r16
    10e4:	c7 01       	movw	r24, r14
    10e6:	89 87       	std	Y+9, r24	; 0x09
    10e8:	9a 87       	std	Y+10, r25	; 0x0a
    10ea:	ab 87       	std	Y+11, r26	; 0x0b
    10ec:	bc 87       	std	Y+12, r27	; 0x0c
			z=x%100;
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    10f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    10f6:	24 e6       	ldi	r18, 0x64	; 100
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	ab 83       	std	Y+3, r26	; 0x03
    1110:	bc 83       	std	Y+4, r27	; 0x04
			x=x-z;
    1112:	29 85       	ldd	r18, Y+9	; 0x09
    1114:	3a 85       	ldd	r19, Y+10	; 0x0a
    1116:	4b 85       	ldd	r20, Y+11	; 0x0b
    1118:	5c 85       	ldd	r21, Y+12	; 0x0c
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	ab 81       	ldd	r26, Y+3	; 0x03
    1120:	bc 81       	ldd	r27, Y+4	; 0x04
    1122:	79 01       	movw	r14, r18
    1124:	8a 01       	movw	r16, r20
    1126:	e8 1a       	sub	r14, r24
    1128:	f9 0a       	sbc	r15, r25
    112a:	0a 0b       	sbc	r16, r26
    112c:	1b 0b       	sbc	r17, r27
    112e:	d8 01       	movw	r26, r16
    1130:	c7 01       	movw	r24, r14
    1132:	89 87       	std	Y+9, r24	; 0x09
    1134:	9a 87       	std	Y+10, r25	; 0x0a
    1136:	ab 87       	std	Y+11, r26	; 0x0b
    1138:	bc 87       	std	Y+12, r27	; 0x0c
			x=x/100;
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1140:	bc 85       	ldd	r27, Y+12	; 0x0c
    1142:	24 e6       	ldi	r18, 0x64	; 100
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    1152:	da 01       	movw	r26, r20
    1154:	c9 01       	movw	r24, r18
    1156:	89 87       	std	Y+9, r24	; 0x09
    1158:	9a 87       	std	Y+10, r25	; 0x0a
    115a:	ab 87       	std	Y+11, r26	; 0x0b
    115c:	bc 87       	std	Y+12, r27	; 0x0c
			UART_TransmitData(x+48);
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	80 5d       	subi	r24, 0xD0	; 208
    1162:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
			if((z>=10) && (z%10==0))
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	ab 81       	ldd	r26, Y+3	; 0x03
    116c:	bc 81       	ldd	r27, Y+4	; 0x04
    116e:	8a 30       	cpi	r24, 0x0A	; 10
    1170:	91 05       	cpc	r25, r1
    1172:	a1 05       	cpc	r26, r1
    1174:	b1 05       	cpc	r27, r1
    1176:	28 f1       	brcs	.+74     	; 0x11c2 <UART_voidSendNumber+0x274>
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	ab 81       	ldd	r26, Y+3	; 0x03
    117e:	bc 81       	ldd	r27, Y+4	; 0x04
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	a1 05       	cpc	r26, r1
    1198:	b1 05       	cpc	r27, r1
    119a:	99 f4       	brne	.+38     	; 0x11c2 <UART_voidSendNumber+0x274>
			{
				UART_voidSendNumber(z/10);
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	ab 81       	ldd	r26, Y+3	; 0x03
    11a2:	bc 81       	ldd	r27, Y+4	; 0x04
    11a4:	2a e0       	ldi	r18, 0x0A	; 10
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    11b4:	da 01       	movw	r26, r20
    11b6:	c9 01       	movw	r24, r18
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_voidSendNumber>
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <UART_voidSendNumber+0x27c>
			}
			else
			{
			  UART_TransmitData(z+48);
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	80 5d       	subi	r24, 0xD0	; 208
    11c6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
     		}
			UART_TransmitData(y+48);
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	80 5d       	subi	r24, 0xD0	; 208
    11ce:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
	}
	while (y != 1) {
		UART_TransmitData((y % 10) + 48);
		y = (y / 10);
	}*/
}
    11d2:	2c 96       	adiw	r28, 0x0c	; 12
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <Timer0_voidInit>:
	#endif
#endif


void Timer0_voidInit(void)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
		/*set the Global interrupt bit value*/
		assign_bit(SREG,GI_bit,GI);
	#endif

	/*fill the value of the TCCR0 Register according to the Configuration*/
	TCCR0 |= (FOC0 << FOC0_bit) | (WGM00 << WGM00_bit) | (COM01 << COM01_bit)
    11f4:	a3 e5       	ldi	r26, 0x53	; 83
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e3 e5       	ldi	r30, 0x53	; 83
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	83 62       	ori	r24, 0x23	; 35
    1200:	8c 93       	st	X, r24

	#if ((TOIE0 == 1) && (OverFlow_Mode==Enable))
		TIMSK |= (TOIE0<<TOIE0_bit);
	#endif

}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <SPI_voidinitialization>:
/* I/P Parameters: It takes no thing.								  */
/* Returns:it returns nothing.										  */
/* Desc:This Function initialize the SPI.			  	              */
/**********************************************************************/
extern void SPI_voidinitialization(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
#endif

#ifdef Slave

	/*Define Slave Select pin as Input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	64 e0       	ldi	r22, 0x04	; 4
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
		/*Define MOSI pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_INPUT);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	65 e0       	ldi	r22, 0x05	; 5
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
		/*Define MISO pin as DIO_OUTPUT*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	66 e0       	ldi	r22, 0x06	; 6
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
		/*Define Clock pin as input*/
		DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_INPUT);
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	67 e0       	ldi	r22, 0x07	; 7
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>

		/*Set master/slave bit to one to initialize as a master */
		CLR_BIT(SPCR,4);
    1238:	ad e2       	ldi	r26, 0x2D	; 45
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ed e2       	ldi	r30, 0x2D	; 45
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7e       	andi	r24, 0xEF	; 239
    1244:	8c 93       	st	X, r24
#endif
SET_BIT(SPCR,6);
    1246:	ad e2       	ldi	r26, 0x2D	; 45
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ed e2       	ldi	r30, 0x2D	; 45
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	8c 93       	st	X, r24
CLR_BIT(SPCR,5);
    1254:	ad e2       	ldi	r26, 0x2D	; 45
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	ed e2       	ldi	r30, 0x2D	; 45
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8f 7d       	andi	r24, 0xDF	; 223
    1260:	8c 93       	st	X, r24
CLR_BIT(SPCR,3);
    1262:	ad e2       	ldi	r26, 0x2D	; 45
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ed e2       	ldi	r30, 0x2D	; 45
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	87 7f       	andi	r24, 0xF7	; 247
    126e:	8c 93       	st	X, r24


}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <SPI_voidTranceiver>:
/* I/P Parameters: It takes u8 var. data to be sent					  */
/* Returns:it returns u8 var. data to be received					  */
/* Desc:This Function transmit. and receive using SPI.			      */
/**********************************************************************/
extern u8 SPI_voidTranceiver(u8 data)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
#ifdef Master
	/*Select the slave By pull down the SS pin */
	CLR_BIT(PORTB_REG,4);
#endif

	SPDR=data;
    1282:	ef e2       	ldi	r30, 0x2F	; 47
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 83       	st	Z, r24

	while (GET_BIT(SPSR,7)==0);
    128a:	ee e2       	ldi	r30, 0x2E	; 46
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 23       	and	r24, r24
    1292:	dc f7       	brge	.-10     	; 0x128a <SPI_voidTranceiver+0x14>
#ifdef Slave
	/*Select the slave By pull down the SS pin */
	SET_BIT(PORTB_REG,4);
    1294:	a8 e3       	ldi	r26, 0x38	; 56
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 61       	ori	r24, 0x10	; 16
    12a0:	8c 93       	st	X, r24
#endif

	return SPDR;
    12a2:	ef e2       	ldi	r30, 0x2F	; 47
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
}
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <__vector_1>:
/** Linker Problem solved */
/*void __vector_1(void) __attribute__(( signal , used ));
void __vector_1(void)*/
void __vector_1 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_1	 (void)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
//		EXTINT0_Functionp();
//	  }
	//DressMachine();
	//inthandler ();
//	handler();
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_3>:
/** Linker Problem solved */
/*void __vector_3(void) __attribute__(( signal , used ));
void __vector_3(void)*/
void __vector_3 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_3	 (void)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    // if (EXTINT2_Functionp != NULL)
	 //{
		//EXTINT2_Functionp();
	//login();
	//spitrans();
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <EXT_voidEnable>:
/*                     I/P Parameters: copy_EXTINT_NUM                        */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidEnable( u8 copy_EXTINT_NUM  )
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	2a 97       	sbiw	r28, 0x0a	; 10
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	8a 83       	std	Y+2, r24	; 0x02
	u8 copy_Sense;
	SET_BIT(SREG,7);
    1306:	af e5       	ldi	r26, 0x5F	; 95
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e5       	ldi	r30, 0x5F	; 95
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 68       	ori	r24, 0x80	; 128
    1312:	8c 93       	st	X, r24
	/* Switching on the interrupts to enable the targeted one */
	switch (copy_EXTINT_NUM)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3a 87       	std	Y+10, r19	; 0x0a
    131c:	29 87       	std	Y+9, r18	; 0x09
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <EXT_voidEnable+0x3a>
    1328:	77 c0       	rjmp	.+238    	; 0x1418 <EXT_voidEnable+0x128>
    132a:	29 85       	ldd	r18, Y+9	; 0x09
    132c:	3a 85       	ldd	r19, Y+10	; 0x0a
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <EXT_voidEnable+0x46>
    1334:	dd c0       	rjmp	.+442    	; 0x14f0 <EXT_voidEnable+0x200>
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	09 f0       	breq	.+2      	; 0x1340 <EXT_voidEnable+0x50>
    133e:	06 c1       	rjmp	.+524    	; 0x154c <EXT_voidEnable+0x25c>
	{
/**************************************************************************************************************************/
		case EXTINT0 :
							/* Disable INT0 */
							CLR_BIT(GICR,6);
    1340:	ab e5       	ldi	r26, 0x5B	; 91
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e5       	ldi	r30, 0x5B	; 91
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8f 7b       	andi	r24, 0xBF	; 191
    134c:	8c 93       	st	X, r24
							/* Getting The Sense Mood of INT0 */
							 copy_Sense = EXTI0_SENSE_MODE ;
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	89 83       	std	Y+1, r24	; 0x01
							/* Switch on the sense mood to configure it */
							switch (copy_Sense)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	38 87       	std	Y+8, r19	; 0x08
    135a:	2f 83       	std	Y+7, r18	; 0x07
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	98 85       	ldd	r25, Y+8	; 0x08
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	91 05       	cpc	r25, r1
    1364:	a1 f1       	breq	.+104    	; 0x13ce <EXT_voidEnable+0xde>
    1366:	2f 81       	ldd	r18, Y+7	; 0x07
    1368:	38 85       	ldd	r19, Y+8	; 0x08
    136a:	25 30       	cpi	r18, 0x05	; 5
    136c:	31 05       	cpc	r19, r1
    136e:	34 f4       	brge	.+12     	; 0x137c <EXT_voidEnable+0x8c>
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	98 85       	ldd	r25, Y+8	; 0x08
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	61 f0       	breq	.+24     	; 0x1392 <EXT_voidEnable+0xa2>
    137a:	46 c0       	rjmp	.+140    	; 0x1408 <EXT_voidEnable+0x118>
    137c:	2f 81       	ldd	r18, Y+7	; 0x07
    137e:	38 85       	ldd	r19, Y+8	; 0x08
    1380:	27 30       	cpi	r18, 0x07	; 7
    1382:	31 05       	cpc	r19, r1
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <EXT_voidEnable+0xc0>
    1386:	8f 81       	ldd	r24, Y+7	; 0x07
    1388:	98 85       	ldd	r25, Y+8	; 0x08
    138a:	8a 30       	cpi	r24, 0x0A	; 10
    138c:	91 05       	cpc	r25, r1
    138e:	71 f1       	breq	.+92     	; 0x13ec <EXT_voidEnable+0xfc>
    1390:	3b c0       	rjmp	.+118    	; 0x1408 <EXT_voidEnable+0x118>
							{
								case IOC :
											  SET_BIT(MCUCR , 0);
    1392:	a5 e5       	ldi	r26, 0x55	; 85
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e5       	ldi	r30, 0x55	; 85
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	8c 93       	st	X, r24
											  CLR_BIT(MCUCR , 1);
    13a0:	a5 e5       	ldi	r26, 0x55	; 85
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e5 e5       	ldi	r30, 0x55	; 85
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8d 7f       	andi	r24, 0xFD	; 253
    13ac:	8c 93       	st	X, r24
    13ae:	2c c0       	rjmp	.+88     	; 0x1408 <EXT_voidEnable+0x118>
											  break;
								case RISING :
											  SET_BIT(MCUCR , 0);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
											  SET_BIT(MCUCR , 1);
    13be:	a5 e5       	ldi	r26, 0x55	; 85
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e5       	ldi	r30, 0x55	; 85
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	82 60       	ori	r24, 0x02	; 2
    13ca:	8c 93       	st	X, r24
    13cc:	1d c0       	rjmp	.+58     	; 0x1408 <EXT_voidEnable+0x118>
											  break;
								case FALLING :
									          CLR_BIT(MCUCR , 0);
    13ce:	a5 e5       	ldi	r26, 0x55	; 85
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e5       	ldi	r30, 0x55	; 85
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8e 7f       	andi	r24, 0xFE	; 254
    13da:	8c 93       	st	X, r24
									          SET_BIT(MCUCR , 1);
    13dc:	a5 e5       	ldi	r26, 0x55	; 85
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e5       	ldi	r30, 0x55	; 85
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	82 60       	ori	r24, 0x02	; 2
    13e8:	8c 93       	st	X, r24
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <EXT_voidEnable+0x118>
											  break;
								case LOW_LEVEL :
							                  CLR_BIT(MCUCR , 0);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	8c 93       	st	X, r24
							                  CLR_BIT(MCUCR , 1);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
					     			          break;
							}
							/* Enable INT0 */
							SET_BIT(GICR,6);
    1408:	ab e5       	ldi	r26, 0x5B	; 91
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e5       	ldi	r30, 0x5B	; 91
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 64       	ori	r24, 0x40	; 64
    1414:	8c 93       	st	X, r24
    1416:	9a c0       	rjmp	.+308    	; 0x154c <EXT_voidEnable+0x25c>
							break;
/**************************************************************************************************************************/
		case EXTINT1 :
						/* Disable INT1 */
						CLR_BIT(GICR,7);
    1418:	ab e5       	ldi	r26, 0x5B	; 91
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	eb e5       	ldi	r30, 0x5B	; 91
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 77       	andi	r24, 0x7F	; 127
    1424:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI1_SENSE_MODE ;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	2d 83       	std	Y+5, r18	; 0x05
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	91 05       	cpc	r25, r1
    143c:	a1 f1       	breq	.+104    	; 0x14a6 <EXT_voidEnable+0x1b6>
    143e:	2d 81       	ldd	r18, Y+5	; 0x05
    1440:	3e 81       	ldd	r19, Y+6	; 0x06
    1442:	25 30       	cpi	r18, 0x05	; 5
    1444:	31 05       	cpc	r19, r1
    1446:	34 f4       	brge	.+12     	; 0x1454 <EXT_voidEnable+0x164>
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	61 f0       	breq	.+24     	; 0x146a <EXT_voidEnable+0x17a>
    1452:	46 c0       	rjmp	.+140    	; 0x14e0 <EXT_voidEnable+0x1f0>
    1454:	2d 81       	ldd	r18, Y+5	; 0x05
    1456:	3e 81       	ldd	r19, Y+6	; 0x06
    1458:	27 30       	cpi	r18, 0x07	; 7
    145a:	31 05       	cpc	r19, r1
    145c:	a9 f0       	breq	.+42     	; 0x1488 <EXT_voidEnable+0x198>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	91 05       	cpc	r25, r1
    1466:	71 f1       	breq	.+92     	; 0x14c4 <EXT_voidEnable+0x1d4>
    1468:	3b c0       	rjmp	.+118    	; 0x14e0 <EXT_voidEnable+0x1f0>
						{
							case IOC :
										  SET_BIT(MCUCR , 2);
    146a:	a5 e5       	ldi	r26, 0x55	; 85
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e5       	ldi	r30, 0x55	; 85
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	84 60       	ori	r24, 0x04	; 4
    1476:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    1478:	a5 e5       	ldi	r26, 0x55	; 85
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e5       	ldi	r30, 0x55	; 85
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	87 7f       	andi	r24, 0xF7	; 247
    1484:	8c 93       	st	X, r24
    1486:	2c c0       	rjmp	.+88     	; 0x14e0 <EXT_voidEnable+0x1f0>
										  break;
							case RISING :
										  SET_BIT(MCUCR , 2);
    1488:	a5 e5       	ldi	r26, 0x55	; 85
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e5       	ldi	r30, 0x55	; 85
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	84 60       	ori	r24, 0x04	; 4
    1494:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    1496:	a5 e5       	ldi	r26, 0x55	; 85
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e5       	ldi	r30, 0x55	; 85
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	88 60       	ori	r24, 0x08	; 8
    14a2:	8c 93       	st	X, r24
    14a4:	1d c0       	rjmp	.+58     	; 0x14e0 <EXT_voidEnable+0x1f0>
										  break;
							case FALLING :
										  CLR_BIT(MCUCR , 2);
    14a6:	a5 e5       	ldi	r26, 0x55	; 85
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e5 e5       	ldi	r30, 0x55	; 85
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8b 7f       	andi	r24, 0xFB	; 251
    14b2:	8c 93       	st	X, r24
										  SET_BIT(MCUCR , 3);
    14b4:	a5 e5       	ldi	r26, 0x55	; 85
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e5 e5       	ldi	r30, 0x55	; 85
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
    14c2:	0e c0       	rjmp	.+28     	; 0x14e0 <EXT_voidEnable+0x1f0>
										  break;
							case LOW_LEVEL :
										  CLR_BIT(MCUCR , 2);
    14c4:	a5 e5       	ldi	r26, 0x55	; 85
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e5       	ldi	r30, 0x55	; 85
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	8c 93       	st	X, r24
										  CLR_BIT(MCUCR , 3);
    14d2:	a5 e5       	ldi	r26, 0x55	; 85
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e5       	ldi	r30, 0x55	; 85
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	87 7f       	andi	r24, 0xF7	; 247
    14de:	8c 93       	st	X, r24
										  break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,7);
    14e0:	ab e5       	ldi	r26, 0x5B	; 91
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	eb e5       	ldi	r30, 0x5B	; 91
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 68       	ori	r24, 0x80	; 128
    14ec:	8c 93       	st	X, r24
    14ee:	2e c0       	rjmp	.+92     	; 0x154c <EXT_voidEnable+0x25c>
						break;
/**************************************************************************************************************************/
		case EXTINT2 :
						/* Disable INT1 */
						CLR_BIT(GICR,5);
    14f0:	ab e5       	ldi	r26, 0x5B	; 91
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e5       	ldi	r30, 0x5B	; 91
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7d       	andi	r24, 0xDF	; 223
    14fc:	8c 93       	st	X, r24
						/* Getting The Sense Mood of INT1 */
						copy_Sense = EXTI2_SENSE_MODE ;
    14fe:	87 e0       	ldi	r24, 0x07	; 7
    1500:	89 83       	std	Y+1, r24	; 0x01
						/* Switch on the sense mood to configure it */
						switch (copy_Sense)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c 83       	std	Y+4, r19	; 0x04
    150a:	2b 83       	std	Y+3, r18	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	84 30       	cpi	r24, 0x04	; 4
    1512:	91 05       	cpc	r25, r1
    1514:	69 f0       	breq	.+26     	; 0x1530 <EXT_voidEnable+0x240>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	27 30       	cpi	r18, 0x07	; 7
    151c:	31 05       	cpc	r19, r1
    151e:	79 f4       	brne	.+30     	; 0x153e <EXT_voidEnable+0x24e>
						{
							case RISING :
								           SET_BIT(MCUCSR , 6);
    1520:	a4 e5       	ldi	r26, 0x54	; 84
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e4 e5       	ldi	r30, 0x54	; 84
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 64       	ori	r24, 0x40	; 64
    152c:	8c 93       	st	X, r24
    152e:	07 c0       	rjmp	.+14     	; 0x153e <EXT_voidEnable+0x24e>
					   					   break;
							case FALLING :
										   CLR_BIT(MCUCSR , 6);
    1530:	a4 e5       	ldi	r26, 0x54	; 84
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e4 e5       	ldi	r30, 0x54	; 84
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8f 7b       	andi	r24, 0xBF	; 191
    153c:	8c 93       	st	X, r24
					    				   break;
						}
						/* Enable INT1 */
						SET_BIT(GICR,5);
    153e:	ab e5       	ldi	r26, 0x5B	; 91
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	eb e5       	ldi	r30, 0x5B	; 91
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 62       	ori	r24, 0x20	; 32
    154a:	8c 93       	st	X, r24
						break;
	}

}
    154c:	2a 96       	adiw	r28, 0x0a	; 10
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <EXT_voidDisable>:
/*                      I/P Parameters: copy_EXTINT_NUM                       */
/*                        Returns:it returns no thing                         */
/*                    Desc:This Function to Enable the INT.                   */
/******************************************************************************/
void EXT_voidDisable( u8 copy_EXTINT_NUM )
	{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <EXT_voidDisable+0x6>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
		switch (copy_EXTINT_NUM)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3b 83       	std	Y+3, r19	; 0x03
    1574:	2a 83       	std	Y+2, r18	; 0x02
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	89 f0       	breq	.+34     	; 0x15a2 <EXT_voidDisable+0x44>
    1580:	2a 81       	ldd	r18, Y+2	; 0x02
    1582:	3b 81       	ldd	r19, Y+3	; 0x03
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	a1 f0       	breq	.+40     	; 0x15b2 <EXT_voidDisable+0x54>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	b9 f4       	brne	.+46     	; 0x15c0 <EXT_voidDisable+0x62>
			{
				case EXTINT0 : CLR_BIT(GICR,6);  break;
    1592:	ab e5       	ldi	r26, 0x5B	; 91
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e5       	ldi	r30, 0x5B	; 91
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8f 7b       	andi	r24, 0xBF	; 191
    159e:	8c 93       	st	X, r24
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <EXT_voidDisable+0x62>
				case EXTINT1 : CLR_BIT(GICR,7);  break;
    15a2:	ab e5       	ldi	r26, 0x5B	; 91
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e5       	ldi	r30, 0x5B	; 91
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	8c 93       	st	X, r24
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <EXT_voidDisable+0x62>
				case EXTINT2 : CLR_BIT(GICR,5);  break;
    15b2:	ab e5       	ldi	r26, 0x5B	; 91
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e5       	ldi	r30, 0x5B	; 91
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8f 7d       	andi	r24, 0xDF	; 223
    15be:	8c 93       	st	X, r24
			}
	}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_voidSetPinDirection>:
/*         I/P Parameters: Port Number , Pin Number & Pin Direction           */
/*                 Returns:it returns no thing                                */
/*      Desc:This Function Set the direction of the pin input or output       */
/******************************************************************************/
extern void DIO_voidSetPinDirection (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinDirection)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_voidSetPinDirection+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_voidSetPinDirection+0x8>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	6a 83       	std	Y+2, r22	; 0x02
    15de:	4b 83       	std	Y+3, r20	; 0x03
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <DIO_voidSetPinDirection+0x1c>
    15e6:	e4 c0       	rjmp	.+456    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	88 30       	cpi	r24, 0x08	; 8
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <DIO_voidSetPinDirection+0x24>
    15ee:	e0 c0       	rjmp	.+448    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
	else
	{
		/* switching on the ports to enter the required port to set the pin dir. in this port       */
		/* For all the cases the direction of the pin will be checked and that will help with the   */
		/*  clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1 */
		switch (copy_u8PortNum)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3d 83       	std	Y+5, r19	; 0x05
    15f8:	2c 83       	std	Y+4, r18	; 0x04
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_voidSetPinDirection+0x3a>
    1604:	47 c0       	rjmp	.+142    	; 0x1694 <DIO_voidSetPinDirection+0xc8>
    1606:	2c 81       	ldd	r18, Y+4	; 0x04
    1608:	3d 81       	ldd	r19, Y+5	; 0x05
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	2c f4       	brge	.+10     	; 0x161a <DIO_voidSetPinDirection+0x4e>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	71 f0       	breq	.+28     	; 0x1634 <DIO_voidSetPinDirection+0x68>
    1618:	cb c0       	rjmp	.+406    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
    161a:	2c 81       	ldd	r18, Y+4	; 0x04
    161c:	3d 81       	ldd	r19, Y+5	; 0x05
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	09 f4       	brne	.+2      	; 0x1626 <DIO_voidSetPinDirection+0x5a>
    1624:	67 c0       	rjmp	.+206    	; 0x16f4 <DIO_voidSetPinDirection+0x128>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <DIO_voidSetPinDirection+0x66>
    1630:	91 c0       	rjmp	.+290    	; 0x1754 <DIO_voidSetPinDirection+0x188>
    1632:	be c0       	rjmp	.+380    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
		{
			case DIO_PORTA :
							if (copy_u8PinDirection == DIO_INPUT)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 23       	and	r24, r24
    1638:	a9 f4       	brne	.+42     	; 0x1664 <DIO_voidSetPinDirection+0x98>
							{
								CLR_BIT(DDRA_REG,copy_u8PinNum);
    163a:	aa e3       	ldi	r26, 0x3A	; 58
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ea e3       	ldi	r30, 0x3A	; 58
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_voidSetPinDirection+0x8c>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_voidSetPinDirection+0x88>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	a6 c0       	rjmp	.+332    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f0       	breq	.+2      	; 0x166c <DIO_voidSetPinDirection+0xa0>
    166a:	a2 c0       	rjmp	.+324    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRA_REG,copy_u8PinNum);
    166c:	aa e3       	ldi	r26, 0x3A	; 58
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e3       	ldi	r30, 0x3A	; 58
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_voidSetPinDirection+0xbe>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_voidSetPinDirection+0xba>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	8e c0       	rjmp	.+284    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTB :
							if (copy_u8PinDirection == DIO_INPUT)
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	88 23       	and	r24, r24
    1698:	a9 f4       	brne	.+42     	; 0x16c4 <DIO_voidSetPinDirection+0xf8>
							{
								CLR_BIT(DDRB_REG,copy_u8PinNum);
    169a:	a7 e3       	ldi	r26, 0x37	; 55
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e7 e3       	ldi	r30, 0x37	; 55
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_voidSetPinDirection+0xec>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_voidSetPinDirection+0xe8>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	76 c0       	rjmp	.+236    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <DIO_voidSetPinDirection+0x100>
    16ca:	72 c0       	rjmp	.+228    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRB_REG,copy_u8PinNum);
    16cc:	a7 e3       	ldi	r26, 0x37	; 55
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e7 e3       	ldi	r30, 0x37	; 55
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_voidSetPinDirection+0x11e>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_voidSetPinDirection+0x11a>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	5e c0       	rjmp	.+188    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTC :
							if (copy_u8PinDirection == DIO_INPUT)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 23       	and	r24, r24
    16f8:	a9 f4       	brne	.+42     	; 0x1724 <DIO_voidSetPinDirection+0x158>
							{
								CLR_BIT(DDRC_REG,copy_u8PinNum);
    16fa:	a4 e3       	ldi	r26, 0x34	; 52
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e3       	ldi	r30, 0x34	; 52
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_voidSetPinDirection+0x14c>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_voidSetPinDirection+0x148>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	46 c0       	rjmp	.+140    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	09 f0       	breq	.+2      	; 0x172c <DIO_voidSetPinDirection+0x160>
    172a:	42 c0       	rjmp	.+132    	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRC_REG,copy_u8PinNum);
    172c:	a4 e3       	ldi	r26, 0x34	; 52
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e4 e3       	ldi	r30, 0x34	; 52
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_voidSetPinDirection+0x17e>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_voidSetPinDirection+0x17a>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	2e c0       	rjmp	.+92     	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							break;
			case DIO_PORTD :
							if (copy_u8PinDirection == DIO_INPUT)
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	88 23       	and	r24, r24
    1758:	a9 f4       	brne	.+42     	; 0x1784 <DIO_voidSetPinDirection+0x1b8>
							{
								CLR_BIT(DDRD_REG,copy_u8PinNum);
    175a:	a1 e3       	ldi	r26, 0x31	; 49
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e1 e3       	ldi	r30, 0x31	; 49
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_voidSetPinDirection+0x1ac>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_voidSetPinDirection+0x1a8>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	16 c0       	rjmp	.+44     	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							}
							else if (copy_u8PinDirection == DIO_OUTPUT)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	99 f4       	brne	.+38     	; 0x17b0 <DIO_voidSetPinDirection+0x1e4>
							{
								SET_BIT(DDRD_REG,copy_u8PinNum);
    178a:	a1 e3       	ldi	r26, 0x31	; 49
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e1 e3       	ldi	r30, 0x31	; 49
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_voidSetPinDirection+0x1dc>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_voidSetPinDirection+0x1d8>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
			default:
							break;
		}

	}
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_voidSetPinValue>:
/*           I/P Parameters: Port Number , Pin Number & Pin Value             */
/*                    Returns:it returns no thing                             */
/*         Desc:This Function Set the direction of the pin High or Low        */
/******************************************************************************/
extern void DIO_voidSetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum, u8 copy_u8PinValue)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <DIO_voidSetPinValue+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_voidSetPinValue+0x8>
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	6a 83       	std	Y+2, r22	; 0x02
    17d2:	4b 83       	std	Y+3, r20	; 0x03

		/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	84 30       	cpi	r24, 0x04	; 4
    17d8:	08 f0       	brcs	.+2      	; 0x17dc <DIO_voidSetPinValue+0x1c>
    17da:	e4 c0       	rjmp	.+456    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <DIO_voidSetPinValue+0x24>
    17e2:	e0 c0       	rjmp	.+448    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
		else
		{
			/* switching on the ports to enter the required port to set the pin value in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/*  clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1     */
			switch (copy_u8PortNum)
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3d 83       	std	Y+5, r19	; 0x05
    17ec:	2c 83       	std	Y+4, r18	; 0x04
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_voidSetPinValue+0x3a>
    17f8:	47 c0       	rjmp	.+142    	; 0x1888 <DIO_voidSetPinValue+0xc8>
    17fa:	2c 81       	ldd	r18, Y+4	; 0x04
    17fc:	3d 81       	ldd	r19, Y+5	; 0x05
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	2c f4       	brge	.+10     	; 0x180e <DIO_voidSetPinValue+0x4e>
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	71 f0       	breq	.+28     	; 0x1828 <DIO_voidSetPinValue+0x68>
    180c:	cb c0       	rjmp	.+406    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
    180e:	2c 81       	ldd	r18, Y+4	; 0x04
    1810:	3d 81       	ldd	r19, Y+5	; 0x05
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <DIO_voidSetPinValue+0x5a>
    1818:	67 c0       	rjmp	.+206    	; 0x18e8 <DIO_voidSetPinValue+0x128>
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <DIO_voidSetPinValue+0x66>
    1824:	91 c0       	rjmp	.+290    	; 0x1948 <DIO_voidSetPinValue+0x188>
    1826:	be c0       	rjmp	.+380    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
			{
				case DIO_PORTA :
								if (copy_u8PinValue == DIO_LOW)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 23       	and	r24, r24
    182c:	a9 f4       	brne	.+42     	; 0x1858 <DIO_voidSetPinValue+0x98>
								{
									CLR_BIT(PORTA_REG,copy_u8PinNum);
    182e:	ab e3       	ldi	r26, 0x3B	; 59
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	eb e3       	ldi	r30, 0x3B	; 59
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_voidSetPinValue+0x8c>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_voidSetPinValue+0x88>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	a6 c0       	rjmp	.+332    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	09 f0       	breq	.+2      	; 0x1860 <DIO_voidSetPinValue+0xa0>
    185e:	a2 c0       	rjmp	.+324    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTA_REG,copy_u8PinNum);
    1860:	ab e3       	ldi	r26, 0x3B	; 59
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	eb e3       	ldi	r30, 0x3B	; 59
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_voidSetPinValue+0xbe>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_voidSetPinValue+0xba>
    1882:	84 2b       	or	r24, r20
    1884:	8c 93       	st	X, r24
    1886:	8e c0       	rjmp	.+284    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTB :
								if (copy_u8PinValue == DIO_LOW)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 23       	and	r24, r24
    188c:	a9 f4       	brne	.+42     	; 0x18b8 <DIO_voidSetPinValue+0xf8>
								{
									CLR_BIT(PORTB_REG,copy_u8PinNum);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_voidSetPinValue+0xec>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_voidSetPinValue+0xe8>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	76 c0       	rjmp	.+236    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <DIO_voidSetPinValue+0x100>
    18be:	72 c0       	rjmp	.+228    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTB_REG,copy_u8PinNum);
    18c0:	a8 e3       	ldi	r26, 0x38	; 56
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e8 e3       	ldi	r30, 0x38	; 56
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_voidSetPinValue+0x11e>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_voidSetPinValue+0x11a>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	5e c0       	rjmp	.+188    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTC :
								if (copy_u8PinValue == DIO_LOW)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 23       	and	r24, r24
    18ec:	a9 f4       	brne	.+42     	; 0x1918 <DIO_voidSetPinValue+0x158>
								{
									CLR_BIT(PORTC_REG,copy_u8PinNum);
    18ee:	a5 e3       	ldi	r26, 0x35	; 53
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e5 e3       	ldi	r30, 0x35	; 53
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_voidSetPinValue+0x14c>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_voidSetPinValue+0x148>
    1910:	80 95       	com	r24
    1912:	84 23       	and	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	46 c0       	rjmp	.+140    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	09 f0       	breq	.+2      	; 0x1920 <DIO_voidSetPinValue+0x160>
    191e:	42 c0       	rjmp	.+132    	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTC_REG,copy_u8PinNum);
    1920:	a5 e3       	ldi	r26, 0x35	; 53
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e3       	ldi	r30, 0x35	; 53
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_voidSetPinValue+0x17e>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_voidSetPinValue+0x17a>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	2e c0       	rjmp	.+92     	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								break;
				case DIO_PORTD :
								if (copy_u8PinValue == DIO_LOW)
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 23       	and	r24, r24
    194c:	a9 f4       	brne	.+42     	; 0x1978 <DIO_voidSetPinValue+0x1b8>
								{
									CLR_BIT(PORTD_REG,copy_u8PinNum);
    194e:	a2 e3       	ldi	r26, 0x32	; 50
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e2 e3       	ldi	r30, 0x32	; 50
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_voidSetPinValue+0x1ac>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_voidSetPinValue+0x1a8>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	16 c0       	rjmp	.+44     	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								}
								else if (copy_u8PinValue == DIO_HIGH)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	99 f4       	brne	.+38     	; 0x19a4 <DIO_voidSetPinValue+0x1e4>
								{
									SET_BIT(PORTD_REG,copy_u8PinNum);
    197e:	a2 e3       	ldi	r26, 0x32	; 50
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_voidSetPinValue+0x1dc>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_voidSetPinValue+0x1d8>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
								break;
				default:
								break;
			}
		}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <DIO_u8GetPinValue>:
/*                 I/P Parameters: Port Number , Pin Number                   */
/*                     Returns:it returns U8 Pin Value                        */
/*                   Desc:This Function Get The Pin Value                     */
/******************************************************************************/
extern u8 DIO_u8GetPinValue (u8 copy_u8PortNum, u8 copy_u8PinNum)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <DIO_u8GetPinValue+0x6>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <DIO_u8GetPinValue+0x8>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
	if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) || ( copy_u8PinNum > DIO_PIN7 ) || ( copy_u8PinNum < DIO_PIN0 ) )
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	18 f4       	brcc	.+6      	; 0x19d2 <DIO_u8GetPinValue+0x1e>
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	88 30       	cpi	r24, 0x08	; 8
    19d0:	18 f0       	brcs	.+6      	; 0x19d8 <DIO_u8GetPinValue+0x24>
	{
			/* The Function will terminate if the input is not valid */
			return 2;
    19d2:	22 e0       	ldi	r18, 0x02	; 2
    19d4:	2d 83       	std	Y+5, r18	; 0x05
    19d6:	6e c0       	rjmp	.+220    	; 0x1ab4 <DIO_u8GetPinValue+0x100>
	else
	{

		/* switching on the ports to enter the required port to get the pin value from this port      */
		/* For all the cases the value of the pin will be checked and return it to the callee fuction */
		switch (copy_u8PortNum)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	48 2f       	mov	r20, r24
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	5c 83       	std	Y+4, r21	; 0x04
    19e0:	4b 83       	std	Y+3, r20	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	49 f1       	breq	.+82     	; 0x1a3e <DIO_u8GetPinValue+0x8a>
    19ec:	2b 81       	ldd	r18, Y+3	; 0x03
    19ee:	3c 81       	ldd	r19, Y+4	; 0x04
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	34 f4       	brge	.+12     	; 0x1a02 <DIO_u8GetPinValue+0x4e>
    19f6:	4b 81       	ldd	r20, Y+3	; 0x03
    19f8:	5c 81       	ldd	r21, Y+4	; 0x04
    19fa:	41 15       	cp	r20, r1
    19fc:	51 05       	cpc	r21, r1
    19fe:	61 f0       	breq	.+24     	; 0x1a18 <DIO_u8GetPinValue+0x64>
    1a00:	57 c0       	rjmp	.+174    	; 0x1ab0 <DIO_u8GetPinValue+0xfc>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	91 05       	cpc	r25, r1
    1a0a:	61 f1       	breq	.+88     	; 0x1a64 <DIO_u8GetPinValue+0xb0>
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	23 30       	cpi	r18, 0x03	; 3
    1a12:	31 05       	cpc	r19, r1
    1a14:	d1 f1       	breq	.+116    	; 0x1a8a <DIO_u8GetPinValue+0xd6>
    1a16:	4c c0       	rjmp	.+152    	; 0x1ab0 <DIO_u8GetPinValue+0xfc>
			{
				case DIO_PORTA:
								return GET_BIT(PINA_REG,copy_u8PinNum);
    1a18:	e9 e3       	ldi	r30, 0x39	; 57
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_u8GetPinValue+0x7c>
    1a2c:	55 95       	asr	r21
    1a2e:	47 95       	ror	r20
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_u8GetPinValue+0x78>
    1a34:	ca 01       	movw	r24, r20
    1a36:	58 2f       	mov	r21, r24
    1a38:	51 70       	andi	r21, 0x01	; 1
    1a3a:	5d 83       	std	Y+5, r21	; 0x05
    1a3c:	3b c0       	rjmp	.+118    	; 0x1ab4 <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTB:
								return GET_BIT(PINB_REG,copy_u8PinNum);
    1a3e:	e6 e3       	ldi	r30, 0x36	; 54
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_u8GetPinValue+0xa2>
    1a52:	55 95       	asr	r21
    1a54:	47 95       	ror	r20
    1a56:	8a 95       	dec	r24
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_u8GetPinValue+0x9e>
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	58 2f       	mov	r21, r24
    1a5e:	51 70       	andi	r21, 0x01	; 1
    1a60:	5d 83       	std	Y+5, r21	; 0x05
    1a62:	28 c0       	rjmp	.+80     	; 0x1ab4 <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTC:
								return GET_BIT(PINC_REG,copy_u8PinNum);
    1a64:	e3 e3       	ldi	r30, 0x33	; 51
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_u8GetPinValue+0xc8>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_u8GetPinValue+0xc4>
    1a80:	ca 01       	movw	r24, r20
    1a82:	58 2f       	mov	r21, r24
    1a84:	51 70       	andi	r21, 0x01	; 1
    1a86:	5d 83       	std	Y+5, r21	; 0x05
    1a88:	15 c0       	rjmp	.+42     	; 0x1ab4 <DIO_u8GetPinValue+0x100>
								break;

				case DIO_PORTD:
								return GET_BIT(PIND_REG,copy_u8PinNum);
    1a8a:	e0 e3       	ldi	r30, 0x30	; 48
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_u8GetPinValue+0xee>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_u8GetPinValue+0xea>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	58 2f       	mov	r21, r24
    1aaa:	51 70       	andi	r21, 0x01	; 1
    1aac:	5d 83       	std	Y+5, r21	; 0x05
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <DIO_u8GetPinValue+0x100>
								break;

				default:
								return 2;
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
								break;
			}
	}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <DIO_voidSetPortDirection>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      	   Desc:This Function Set the direction of the port  		      */
/******************************************************************************/
extern void DIO_voidSetPortDirection (u8 copy_u8PortNum , u8 copy_u8PortDirection )
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <DIO_voidSetPortDirection+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <DIO_voidSetPortDirection+0x8>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	6a 83       	std	Y+2, r22	; 0x02
	/*   Input Validation  */
		if ( ( copy_u8PortNum > DIO_PORTD ) || ( copy_u8PortNum < DIO_PORTA ) )
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	90 f5       	brcc	.+100    	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
		{
			/* switching on the ports to enter the required port to set the pins dir. in this port      */
			/* For all the cases the value of the pin will be checked and that will help with the       */
			/* clear bit for input as the bit is set to 0 or set bit for output as the bit is set to 1  */
			/* This will happen using a loop to check on each pin individually						    */
			switch(copy_u8PortNum)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3c 83       	std	Y+4, r19	; 0x04
    1ae4:	2b 83       	std	Y+3, r18	; 0x03
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	d1 f0       	breq	.+52     	; 0x1b24 <DIO_voidSetPortDirection+0x5e>
    1af0:	2b 81       	ldd	r18, Y+3	; 0x03
    1af2:	3c 81       	ldd	r19, Y+4	; 0x04
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <DIO_voidSetPortDirection+0x3e>
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <DIO_voidSetPortDirection+0x54>
    1b02:	1e c0       	rjmp	.+60     	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	81 f0       	breq	.+32     	; 0x1b2e <DIO_voidSetPortDirection+0x68>
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	81 f0       	breq	.+32     	; 0x1b38 <DIO_voidSetPortDirection+0x72>
    1b18:	13 c0       	rjmp	.+38     	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
			{
				case DIO_PORTA:
								DDRA_REG = copy_u8PortDirection;
    1b1a:	ea e3       	ldi	r30, 0x3A	; 58
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	80 83       	st	Z, r24
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTB:
								DDRB_REG = copy_u8PortDirection;
    1b24:	e7 e3       	ldi	r30, 0x37	; 55
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	80 83       	st	Z, r24
    1b2c:	09 c0       	rjmp	.+18     	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTC:
								DDRC_REG = copy_u8PortDirection;
    1b2e:	e4 e3       	ldi	r30, 0x34	; 52
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	80 83       	st	Z, r24
    1b36:	04 c0       	rjmp	.+8      	; 0x1b40 <DIO_voidSetPortDirection+0x7a>
								break;
				case DIO_PORTD:
								DDRD_REG = copy_u8PortDirection;
    1b38:	e1 e3       	ldi	r30, 0x31	; 49
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	80 83       	st	Z, r24

						default:
								break;
					}
		}
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <DIO_voidSetPortValue>:
/*               I/P Parameters: Port Number & Port Direction                 */
/*                     Returns:it returns no thing                            */
/*      		  Desc:This Function Set the value of the port   		      */
/******************************************************************************/
extern void DIO_voidSetPortValue (u8 copy_u8PortNum , u8 copy_u8PortValue )
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <DIO_voidSetPortValue+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <DIO_voidSetPortValue+0x8>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02

	/* switching on the ports to enter the required port to set the pins val. in this port      */
	/* For all the cases the value of the pin will be checked and that will help with the       */
	/* clear bit for low as the bit is set to 0 or set bit for high as the bit is set to 1      */
	/* This will happen using a loop to check on each pin individually						    */
	switch(copy_u8PortNum)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <DIO_voidSetPortValue+0x58>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <DIO_voidSetPortValue+0x38>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <DIO_voidSetPortValue+0x4e>
    1b84:	1e c0       	rjmp	.+60     	; 0x1bc2 <DIO_voidSetPortValue+0x74>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <DIO_voidSetPortValue+0x62>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <DIO_voidSetPortValue+0x6c>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA:
							PORTA_REG= copy_u8PortValue;
    1b9c:	eb e3       	ldi	r30, 0x3B	; 59
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTB:
							PORTB_REG= copy_u8PortValue;
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <DIO_voidSetPortValue+0x74>
											break;
			case DIO_PORTC:
							PORTC_REG= copy_u8PortValue;
    1bb0:	e5 e3       	ldi	r30, 0x35	; 53
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <DIO_voidSetPortValue+0x74>
							break;
			case DIO_PORTD:
							PORTD_REG= copy_u8PortValue;
    1bba:	e2 e3       	ldi	r30, 0x32	; 50
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
							break;

				default:
				break;
		}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <ADC_voidInitTEMP>:
/*                          I/P Parameters: no thing                          */
/*                        Returns:it returns no thing                         */
/*             Desc:This Function to Initialize the ADC peripheral.           */
/******************************************************************************/
extern void ADC_voidInitTEMP()
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <ADC_voidInitTEMP+0x6>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP;
    1bda:	88 e6       	ldi	r24, 0x68	; 104
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1be2:	a7 e2       	ldi	r26, 0x27	; 39
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 e2       	ldi	r30, 0x27	; 39
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	90 81       	ld	r25, Z
    1bec:	e9 81       	ldd	r30, Y+1	; 0x01
    1bee:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf0:	80 81       	ld	r24, Z
    1bf2:	89 2b       	or	r24, r25
    1bf4:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1bf6:	a7 e2       	ldi	r26, 0x27	; 39
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e7 e2       	ldi	r30, 0x27	; 39
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	90 81       	ld	r25, Z
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	81 81       	ldd	r24, Z+1	; 0x01
    1c06:	89 2b       	or	r24, r25
    1c08:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1c0a:	a7 e2       	ldi	r26, 0x27	; 39
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e7 e2       	ldi	r30, 0x27	; 39
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	90 81       	ld	r25, Z
    1c14:	e9 81       	ldd	r30, Y+1	; 0x01
    1c16:	fa 81       	ldd	r31, Y+2	; 0x02
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	89 2b       	or	r24, r25
    1c1c:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1c1e:	a6 e2       	ldi	r26, 0x26	; 38
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e6 e2       	ldi	r30, 0x26	; 38
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1c2c:	a6 e2       	ldi	r26, 0x26	; 38
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e6 e2       	ldi	r30, 0x26	; 38
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	90 81       	ld	r25, Z
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	83 81       	ldd	r24, Z+3	; 0x03
    1c3c:	89 2b       	or	r24, r25
    1c3e:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1c40:	a6 e2       	ldi	r26, 0x26	; 38
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e6 e2       	ldi	r30, 0x26	; 38
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	90 81       	ld	r25, Z
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	84 81       	ldd	r24, Z+4	; 0x04
    1c50:	89 2b       	or	r24, r25
    1c52:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1c54:	a6 e2       	ldi	r26, 0x26	; 38
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e2       	ldi	r30, 0x26	; 38
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	90 81       	ld	r25, Z
    1c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c60:	fa 81       	ldd	r31, Y+2	; 0x02
    1c62:	83 81       	ldd	r24, Z+3	; 0x03
    1c64:	89 2b       	or	r24, r25
    1c66:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	83 81       	ldd	r24, Z+3	; 0x03
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	39 f4       	brne	.+14     	; 0x1c80 <ADC_voidInitTEMP+0xb0>
		{
			SREG |= (1<<7);
    1c72:	af e5       	ldi	r26, 0x5F	; 95
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ef e5       	ldi	r30, 0x5F	; 95
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <ADC_voidInitTEMP2>:


extern void ADC_voidInitTEMP2()
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <ADC_voidInitTEMP2+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationTEMP2;
    1c94:	8d e6       	ldi	r24, 0x6D	; 109
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1c9c:	a7 e2       	ldi	r26, 0x27	; 39
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e7 e2       	ldi	r30, 0x27	; 39
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	90 81       	ld	r25, Z
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	80 81       	ld	r24, Z
    1cac:	89 2b       	or	r24, r25
    1cae:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1cb0:	a7 e2       	ldi	r26, 0x27	; 39
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e7 e2       	ldi	r30, 0x27	; 39
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	90 81       	ld	r25, Z
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	89 2b       	or	r24, r25
    1cc2:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1cc4:	a7 e2       	ldi	r26, 0x27	; 39
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e7 e2       	ldi	r30, 0x27	; 39
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	90 81       	ld	r25, Z
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	89 2b       	or	r24, r25
    1cd6:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1cd8:	a6 e2       	ldi	r26, 0x26	; 38
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e6 e2       	ldi	r30, 0x26	; 38
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 68       	ori	r24, 0x80	; 128
    1ce4:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1ce6:	a6 e2       	ldi	r26, 0x26	; 38
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e6 e2       	ldi	r30, 0x26	; 38
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	90 81       	ld	r25, Z
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	83 81       	ldd	r24, Z+3	; 0x03
    1cf6:	89 2b       	or	r24, r25
    1cf8:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1cfa:	a6 e2       	ldi	r26, 0x26	; 38
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e6 e2       	ldi	r30, 0x26	; 38
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	90 81       	ld	r25, Z
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	84 81       	ldd	r24, Z+4	; 0x04
    1d0a:	89 2b       	or	r24, r25
    1d0c:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1d0e:	a6 e2       	ldi	r26, 0x26	; 38
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e6 e2       	ldi	r30, 0x26	; 38
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	90 81       	ld	r25, Z
    1d18:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1c:	83 81       	ldd	r24, Z+3	; 0x03
    1d1e:	89 2b       	or	r24, r25
    1d20:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	83 81       	ldd	r24, Z+3	; 0x03
    1d28:	88 30       	cpi	r24, 0x08	; 8
    1d2a:	39 f4       	brne	.+14     	; 0x1d3a <ADC_voidInitTEMP2+0xb0>
		{
			SREG |= (1<<7);
    1d2c:	af e5       	ldi	r26, 0x5F	; 95
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ef e5       	ldi	r30, 0x5F	; 95
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	80 68       	ori	r24, 0x80	; 128
    1d38:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <ADC_voidInitLDR>:
extern void ADC_voidInitLDR()
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <ADC_voidInitLDR+0x6>
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	/*a pointer to point to the structure that contains the configuration*/

		ADCconfig * ptr = &ConfiurationLDR;
    1d4e:	82 e7       	ldi	r24, 0x72	; 114
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
		/*Configuration of ADMUX Register*/
		ADMUX |= ptr->VoltRef;
    1d56:	a7 e2       	ldi	r26, 0x27	; 39
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e7 e2       	ldi	r30, 0x27	; 39
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	90 81       	ld	r25, Z
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	80 81       	ld	r24, Z
    1d66:	89 2b       	or	r24, r25
    1d68:	8c 93       	st	X, r24
		ADMUX |= ptr->AdjResFormat;
    1d6a:	a7 e2       	ldi	r26, 0x27	; 39
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e7 e2       	ldi	r30, 0x27	; 39
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	90 81       	ld	r25, Z
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	81 81       	ldd	r24, Z+1	; 0x01
    1d7a:	89 2b       	or	r24, r25
    1d7c:	8c 93       	st	X, r24
		ADMUX |= ptr->ADCCH;
    1d7e:	a7 e2       	ldi	r26, 0x27	; 39
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e7 e2       	ldi	r30, 0x27	; 39
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	90 81       	ld	r25, Z
    1d88:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	89 2b       	or	r24, r25
    1d90:	8c 93       	st	X, r24


		/*Configuration of ADCSRA Register*/
		//ADCSRA |= 0b10000000;
		/*Enable ADc Peripheral*/
		SET_BIT(ADCSRA,7);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->INTState;
    1da0:	a6 e2       	ldi	r26, 0x26	; 38
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 e2       	ldi	r30, 0x26	; 38
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	90 81       	ld	r25, Z
    1daa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dac:	fa 81       	ldd	r31, Y+2	; 0x02
    1dae:	83 81       	ldd	r24, Z+3	; 0x03
    1db0:	89 2b       	or	r24, r25
    1db2:	8c 93       	st	X, r24
		ADCSRA  |=  ptr->PreDivFactor;
    1db4:	a6 e2       	ldi	r26, 0x26	; 38
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e6 e2       	ldi	r30, 0x26	; 38
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	90 81       	ld	r25, Z
    1dbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc2:	84 81       	ldd	r24, Z+4	; 0x04
    1dc4:	89 2b       	or	r24, r25
    1dc6:	8c 93       	st	X, r24
		ADCSRA  |= ptr-> INTState;
    1dc8:	a6 e2       	ldi	r26, 0x26	; 38
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e6 e2       	ldi	r30, 0x26	; 38
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	90 81       	ld	r25, Z
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	83 81       	ldd	r24, Z+3	; 0x03
    1dd8:	89 2b       	or	r24, r25
    1dda:	8c 93       	st	X, r24
		if(ptr->INTState==Enable)
    1ddc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dde:	fa 81       	ldd	r31, Y+2	; 0x02
    1de0:	83 81       	ldd	r24, Z+3	; 0x03
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	39 f4       	brne	.+14     	; 0x1df4 <ADC_voidInitLDR+0xb0>
		{
			SREG |= (1<<7);
    1de6:	af e5       	ldi	r26, 0x5F	; 95
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ef e5       	ldi	r30, 0x5F	; 95
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	8c 93       	st	X, r24
		{
			ADCSRA &= 0b11110111;
		}

		*/
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <ADC_u16GetRawData>:
/*                    I/P Parameters: ADC Channel Number                      */
/*                           Returns:it returns u16                           */
/*             		 Desc:This Function to Get a Raw of Data.                 */
/******************************************************************************/
extern u16 ADC_u16GetRawData(ADCChannels ADCCHIndex)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <ADC_u16GetRawData+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <ADC_u16GetRawData+0x8>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
	/*Local variable to save the Raw data of the ADC conversion result*/
		u16 LOC_u16ADCResult=(u16)0x0000;
    1e0e:	1c 82       	std	Y+4, r1	; 0x04
    1e10:	1b 82       	std	Y+3, r1	; 0x03

		/*pointer to the Configuration structure*/
		ADCconfig * ptr = &ConfiurationTEMP;
    1e12:	88 e6       	ldi	r24, 0x68	; 104
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
		 *
		 * Selecting the ADC Channel
		 *
		 */

		CLR_BIT(ADCSRA,7);
    1e1a:	a6 e2       	ldi	r26, 0x26	; 38
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e6 e2       	ldi	r30, 0x26	; 38
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 77       	andi	r24, 0x7F	; 127
    1e26:	8c 93       	st	X, r24


		/*first zeros the ADC channel bits*/
		ADMUX &=0b11100000;
    1e28:	a7 e2       	ldi	r26, 0x27	; 39
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e7 e2       	ldi	r30, 0x27	; 39
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 7e       	andi	r24, 0xE0	; 224
    1e34:	8c 93       	st	X, r24
		/*second select the channel according*/
		ADMUX |= (ADCCHIndex);
    1e36:	a7 e2       	ldi	r26, 0x27	; 39
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e7 e2       	ldi	r30, 0x27	; 39
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	90 81       	ld	r25, Z
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	89 2b       	or	r24, r25
    1e44:	8c 93       	st	X, r24


		SET_BIT(ADCSRA,7);
    1e46:	a6 e2       	ldi	r26, 0x26	; 38
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e6 e2       	ldi	r30, 0x26	; 38
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	8c 93       	st	X, r24

		/*set ADC to start Conversion*/
		ADC_voidStartConversion();
    1e54:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <ADC_voidStartConversion>
		/*Polling on the ADC Interrupt Flag to know if conversion complete or not yet*/
		while ( GET_BIT(ADCSRA,4)==0);
    1e58:	e6 e2       	ldi	r30, 0x26	; 38
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	82 95       	swap	r24
    1e60:	8f 70       	andi	r24, 0x0F	; 15
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	81 70       	andi	r24, 0x01	; 1
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	a9 f3       	breq	.-22     	; 0x1e58 <ADC_u16GetRawData+0x5a>

		/*Clear Interrupt flag By writing Logical one to it */
		ADCSRA |= (1<<4);
    1e6e:	a6 e2       	ldi	r26, 0x26	; 38
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e6 e2       	ldi	r30, 0x26	; 38
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 61       	ori	r24, 0x10	; 16
    1e7a:	8c 93       	st	X, r24

		if(ptr->AdjResFormat==LeftAdjustment)
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	80 32       	cpi	r24, 0x20	; 32
    1e84:	b1 f4       	brne	.+44     	; 0x1eb2 <ADC_u16GetRawData+0xb4>
			/*
			 * According to the data sheet P:215 you have to read ADCL first before ADCH
			 */


			LOC_u16ADCResult =(u16) ADCL;
    1e86:	e4 e2       	ldi	r30, 0x24	; 36
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 2f       	mov	r24, r24
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
			LOC_u16ADCResult = (u16) ( (ADCH << 8)  |  LOC_u16ADCResult );
    1e94:	e5 e2       	ldi	r30, 0x25	; 37
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	88 27       	eor	r24, r24
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	82 2b       	or	r24, r18
    1eaa:	93 2b       	or	r25, r19
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	1a c0       	rjmp	.+52     	; 0x1ee6 <ADC_u16GetRawData+0xe8>
		}
			else if(ptr->AdjResFormat==RightAdjutment)
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <ADC_u16GetRawData+0xe8>
			{
				/*
				 * According to the data sheet P:215 you have to read ADCL first before ADCH
				 */

				LOC_u16ADCResult = (u16) ADCL;
    1ebc:	e4 e2       	ldi	r30, 0x24	; 36
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
				LOC_u16ADCResult = (u16) ( (ADCH << 8) | (LOC_u16ADCResult) );
    1eca:	e5 e2       	ldi	r30, 0x25	; 37
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	9c 01       	movw	r18, r24
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	82 2b       	or	r24, r18
    1ee0:	93 2b       	or	r25, r19
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	8b 83       	std	Y+3, r24	; 0x03
			else
			{

			}

			return LOC_u16ADCResult;
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04

}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <ADC_u16GetInterruptConvRes>:
/*                          I/P Parameters: no thing                          */
/*                     	     Returns:it returns u16                           */
/*             Desc:This Function to get the interrupt conversion res.        */
/******************************************************************************/
extern u16 ADC_u16GetInterruptConvRes(void)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
	return ADC_u16ConversionResult;
    1f02:	80 91 90 01 	lds	r24, 0x0190
    1f06:	90 91 91 01 	lds	r25, 0x0191
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <ADC_voidStartConversion>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
static void ADC_voidStartConversion(void)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
	ADCSRA  |=  (1<<6);
    1f18:	a6 e2       	ldi	r26, 0x26	; 38
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e6 e2       	ldi	r30, 0x26	; 38
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	80 64       	ori	r24, 0x40	; 64
    1f24:	8c 93       	st	X, r24
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <__vector_16>:
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
/*********************************************************************************************************************************/
void __vector_16 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_16(void)
{
    1f2c:	1f 92       	push	r1
    1f2e:	0f 92       	push	r0
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	0f 92       	push	r0
    1f34:	11 24       	eor	r1, r1
    1f36:	2f 93       	push	r18
    1f38:	3f 93       	push	r19
    1f3a:	8f 93       	push	r24
    1f3c:	9f 93       	push	r25
    1f3e:	ef 93       	push	r30
    1f40:	ff 93       	push	r31
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <__vector_16+0x1c>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	ADCconfig * ptr = &ConfiurationTEMP;
    1f4c:	88 e6       	ldi	r24, 0x68	; 104
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	9a 83       	std	Y+2, r25	; 0x02
    1f52:	89 83       	std	Y+1, r24	; 0x01


	if(ptr->AdjResFormat==LeftAdjustment)
    1f54:	e9 81       	ldd	r30, Y+1	; 0x01
    1f56:	fa 81       	ldd	r31, Y+2	; 0x02
    1f58:	81 81       	ldd	r24, Z+1	; 0x01
    1f5a:	80 32       	cpi	r24, 0x20	; 32
    1f5c:	61 f5       	brne	.+88     	; 0x1fb6 <__vector_16+0x8a>
		{
		ADC_u16ConversionResult =(u16) ADCH;
    1f5e:	e5 e2       	ldi	r30, 0x25	; 37
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	90 93 91 01 	sts	0x0191, r25
    1f6c:	80 93 90 01 	sts	0x0190, r24
		ADC_u16ConversionResult = (u16) ((ADC_u16ConversionResult << 8)  |  (ADCL));
    1f70:	80 91 90 01 	lds	r24, 0x0190
    1f74:	90 91 91 01 	lds	r25, 0x0191
    1f78:	38 2f       	mov	r19, r24
    1f7a:	22 27       	eor	r18, r18
    1f7c:	e4 e2       	ldi	r30, 0x24	; 36
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	82 2b       	or	r24, r18
    1f88:	93 2b       	or	r25, r19
    1f8a:	90 93 91 01 	sts	0x0191, r25
    1f8e:	80 93 90 01 	sts	0x0190, r24
		ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult >> 6);
    1f92:	80 91 90 01 	lds	r24, 0x0190
    1f96:	90 91 91 01 	lds	r25, 0x0191
    1f9a:	00 24       	eor	r0, r0
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	00 1c       	adc	r0, r0
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	00 1c       	adc	r0, r0
    1fa8:	89 2f       	mov	r24, r25
    1faa:	90 2d       	mov	r25, r0
    1fac:	90 93 91 01 	sts	0x0191, r25
    1fb0:	80 93 90 01 	sts	0x0190, r24
    1fb4:	1f c0       	rjmp	.+62     	; 0x1ff4 <__vector_16+0xc8>
		}
		else if(ptr->AdjResFormat==RightAdjutment)
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	88 23       	and	r24, r24
    1fbe:	d1 f4       	brne	.+52     	; 0x1ff4 <__vector_16+0xc8>
		{
			ADC_u16ConversionResult = (u16) ADCH;
    1fc0:	e5 e2       	ldi	r30, 0x25	; 37
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	90 93 91 01 	sts	0x0191, r25
    1fce:	80 93 90 01 	sts	0x0190, r24
			ADC_u16ConversionResult = (u16) (ADC_u16ConversionResult << 8) | (ADCL);
    1fd2:	80 91 90 01 	lds	r24, 0x0190
    1fd6:	90 91 91 01 	lds	r25, 0x0191
    1fda:	38 2f       	mov	r19, r24
    1fdc:	22 27       	eor	r18, r18
    1fde:	e4 e2       	ldi	r30, 0x24	; 36
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	82 2b       	or	r24, r18
    1fea:	93 2b       	or	r25, r19
    1fec:	90 93 91 01 	sts	0x0191, r25
    1ff0:	80 93 90 01 	sts	0x0190, r24
		}

}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	ff 91       	pop	r31
    1ffe:	ef 91       	pop	r30
    2000:	9f 91       	pop	r25
    2002:	8f 91       	pop	r24
    2004:	3f 91       	pop	r19
    2006:	2f 91       	pop	r18
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	0f 90       	pop	r0
    200e:	1f 90       	pop	r1
    2010:	18 95       	reti

00002012 <SevenSegmant_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmant_voidIntialization (u8 copy_u8SegmantType)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	6f ef       	ldi	r22, 0xFF	; 255
    2022:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	21 f5       	brne	.+72     	; 0x2074 <SevenSegmant_voidIntialization+0x62>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	63 e0       	ldi	r22, 0x03	; 3
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	64 e0       	ldi	r22, 0x04	; 4
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	65 e0       	ldi	r22, 0x05	; 5
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	66 e0       	ldi	r22, 0x06	; 6
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	67 e0       	ldi	r22, 0x07	; 7
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2072:	26 c0       	rjmp	.+76     	; 0x20c0 <SevenSegmant_voidIntialization+0xae>
	}

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	19 f5       	brne	.+70     	; 0x20c0 <SevenSegmant_voidIntialization+0xae>
	{
		//DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	65 e0       	ldi	r22, 0x05	; 5
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	}


}
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <SevenSegmant_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmant_voidDisplayNum (u8 copy_u8SegmantType,u32 copy_u8Number)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	2d 97       	sbiw	r28, 0x0d	; 13
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	4a 83       	std	Y+2, r20	; 0x02
    20e0:	5b 83       	std	Y+3, r21	; 0x03
    20e2:	6c 83       	std	Y+4, r22	; 0x04
    20e4:	7d 83       	std	Y+5, r23	; 0x05
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <SevenSegmant_voidDisplayNum+0x26>
    20ec:	01 c2       	rjmp	.+1026   	; 0x24f0 <SevenSegmant_voidDisplayNum+0x428>
	{
		switch (copy_u8Number)
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	ac 81       	ldd	r26, Y+4	; 0x04
    20f4:	bd 81       	ldd	r27, Y+5	; 0x05
    20f6:	8e 83       	std	Y+6, r24	; 0x06
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	a8 87       	std	Y+8, r26	; 0x08
    20fc:	b9 87       	std	Y+9, r27	; 0x09
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	9f 81       	ldd	r25, Y+7	; 0x07
    2102:	a8 85       	ldd	r26, Y+8	; 0x08
    2104:	b9 85       	ldd	r27, Y+9	; 0x09
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	91 05       	cpc	r25, r1
    210a:	a1 05       	cpc	r26, r1
    210c:	b1 05       	cpc	r27, r1
    210e:	09 f4       	brne	.+2      	; 0x2112 <SevenSegmant_voidDisplayNum+0x4a>
    2110:	03 c1       	rjmp	.+518    	; 0x2318 <SevenSegmant_voidDisplayNum+0x250>
    2112:	8e 81       	ldd	r24, Y+6	; 0x06
    2114:	9f 81       	ldd	r25, Y+7	; 0x07
    2116:	a8 85       	ldd	r26, Y+8	; 0x08
    2118:	b9 85       	ldd	r27, Y+9	; 0x09
    211a:	85 30       	cpi	r24, 0x05	; 5
    211c:	91 05       	cpc	r25, r1
    211e:	a1 05       	cpc	r26, r1
    2120:	b1 05       	cpc	r27, r1
    2122:	48 f5       	brcc	.+82     	; 0x2176 <SevenSegmant_voidDisplayNum+0xae>
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	a8 85       	ldd	r26, Y+8	; 0x08
    212a:	b9 85       	ldd	r27, Y+9	; 0x09
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	a1 05       	cpc	r26, r1
    2132:	b1 05       	cpc	r27, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <SevenSegmant_voidDisplayNum+0x70>
    2136:	80 c0       	rjmp	.+256    	; 0x2238 <SevenSegmant_voidDisplayNum+0x170>
    2138:	8e 81       	ldd	r24, Y+6	; 0x06
    213a:	9f 81       	ldd	r25, Y+7	; 0x07
    213c:	a8 85       	ldd	r26, Y+8	; 0x08
    213e:	b9 85       	ldd	r27, Y+9	; 0x09
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	91 05       	cpc	r25, r1
    2144:	a1 05       	cpc	r26, r1
    2146:	b1 05       	cpc	r27, r1
    2148:	08 f4       	brcc	.+2      	; 0x214c <SevenSegmant_voidDisplayNum+0x84>
    214a:	52 c0       	rjmp	.+164    	; 0x21f0 <SevenSegmant_voidDisplayNum+0x128>
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	9f 81       	ldd	r25, Y+7	; 0x07
    2150:	a8 85       	ldd	r26, Y+8	; 0x08
    2152:	b9 85       	ldd	r27, Y+9	; 0x09
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	91 05       	cpc	r25, r1
    2158:	a1 05       	cpc	r26, r1
    215a:	b1 05       	cpc	r27, r1
    215c:	09 f4       	brne	.+2      	; 0x2160 <SevenSegmant_voidDisplayNum+0x98>
    215e:	94 c0       	rjmp	.+296    	; 0x2288 <SevenSegmant_voidDisplayNum+0x1c0>
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	9f 81       	ldd	r25, Y+7	; 0x07
    2164:	a8 85       	ldd	r26, Y+8	; 0x08
    2166:	b9 85       	ldd	r27, Y+9	; 0x09
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	a1 05       	cpc	r26, r1
    216e:	b1 05       	cpc	r27, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <SevenSegmant_voidDisplayNum+0xac>
    2172:	ae c0       	rjmp	.+348    	; 0x22d0 <SevenSegmant_voidDisplayNum+0x208>
    2174:	a9 c3       	rjmp	.+1874   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	9f 81       	ldd	r25, Y+7	; 0x07
    217a:	a8 85       	ldd	r26, Y+8	; 0x08
    217c:	b9 85       	ldd	r27, Y+9	; 0x09
    217e:	87 30       	cpi	r24, 0x07	; 7
    2180:	91 05       	cpc	r25, r1
    2182:	a1 05       	cpc	r26, r1
    2184:	b1 05       	cpc	r27, r1
    2186:	09 f4       	brne	.+2      	; 0x218a <SevenSegmant_voidDisplayNum+0xc2>
    2188:	3b c1       	rjmp	.+630    	; 0x2400 <SevenSegmant_voidDisplayNum+0x338>
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
    218c:	9f 81       	ldd	r25, Y+7	; 0x07
    218e:	a8 85       	ldd	r26, Y+8	; 0x08
    2190:	b9 85       	ldd	r27, Y+9	; 0x09
    2192:	88 30       	cpi	r24, 0x08	; 8
    2194:	91 05       	cpc	r25, r1
    2196:	a1 05       	cpc	r26, r1
    2198:	b1 05       	cpc	r27, r1
    219a:	a8 f4       	brcc	.+42     	; 0x21c6 <SevenSegmant_voidDisplayNum+0xfe>
    219c:	8e 81       	ldd	r24, Y+6	; 0x06
    219e:	9f 81       	ldd	r25, Y+7	; 0x07
    21a0:	a8 85       	ldd	r26, Y+8	; 0x08
    21a2:	b9 85       	ldd	r27, Y+9	; 0x09
    21a4:	85 30       	cpi	r24, 0x05	; 5
    21a6:	91 05       	cpc	r25, r1
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <SevenSegmant_voidDisplayNum+0xe8>
    21ae:	d8 c0       	rjmp	.+432    	; 0x2360 <SevenSegmant_voidDisplayNum+0x298>
    21b0:	8e 81       	ldd	r24, Y+6	; 0x06
    21b2:	9f 81       	ldd	r25, Y+7	; 0x07
    21b4:	a8 85       	ldd	r26, Y+8	; 0x08
    21b6:	b9 85       	ldd	r27, Y+9	; 0x09
    21b8:	86 30       	cpi	r24, 0x06	; 6
    21ba:	91 05       	cpc	r25, r1
    21bc:	a1 05       	cpc	r26, r1
    21be:	b1 05       	cpc	r27, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <SevenSegmant_voidDisplayNum+0xfc>
    21c2:	f6 c0       	rjmp	.+492    	; 0x23b0 <SevenSegmant_voidDisplayNum+0x2e8>
    21c4:	81 c3       	rjmp	.+1794   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ca:	a8 85       	ldd	r26, Y+8	; 0x08
    21cc:	b9 85       	ldd	r27, Y+9	; 0x09
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	91 05       	cpc	r25, r1
    21d2:	a1 05       	cpc	r26, r1
    21d4:	b1 05       	cpc	r27, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <SevenSegmant_voidDisplayNum+0x112>
    21d8:	3b c1       	rjmp	.+630    	; 0x2450 <SevenSegmant_voidDisplayNum+0x388>
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	a8 85       	ldd	r26, Y+8	; 0x08
    21e0:	b9 85       	ldd	r27, Y+9	; 0x09
    21e2:	89 30       	cpi	r24, 0x09	; 9
    21e4:	91 05       	cpc	r25, r1
    21e6:	a1 05       	cpc	r26, r1
    21e8:	b1 05       	cpc	r27, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <SevenSegmant_voidDisplayNum+0x126>
    21ec:	59 c1       	rjmp	.+690    	; 0x24a0 <SevenSegmant_voidDisplayNum+0x3d8>
    21ee:	6c c3       	rjmp	.+1752   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
			  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	62 e0       	ldi	r22, 0x02	; 2
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	63 e0       	ldi	r22, 0x03	; 3
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	64 e0       	ldi	r22, 0x04	; 4
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	65 e0       	ldi	r22, 0x05	; 5
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	66 e0       	ldi	r22, 0x06	; 6
    2226:	41 e0       	ldi	r20, 0x01	; 1
    2228:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	67 e0       	ldi	r22, 0x07	; 7
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2236:	48 c3       	rjmp	.+1680   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>

			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	66 e0       	ldi	r22, 0x06	; 6
    223c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	63 e0       	ldi	r22, 0x03	; 3
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	64 e0       	ldi	r22, 0x04	; 4
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2268:	82 e0       	ldi	r24, 0x02	; 2
    226a:	65 e0       	ldi	r22, 0x05	; 5
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	67 e0       	ldi	r22, 0x07	; 7
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2286:	20 c3       	rjmp	.+1600   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	61 e0       	ldi	r22, 0x01	; 1
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	62 e0       	ldi	r22, 0x02	; 2
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	63 e0       	ldi	r22, 0x03	; 3
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	65 e0       	ldi	r22, 0x05	; 5
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	66 e0       	ldi	r22, 0x06	; 6
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	67 e0       	ldi	r22, 0x07	; 7
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    22ce:	fc c2       	rjmp	.+1528   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	62 e0       	ldi	r22, 0x02	; 2
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	63 e0       	ldi	r22, 0x03	; 3
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    22ee:	82 e0       	ldi	r24, 0x02	; 2
    22f0:	64 e0       	ldi	r22, 0x04	; 4
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	65 e0       	ldi	r22, 0x05	; 5
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	66 e0       	ldi	r22, 0x06	; 6
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	67 e0       	ldi	r22, 0x07	; 7
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2316:	d8 c2       	rjmp	.+1456   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
		  	  	        DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	62 e0       	ldi	r22, 0x02	; 2
    2326:	41 e0       	ldi	r20, 0x01	; 1
    2328:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	63 e0       	ldi	r22, 0x03	; 3
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	64 e0       	ldi	r22, 0x04	; 4
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	65 e0       	ldi	r22, 0x05	; 5
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	66 e0       	ldi	r22, 0x06	; 6
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	67 e0       	ldi	r22, 0x07	; 7
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    235e:	b4 c2       	rjmp	.+1384   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	6d e6       	ldi	r22, 0x6D	; 109
    2364:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
		  	  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	62 e0       	ldi	r22, 0x02	; 2
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	63 e0       	ldi	r22, 0x03	; 3
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	65 e0       	ldi	r22, 0x05	; 5
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	66 e0       	ldi	r22, 0x06	; 6
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	67 e0       	ldi	r22, 0x07	; 7
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    23ae:	8c c2       	rjmp	.+1304   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	6d e7       	ldi	r22, 0x7D	; 125
    23b4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	63 e0       	ldi	r22, 0x03	; 3
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	64 e0       	ldi	r22, 0x04	; 4
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	66 e0       	ldi	r22, 0x06	; 6
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	67 e0       	ldi	r22, 0x07	; 7
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    23fe:	64 c2       	rjmp	.+1224   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	67 e0       	ldi	r22, 0x07	; 7
    2404:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	62 e0       	ldi	r22, 0x02	; 2
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	64 e0       	ldi	r22, 0x04	; 4
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	67 e0       	ldi	r22, 0x07	; 7
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    244e:	3c c2       	rjmp	.+1144   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	6f e7       	ldi	r22, 0x7F	; 127
    2454:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	62 e0       	ldi	r22, 0x02	; 2
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	63 e0       	ldi	r22, 0x03	; 3
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2476:	82 e0       	ldi	r24, 0x02	; 2
    2478:	64 e0       	ldi	r22, 0x04	; 4
    247a:	41 e0       	ldi	r20, 0x01	; 1
    247c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	65 e0       	ldi	r22, 0x05	; 5
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	66 e0       	ldi	r22, 0x06	; 6
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	67 e0       	ldi	r22, 0x07	; 7
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    249e:	14 c2       	rjmp	.+1064   	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	6f e6       	ldi	r22, 0x6F	; 111
    24a4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
		  	  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	63 e0       	ldi	r22, 0x03	; 3
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	64 e0       	ldi	r22, 0x04	; 4
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	65 e0       	ldi	r22, 0x05	; 5
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	66 e0       	ldi	r22, 0x06	; 6
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	67 e0       	ldi	r22, 0x07	; 7
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    24ee:	ec c1       	rjmp	.+984    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	82 30       	cpi	r24, 0x02	; 2
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <SevenSegmant_voidDisplayNum+0x430>
    24f6:	e8 c1       	rjmp	.+976    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
	{
		switch (copy_u8Number)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	ac 81       	ldd	r26, Y+4	; 0x04
    24fe:	bd 81       	ldd	r27, Y+5	; 0x05
    2500:	8a 87       	std	Y+10, r24	; 0x0a
    2502:	9b 87       	std	Y+11, r25	; 0x0b
    2504:	ac 87       	std	Y+12, r26	; 0x0c
    2506:	bd 87       	std	Y+13, r27	; 0x0d
    2508:	8a 85       	ldd	r24, Y+10	; 0x0a
    250a:	9b 85       	ldd	r25, Y+11	; 0x0b
    250c:	ac 85       	ldd	r26, Y+12	; 0x0c
    250e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2510:	84 30       	cpi	r24, 0x04	; 4
    2512:	91 05       	cpc	r25, r1
    2514:	a1 05       	cpc	r26, r1
    2516:	b1 05       	cpc	r27, r1
    2518:	09 f4       	brne	.+2      	; 0x251c <SevenSegmant_voidDisplayNum+0x454>
    251a:	ff c0       	rjmp	.+510    	; 0x271a <SevenSegmant_voidDisplayNum+0x652>
    251c:	8a 85       	ldd	r24, Y+10	; 0x0a
    251e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2520:	ac 85       	ldd	r26, Y+12	; 0x0c
    2522:	bd 85       	ldd	r27, Y+13	; 0x0d
    2524:	85 30       	cpi	r24, 0x05	; 5
    2526:	91 05       	cpc	r25, r1
    2528:	a1 05       	cpc	r26, r1
    252a:	b1 05       	cpc	r27, r1
    252c:	48 f5       	brcc	.+82     	; 0x2580 <SevenSegmant_voidDisplayNum+0x4b8>
    252e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2530:	9b 85       	ldd	r25, Y+11	; 0x0b
    2532:	ac 85       	ldd	r26, Y+12	; 0x0c
    2534:	bd 85       	ldd	r27, Y+13	; 0x0d
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	91 05       	cpc	r25, r1
    253a:	a1 05       	cpc	r26, r1
    253c:	b1 05       	cpc	r27, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <SevenSegmant_voidDisplayNum+0x47a>
    2540:	80 c0       	rjmp	.+256    	; 0x2642 <SevenSegmant_voidDisplayNum+0x57a>
    2542:	8a 85       	ldd	r24, Y+10	; 0x0a
    2544:	9b 85       	ldd	r25, Y+11	; 0x0b
    2546:	ac 85       	ldd	r26, Y+12	; 0x0c
    2548:	bd 85       	ldd	r27, Y+13	; 0x0d
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	91 05       	cpc	r25, r1
    254e:	a1 05       	cpc	r26, r1
    2550:	b1 05       	cpc	r27, r1
    2552:	08 f4       	brcc	.+2      	; 0x2556 <SevenSegmant_voidDisplayNum+0x48e>
    2554:	52 c0       	rjmp	.+164    	; 0x25fa <SevenSegmant_voidDisplayNum+0x532>
    2556:	8a 85       	ldd	r24, Y+10	; 0x0a
    2558:	9b 85       	ldd	r25, Y+11	; 0x0b
    255a:	ac 85       	ldd	r26, Y+12	; 0x0c
    255c:	bd 85       	ldd	r27, Y+13	; 0x0d
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	91 05       	cpc	r25, r1
    2562:	a1 05       	cpc	r26, r1
    2564:	b1 05       	cpc	r27, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <SevenSegmant_voidDisplayNum+0x4a2>
    2568:	90 c0       	rjmp	.+288    	; 0x268a <SevenSegmant_voidDisplayNum+0x5c2>
    256a:	8a 85       	ldd	r24, Y+10	; 0x0a
    256c:	9b 85       	ldd	r25, Y+11	; 0x0b
    256e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2570:	bd 85       	ldd	r27, Y+13	; 0x0d
    2572:	83 30       	cpi	r24, 0x03	; 3
    2574:	91 05       	cpc	r25, r1
    2576:	a1 05       	cpc	r26, r1
    2578:	b1 05       	cpc	r27, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <SevenSegmant_voidDisplayNum+0x4b6>
    257c:	aa c0       	rjmp	.+340    	; 0x26d2 <SevenSegmant_voidDisplayNum+0x60a>
    257e:	a4 c1       	rjmp	.+840    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
    2580:	8a 85       	ldd	r24, Y+10	; 0x0a
    2582:	9b 85       	ldd	r25, Y+11	; 0x0b
    2584:	ac 85       	ldd	r26, Y+12	; 0x0c
    2586:	bd 85       	ldd	r27, Y+13	; 0x0d
    2588:	87 30       	cpi	r24, 0x07	; 7
    258a:	91 05       	cpc	r25, r1
    258c:	a1 05       	cpc	r26, r1
    258e:	b1 05       	cpc	r27, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <SevenSegmant_voidDisplayNum+0x4cc>
    2592:	2f c1       	rjmp	.+606    	; 0x27f2 <SevenSegmant_voidDisplayNum+0x72a>
    2594:	8a 85       	ldd	r24, Y+10	; 0x0a
    2596:	9b 85       	ldd	r25, Y+11	; 0x0b
    2598:	ac 85       	ldd	r26, Y+12	; 0x0c
    259a:	bd 85       	ldd	r27, Y+13	; 0x0d
    259c:	88 30       	cpi	r24, 0x08	; 8
    259e:	91 05       	cpc	r25, r1
    25a0:	a1 05       	cpc	r26, r1
    25a2:	b1 05       	cpc	r27, r1
    25a4:	a8 f4       	brcc	.+42     	; 0x25d0 <SevenSegmant_voidDisplayNum+0x508>
    25a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25aa:	ac 85       	ldd	r26, Y+12	; 0x0c
    25ac:	bd 85       	ldd	r27, Y+13	; 0x0d
    25ae:	85 30       	cpi	r24, 0x05	; 5
    25b0:	91 05       	cpc	r25, r1
    25b2:	a1 05       	cpc	r26, r1
    25b4:	b1 05       	cpc	r27, r1
    25b6:	09 f4       	brne	.+2      	; 0x25ba <SevenSegmant_voidDisplayNum+0x4f2>
    25b8:	d4 c0       	rjmp	.+424    	; 0x2762 <SevenSegmant_voidDisplayNum+0x69a>
    25ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    25bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25be:	ac 85       	ldd	r26, Y+12	; 0x0c
    25c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    25c2:	86 30       	cpi	r24, 0x06	; 6
    25c4:	91 05       	cpc	r25, r1
    25c6:	a1 05       	cpc	r26, r1
    25c8:	b1 05       	cpc	r27, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <SevenSegmant_voidDisplayNum+0x506>
    25cc:	ee c0       	rjmp	.+476    	; 0x27aa <SevenSegmant_voidDisplayNum+0x6e2>
    25ce:	7c c1       	rjmp	.+760    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    25d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	91 05       	cpc	r25, r1
    25dc:	a1 05       	cpc	r26, r1
    25de:	b1 05       	cpc	r27, r1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <SevenSegmant_voidDisplayNum+0x51c>
    25e2:	2b c1       	rjmp	.+598    	; 0x283a <SevenSegmant_voidDisplayNum+0x772>
    25e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25e8:	ac 85       	ldd	r26, Y+12	; 0x0c
    25ea:	bd 85       	ldd	r27, Y+13	; 0x0d
    25ec:	89 30       	cpi	r24, 0x09	; 9
    25ee:	91 05       	cpc	r25, r1
    25f0:	a1 05       	cpc	r26, r1
    25f2:	b1 05       	cpc	r27, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <SevenSegmant_voidDisplayNum+0x530>
    25f6:	45 c1       	rjmp	.+650    	; 0x2882 <SevenSegmant_voidDisplayNum+0x7ba>
    25f8:	67 c1       	rjmp	.+718    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		{
		  case 0 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	64 e0       	ldi	r22, 0x04	; 4
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	65 e0       	ldi	r22, 0x05	; 5
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	66 e0       	ldi	r22, 0x06	; 6
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	67 e0       	ldi	r22, 0x07	; 7
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2640:	43 c1       	rjmp	.+646    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 1 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
			  	  	    DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	62 e0       	ldi	r22, 0x02	; 2
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	63 e0       	ldi	r22, 0x03	; 3
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	64 e0       	ldi	r22, 0x04	; 4
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	65 e0       	ldi	r22, 0x05	; 5
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	66 e0       	ldi	r22, 0x06	; 6
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    267e:	82 e0       	ldi	r24, 0x02	; 2
    2680:	67 e0       	ldi	r22, 0x07	; 7
    2682:	41 e0       	ldi	r20, 0x01	; 1
    2684:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2688:	1f c1       	rjmp	.+574    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
			   	  break;
		  case 2 :
			  	 //DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
			  	  	  	DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	61 e0       	ldi	r22, 0x01	; 1
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	62 e0       	ldi	r22, 0x02	; 2
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_HIGH);
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	63 e0       	ldi	r22, 0x03	; 3
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	65 e0       	ldi	r22, 0x05	; 5
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	66 e0       	ldi	r22, 0x06	; 6
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
			  			DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	67 e0       	ldi	r22, 0x07	; 7
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    26d0:	fb c0       	rjmp	.+502    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
			  	  break;
		  case 3 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	61 e0       	ldi	r22, 0x01	; 1
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	63 e0       	ldi	r22, 0x03	; 3
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	64 e0       	ldi	r22, 0x04	; 4
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	65 e0       	ldi	r22, 0x05	; 5
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	66 e0       	ldi	r22, 0x06	; 6
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	67 e0       	ldi	r22, 0x07	; 7
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2718:	d7 c0       	rjmp	.+430    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>

		  	  	  break;
		  case 4 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_HIGH);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	63 e0       	ldi	r22, 0x03	; 3
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	64 e0       	ldi	r22, 0x04	; 4
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	65 e0       	ldi	r22, 0x05	; 5
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	66 e0       	ldi	r22, 0x06	; 6
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	67 e0       	ldi	r22, 0x07	; 7
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2760:	b3 c0       	rjmp	.+358    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 5 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	63 e0       	ldi	r22, 0x03	; 3
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	65 e0       	ldi	r22, 0x05	; 5
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	66 e0       	ldi	r22, 0x06	; 6
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	67 e0       	ldi	r22, 0x07	; 7
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    27a8:	8f c0       	rjmp	.+286    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 6 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_HIGH);
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	62 e0       	ldi	r22, 0x02	; 2
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	63 e0       	ldi	r22, 0x03	; 3
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	64 e0       	ldi	r22, 0x04	; 4
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	65 e0       	ldi	r22, 0x05	; 5
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	66 e0       	ldi	r22, 0x06	; 6
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	67 e0       	ldi	r22, 0x07	; 7
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    27f0:	6b c0       	rjmp	.+214    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 7 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	62 e0       	ldi	r22, 0x02	; 2
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	63 e0       	ldi	r22, 0x03	; 3
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_HIGH);
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	64 e0       	ldi	r22, 0x04	; 4
    2814:	41 e0       	ldi	r20, 0x01	; 1
    2816:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	65 e0       	ldi	r22, 0x05	; 5
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_HIGH);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	66 e0       	ldi	r22, 0x06	; 6
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_HIGH);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	67 e0       	ldi	r22, 0x07	; 7
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2838:	47 c0       	rjmp	.+142    	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 8 :
			  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	62 e0       	ldi	r22, 0x02	; 2
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	63 e0       	ldi	r22, 0x03	; 3
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_LOW);
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	65 e0       	ldi	r22, 0x05	; 5
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	66 e0       	ldi	r22, 0x06	; 6
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	67 e0       	ldi	r22, 0x07	; 7
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2880:	23 c0       	rjmp	.+70     	; 0x28c8 <SevenSegmant_voidDisplayNum+0x800>
		  	  	  break;
		  case 9 :
		  	  	  //DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN1,DIO_LOW);
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN2,DIO_LOW);
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	62 e0       	ldi	r22, 0x02	; 2
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN3,DIO_LOW);
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	63 e0       	ldi	r22, 0x03	; 3
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN4,DIO_LOW);
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	64 e0       	ldi	r22, 0x04	; 4
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN5,DIO_HIGH);
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	65 e0       	ldi	r22, 0x05	; 5
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN6,DIO_LOW);
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	66 e0       	ldi	r22, 0x06	; 6
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(SevenSegmant_Port,DIO_PIN7,DIO_LOW);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	67 e0       	ldi	r22, 0x07	; 7
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    28c8:	2d 96       	adiw	r28, 0x0d	; 13
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <SevenSegmantPORT_voidIntialization>:
/*                I/P Parameters: u8 copy_u8SegmantType                       */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Intialize the Seven Segmant                   */
/******************************************************************************/
extern void SevenSegmantPORT_voidIntialization (u8 copy_u8SegmantType)
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	89 83       	std	Y+1, r24	; 0x01
	/* Setting the port to output */
	DIO_voidSetPortDirection(SevenSegmant_Port ,0xFF);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_voidSetPortDirection>
	/* turning all the segmants on based on the typr of the Seven Segmant */
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	29 f4       	brne	.+10     	; 0x28fe <SevenSegmantPORT_voidIntialization+0x24>
	DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	6f e3       	ldi	r22, 0x3F	; 63
    28f8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    28fc:	07 c0       	rjmp	.+14     	; 0x290c <SevenSegmantPORT_voidIntialization+0x32>

	else if (copy_u8SegmantType == SevenSegmant_Anode)
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	21 f4       	brne	.+8      	; 0x290c <SevenSegmantPORT_voidIntialization+0x32>
	DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	60 e4       	ldi	r22, 0x40	; 64
    2908:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>

}
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <SevenSegmantPORT_voidDisplayNum>:
/*     	 I/P Parameters: u8 copy_u8SegmantType & u8 copy_u8Number             */
/*                     Returns:it returns no thing                            */
/*        	 Desc:This Function Display on the Seven Segmant                  */
/******************************************************************************/
extern void SevenSegmantPORT_voidDisplayNum (u8 copy_u8SegmantType,u8 copy_u8Number)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <SevenSegmantPORT_voidDisplayNum+0x6>
    291a:	00 d0       	rcall	.+0      	; 0x291c <SevenSegmantPORT_voidDisplayNum+0x8>
    291c:	00 d0       	rcall	.+0      	; 0x291e <SevenSegmantPORT_voidDisplayNum+0xa>
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	89 83       	std	Y+1, r24	; 0x01
    2924:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8SegmantType == SevenSegmant_Cathode)
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	09 f0       	breq	.+2      	; 0x292e <SevenSegmantPORT_voidDisplayNum+0x1a>
    292c:	7e c0       	rjmp	.+252    	; 0x2a2a <SevenSegmantPORT_voidDisplayNum+0x116>
	{
		switch (copy_u8Number)
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	3e 83       	std	Y+6, r19	; 0x06
    2936:	2d 83       	std	Y+5, r18	; 0x05
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	91 05       	cpc	r25, r1
    2940:	09 f4       	brne	.+2      	; 0x2944 <SevenSegmantPORT_voidDisplayNum+0x30>
    2942:	55 c0       	rjmp	.+170    	; 0x29ee <SevenSegmantPORT_voidDisplayNum+0xda>
    2944:	2d 81       	ldd	r18, Y+5	; 0x05
    2946:	3e 81       	ldd	r19, Y+6	; 0x06
    2948:	25 30       	cpi	r18, 0x05	; 5
    294a:	31 05       	cpc	r19, r1
    294c:	dc f4       	brge	.+54     	; 0x2984 <SevenSegmantPORT_voidDisplayNum+0x70>
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	91 05       	cpc	r25, r1
    2956:	09 f4       	brne	.+2      	; 0x295a <SevenSegmantPORT_voidDisplayNum+0x46>
    2958:	3b c0       	rjmp	.+118    	; 0x29d0 <SevenSegmantPORT_voidDisplayNum+0xbc>
    295a:	2d 81       	ldd	r18, Y+5	; 0x05
    295c:	3e 81       	ldd	r19, Y+6	; 0x06
    295e:	22 30       	cpi	r18, 0x02	; 2
    2960:	31 05       	cpc	r19, r1
    2962:	2c f4       	brge	.+10     	; 0x296e <SevenSegmantPORT_voidDisplayNum+0x5a>
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f1       	breq	.+90     	; 0x29c6 <SevenSegmantPORT_voidDisplayNum+0xb2>
    296c:	df c0       	rjmp	.+446    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    296e:	2d 81       	ldd	r18, Y+5	; 0x05
    2970:	3e 81       	ldd	r19, Y+6	; 0x06
    2972:	22 30       	cpi	r18, 0x02	; 2
    2974:	31 05       	cpc	r19, r1
    2976:	89 f1       	breq	.+98     	; 0x29da <SevenSegmantPORT_voidDisplayNum+0xc6>
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	83 30       	cpi	r24, 0x03	; 3
    297e:	91 05       	cpc	r25, r1
    2980:	89 f1       	breq	.+98     	; 0x29e4 <SevenSegmantPORT_voidDisplayNum+0xd0>
    2982:	d4 c0       	rjmp	.+424    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    2984:	2d 81       	ldd	r18, Y+5	; 0x05
    2986:	3e 81       	ldd	r19, Y+6	; 0x06
    2988:	27 30       	cpi	r18, 0x07	; 7
    298a:	31 05       	cpc	r19, r1
    298c:	09 f4       	brne	.+2      	; 0x2990 <SevenSegmantPORT_voidDisplayNum+0x7c>
    298e:	3e c0       	rjmp	.+124    	; 0x2a0c <SevenSegmantPORT_voidDisplayNum+0xf8>
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	88 30       	cpi	r24, 0x08	; 8
    2996:	91 05       	cpc	r25, r1
    2998:	5c f4       	brge	.+22     	; 0x29b0 <SevenSegmantPORT_voidDisplayNum+0x9c>
    299a:	2d 81       	ldd	r18, Y+5	; 0x05
    299c:	3e 81       	ldd	r19, Y+6	; 0x06
    299e:	25 30       	cpi	r18, 0x05	; 5
    29a0:	31 05       	cpc	r19, r1
    29a2:	51 f1       	breq	.+84     	; 0x29f8 <SevenSegmantPORT_voidDisplayNum+0xe4>
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	86 30       	cpi	r24, 0x06	; 6
    29aa:	91 05       	cpc	r25, r1
    29ac:	51 f1       	breq	.+84     	; 0x2a02 <SevenSegmantPORT_voidDisplayNum+0xee>
    29ae:	be c0       	rjmp	.+380    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    29b0:	2d 81       	ldd	r18, Y+5	; 0x05
    29b2:	3e 81       	ldd	r19, Y+6	; 0x06
    29b4:	28 30       	cpi	r18, 0x08	; 8
    29b6:	31 05       	cpc	r19, r1
    29b8:	71 f1       	breq	.+92     	; 0x2a16 <SevenSegmantPORT_voidDisplayNum+0x102>
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	89 30       	cpi	r24, 0x09	; 9
    29c0:	91 05       	cpc	r25, r1
    29c2:	71 f1       	breq	.+92     	; 0x2a20 <SevenSegmantPORT_voidDisplayNum+0x10c>
    29c4:	b3 c0       	rjmp	.+358    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00111111);
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	6f e3       	ldi	r22, 0x3F	; 63
    29ca:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    29ce:	ae c0       	rjmp	.+348    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000110);
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	66 e0       	ldi	r22, 0x06	; 6
    29d4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    29d8:	a9 c0       	rjmp	.+338    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01011011);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	6b e5       	ldi	r22, 0x5B	; 91
    29de:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    29e2:	a4 c0       	rjmp	.+328    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01001111);
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	6f e4       	ldi	r22, 0x4F	; 79
    29e8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    29ec:	9f c0       	rjmp	.+318    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01100110);
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	66 e6       	ldi	r22, 0x66	; 102
    29f2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    29f6:	9a c0       	rjmp	.+308    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101101);
    29f8:	82 e0       	ldi	r24, 0x02	; 2
    29fa:	6d e6       	ldi	r22, 0x6D	; 109
    29fc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2a00:	95 c0       	rjmp	.+298    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111101);
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	6d e7       	ldi	r22, 0x7D	; 125
    2a06:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2a0a:	90 c0       	rjmp	.+288    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000111);
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	67 e0       	ldi	r22, 0x07	; 7
    2a10:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2a14:	8b c0       	rjmp	.+278    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111111);
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	6f e7       	ldi	r22, 0x7F	; 127
    2a1a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2a1e:	86 c0       	rjmp	.+268    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01101111);
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	6f e6       	ldi	r22, 0x6F	; 111
    2a24:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2a28:	81 c0       	rjmp	.+258    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		}
	}
/***************************************************************************************************/
/***************************************************************************************************/
/***************************************************************************************************/
	else if (copy_u8SegmantType == SevenSegmant_Anode)
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <SevenSegmantPORT_voidDisplayNum+0x11e>
    2a30:	7d c0       	rjmp	.+250    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
	{
		switch (copy_u8Number)
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	3c 83       	std	Y+4, r19	; 0x04
    2a3a:	2b 83       	std	Y+3, r18	; 0x03
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	84 30       	cpi	r24, 0x04	; 4
    2a42:	91 05       	cpc	r25, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <SevenSegmantPORT_voidDisplayNum+0x134>
    2a46:	55 c0       	rjmp	.+170    	; 0x2af2 <SevenSegmantPORT_voidDisplayNum+0x1de>
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4c:	25 30       	cpi	r18, 0x05	; 5
    2a4e:	31 05       	cpc	r19, r1
    2a50:	dc f4       	brge	.+54     	; 0x2a88 <SevenSegmantPORT_voidDisplayNum+0x174>
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 05       	cpc	r25, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <SevenSegmantPORT_voidDisplayNum+0x14a>
    2a5c:	3b c0       	rjmp	.+118    	; 0x2ad4 <SevenSegmantPORT_voidDisplayNum+0x1c0>
    2a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a60:	3c 81       	ldd	r19, Y+4	; 0x04
    2a62:	22 30       	cpi	r18, 0x02	; 2
    2a64:	31 05       	cpc	r19, r1
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <SevenSegmantPORT_voidDisplayNum+0x15e>
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f1       	breq	.+90     	; 0x2aca <SevenSegmantPORT_voidDisplayNum+0x1b6>
    2a70:	5d c0       	rjmp	.+186    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    2a72:	2b 81       	ldd	r18, Y+3	; 0x03
    2a74:	3c 81       	ldd	r19, Y+4	; 0x04
    2a76:	22 30       	cpi	r18, 0x02	; 2
    2a78:	31 05       	cpc	r19, r1
    2a7a:	89 f1       	breq	.+98     	; 0x2ade <SevenSegmantPORT_voidDisplayNum+0x1ca>
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	91 05       	cpc	r25, r1
    2a84:	89 f1       	breq	.+98     	; 0x2ae8 <SevenSegmantPORT_voidDisplayNum+0x1d4>
    2a86:	52 c0       	rjmp	.+164    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    2a88:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8c:	27 30       	cpi	r18, 0x07	; 7
    2a8e:	31 05       	cpc	r19, r1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <SevenSegmantPORT_voidDisplayNum+0x180>
    2a92:	3e c0       	rjmp	.+124    	; 0x2b10 <SevenSegmantPORT_voidDisplayNum+0x1fc>
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	88 30       	cpi	r24, 0x08	; 8
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	5c f4       	brge	.+22     	; 0x2ab4 <SevenSegmantPORT_voidDisplayNum+0x1a0>
    2a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa2:	25 30       	cpi	r18, 0x05	; 5
    2aa4:	31 05       	cpc	r19, r1
    2aa6:	51 f1       	breq	.+84     	; 0x2afc <SevenSegmantPORT_voidDisplayNum+0x1e8>
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	86 30       	cpi	r24, 0x06	; 6
    2aae:	91 05       	cpc	r25, r1
    2ab0:	51 f1       	breq	.+84     	; 0x2b06 <SevenSegmantPORT_voidDisplayNum+0x1f2>
    2ab2:	3c c0       	rjmp	.+120    	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
    2ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab8:	28 30       	cpi	r18, 0x08	; 8
    2aba:	31 05       	cpc	r19, r1
    2abc:	71 f1       	breq	.+92     	; 0x2b1a <SevenSegmantPORT_voidDisplayNum+0x206>
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	89 30       	cpi	r24, 0x09	; 9
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	71 f1       	breq	.+92     	; 0x2b24 <SevenSegmantPORT_voidDisplayNum+0x210>
    2ac8:	31 c0       	rjmp	.+98     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		{
		  case 0 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01000000);
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	60 e4       	ldi	r22, 0x40	; 64
    2ace:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2ad2:	2c c0       	rjmp	.+88     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 1 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111001);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	69 e7       	ldi	r22, 0x79	; 121
    2ad8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2adc:	27 c0       	rjmp	.+78     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			   	  break;
		  case 2 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00100100);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	64 e2       	ldi	r22, 0x24	; 36
    2ae2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2ae6:	22 c0       	rjmp	.+68     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
			  	  break;
		  case 3 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00110000);
    2ae8:	82 e0       	ldi	r24, 0x02	; 2
    2aea:	60 e3       	ldi	r22, 0x30	; 48
    2aec:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2af0:	1d c0       	rjmp	.+58     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 4 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00011001);
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	69 e1       	ldi	r22, 0x19	; 25
    2af6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2afa:	18 c0       	rjmp	.+48     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 5 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010010);
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	62 e1       	ldi	r22, 0x12	; 18
    2b00:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2b04:	13 c0       	rjmp	.+38     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 6 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000010);
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2b0e:	0e c0       	rjmp	.+28     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 7 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b01111000);
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	68 e7       	ldi	r22, 0x78	; 120
    2b14:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2b18:	09 c0       	rjmp	.+18     	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 8 :
			  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00000000);
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
    2b22:	04 c0       	rjmp	.+8      	; 0x2b2c <SevenSegmantPORT_voidDisplayNum+0x218>
		  	  	  break;
		  case 9 :
		  	  	  DIO_voidSetPortValue(SevenSegmant_Port,0b00010000);
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	60 e1       	ldi	r22, 0x10	; 16
    2b28:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
		  	  	  break;
		  default:
		  		  break;
		}
	}
}
    2b2c:	26 96       	adiw	r28, 0x06	; 6
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <LCD_voidSend_Command>:
/***************************************************/
#include <avr\delay.h>
/*********************************************************************************************************************************/

extern void LCD_voidSend_Command (u8 copy_u8Command)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	2f 97       	sbiw	r28, 0x0f	; 15
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	8f 87       	std	Y+15, r24	; 0x0f
	/***********************************/
//	DIO_voidSetPortDirection (LCD_Data_PORT,DIO_OUTPUT);
//	DIO_voidSetPortDirection (LCD_CNT_PORT,DIO_OUTPUT);


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	64 e0       	ldi	r22, 0x04	; 4
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    2b5e:	83 e0       	ldi	r24, 0x03	; 3
    2b60:	65 e0       	ldi	r22, 0x05	; 5
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8Command);
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b6c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>


	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	66 e0       	ldi	r22, 0x06	; 6
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e4       	ldi	r27, 0x40	; 64
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <LCD_voidSend_Command+0x8e>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <LCD_voidSend_Command+0x10c>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <LCD_voidSend_Command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <LCD_voidSend_Command+0xee>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_voidSend_Command+0xdc>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <LCD_voidSend_Command+0xd0>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <LCD_voidSend_Command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <LCD_voidSend_Command+0x118>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    2c5e:	83 e0       	ldi	r24, 0x03	; 3
    2c60:	66 e0       	ldi	r22, 0x06	; 6
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
}
    2c68:	2f 96       	adiw	r28, 0x0f	; 15
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LCD_voidIntialization>:


extern void LCD_voidIntialization (void)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	aa 97       	sbiw	r28, 0x2a	; 42
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(35);

	/***********************************/
	/*      Set PORT A & D output      */
	/***********************************/
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	64 e0       	ldi	r22, 0x04	; 4
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	65 e0       	ldi	r22, 0x05	; 5
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	66 e0       	ldi	r22, 0x06	; 6
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection (LCD_Data_PORT,0b11111111);
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	6f ef       	ldi	r22, 0xFF	; 255
    2cb0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_voidSetPortDirection>


	/***********************************/
	/*           Function Set          */
	/***********************************/
	LCD_voidSend_Command(0b00111100);//0->1
    2cb4:	8c e3       	ldi	r24, 0x3C	; 60
    2cb6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e8       	ldi	r26, 0x80	; 128
    2cc0:	bf e3       	ldi	r27, 0x3F	; 63
    2cc2:	8f a3       	std	Y+39, r24	; 0x27
    2cc4:	98 a7       	std	Y+40, r25	; 0x28
    2cc6:	a9 a7       	std	Y+41, r26	; 0x29
    2cc8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6f a1       	ldd	r22, Y+39	; 0x27
    2ccc:	78 a5       	ldd	r23, Y+40	; 0x28
    2cce:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a ef       	ldi	r20, 0xFA	; 250
    2cd8:	54 e4       	ldi	r21, 0x44	; 68
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8b a3       	std	Y+35, r24	; 0x23
    2ce4:	9c a3       	std	Y+36, r25	; 0x24
    2ce6:	ad a3       	std	Y+37, r26	; 0x25
    2ce8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cea:	6b a1       	ldd	r22, Y+35	; 0x23
    2cec:	7c a1       	ldd	r23, Y+36	; 0x24
    2cee:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <LCD_voidIntialization+0x92>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9a a3       	std	Y+34, r25	; 0x22
    2d08:	89 a3       	std	Y+33, r24	; 0x21
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <LCD_voidIntialization+0x110>
	else if (__tmp > 65535)
    2d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d10:	8d a1       	ldd	r24, Y+37	; 0x25
    2d12:	9e a1       	ldd	r25, Y+38	; 0x26
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <LCD_voidIntialization+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6f a1       	ldd	r22, Y+39	; 0x27
    2d26:	78 a5       	ldd	r23, Y+40	; 0x28
    2d28:	89 a5       	ldd	r24, Y+41	; 0x29
    2d2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <LCD_voidIntialization+0xf2>
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	98 a3       	std	Y+32, r25	; 0x20
    2d54:	8f 8f       	std	Y+31, r24	; 0x1f
    2d56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d58:	98 a1       	ldd	r25, Y+32	; 0x20
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_voidIntialization+0xe0>
    2d5e:	98 a3       	std	Y+32, r25	; 0x20
    2d60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9a a3       	std	Y+34, r25	; 0x22
    2d6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <LCD_voidIntialization+0xd4>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <LCD_voidIntialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6b a1       	ldd	r22, Y+35	; 0x23
    2d78:	7c a1       	ldd	r23, Y+36	; 0x24
    2d7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9a a3       	std	Y+34, r25	; 0x22
    2d88:	89 a3       	std	Y+33, r24	; 0x21
    2d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d90:	8d 8f       	std	Y+29, r24	; 0x1d
    2d92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_voidIntialization+0x11c>
    2d9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d9c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/***********************************/
	/*     Display off/on control      */
	/***********************************/
	LCD_voidSend_Command(0b00001111);
    2d9e:	8f e0       	ldi	r24, 0x0F	; 15
    2da0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	a0 e8       	ldi	r26, 0x80	; 128
    2daa:	bf e3       	ldi	r27, 0x3F	; 63
    2dac:	89 8f       	std	Y+25, r24	; 0x19
    2dae:	9a 8f       	std	Y+26, r25	; 0x1a
    2db0:	ab 8f       	std	Y+27, r26	; 0x1b
    2db2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	69 8d       	ldd	r22, Y+25	; 0x19
    2db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	4a ef       	ldi	r20, 0xFA	; 250
    2dc2:	54 e4       	ldi	r21, 0x44	; 68
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	8d 8b       	std	Y+21, r24	; 0x15
    2dce:	9e 8b       	std	Y+22, r25	; 0x16
    2dd0:	af 8b       	std	Y+23, r26	; 0x17
    2dd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	98 8d       	ldd	r25, Y+24	; 0x18
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5f e3       	ldi	r21, 0x3F	; 63
    2de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de8:	88 23       	and	r24, r24
    2dea:	2c f4       	brge	.+10     	; 0x2df6 <LCD_voidIntialization+0x17c>
		__ticks = 1;
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9c 8b       	std	Y+20, r25	; 0x14
    2df2:	8b 8b       	std	Y+19, r24	; 0x13
    2df4:	3f c0       	rjmp	.+126    	; 0x2e74 <LCD_voidIntialization+0x1fa>
	else if (__tmp > 65535)
    2df6:	6d 89       	ldd	r22, Y+21	; 0x15
    2df8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	3f ef       	ldi	r19, 0xFF	; 255
    2e02:	4f e7       	ldi	r20, 0x7F	; 127
    2e04:	57 e4       	ldi	r21, 0x47	; 71
    2e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	4c f5       	brge	.+82     	; 0x2e60 <LCD_voidIntialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e2       	ldi	r20, 0x20	; 32
    2e1c:	51 e4       	ldi	r21, 0x41	; 65
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <LCD_voidIntialization+0x1dc>
    2e38:	88 ec       	ldi	r24, 0xC8	; 200
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9a 8b       	std	Y+18, r25	; 0x12
    2e3e:	89 8b       	std	Y+17, r24	; 0x11
    2e40:	89 89       	ldd	r24, Y+17	; 0x11
    2e42:	9a 89       	ldd	r25, Y+18	; 0x12
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_voidIntialization+0x1ca>
    2e48:	9a 8b       	std	Y+18, r25	; 0x12
    2e4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	9c 8b       	std	Y+20, r25	; 0x14
    2e54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e56:	8b 89       	ldd	r24, Y+19	; 0x13
    2e58:	9c 89       	ldd	r25, Y+20	; 0x14
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <LCD_voidIntialization+0x1be>
    2e5e:	14 c0       	rjmp	.+40     	; 0x2e88 <LCD_voidIntialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	6d 89       	ldd	r22, Y+21	; 0x15
    2e62:	7e 89       	ldd	r23, Y+22	; 0x16
    2e64:	8f 89       	ldd	r24, Y+23	; 0x17
    2e66:	98 8d       	ldd	r25, Y+24	; 0x18
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9c 8b       	std	Y+20, r25	; 0x14
    2e72:	8b 8b       	std	Y+19, r24	; 0x13
    2e74:	8b 89       	ldd	r24, Y+19	; 0x13
    2e76:	9c 89       	ldd	r25, Y+20	; 0x14
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    2e7a:	8f 87       	std	Y+15, r24	; 0x0f
    2e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7e:	98 89       	ldd	r25, Y+16	; 0x10
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_voidIntialization+0x206>
    2e84:	98 8b       	std	Y+16, r25	; 0x10
    2e86:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/***********************************/
	/*         Display Clear           */
	/***********************************/
	LCD_voidSend_Command(0b00000001);
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	a0 e8       	ldi	r26, 0x80	; 128
    2e94:	bf e3       	ldi	r27, 0x3F	; 63
    2e96:	8b 87       	std	Y+11, r24	; 0x0b
    2e98:	9c 87       	std	Y+12, r25	; 0x0c
    2e9a:	ad 87       	std	Y+13, r26	; 0x0d
    2e9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	4a ef       	ldi	r20, 0xFA	; 250
    2eac:	54 e4       	ldi	r21, 0x44	; 68
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	8f 83       	std	Y+7, r24	; 0x07
    2eb8:	98 87       	std	Y+8, r25	; 0x08
    2eba:	a9 87       	std	Y+9, r26	; 0x09
    2ebc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e8       	ldi	r20, 0x80	; 128
    2ecc:	5f e3       	ldi	r21, 0x3F	; 63
    2ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed2:	88 23       	and	r24, r24
    2ed4:	2c f4       	brge	.+10     	; 0x2ee0 <LCD_voidIntialization+0x266>
		__ticks = 1;
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	3f c0       	rjmp	.+126    	; 0x2f5e <LCD_voidIntialization+0x2e4>
	else if (__tmp > 65535)
    2ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee2:	78 85       	ldd	r23, Y+8	; 0x08
    2ee4:	89 85       	ldd	r24, Y+9	; 0x09
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	3f ef       	ldi	r19, 0xFF	; 255
    2eec:	4f e7       	ldi	r20, 0x7F	; 127
    2eee:	57 e4       	ldi	r21, 0x47	; 71
    2ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef4:	18 16       	cp	r1, r24
    2ef6:	4c f5       	brge	.+82     	; 0x2f4a <LCD_voidIntialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e2       	ldi	r20, 0x20	; 32
    2f06:	51 e4       	ldi	r21, 0x41	; 65
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	0f c0       	rjmp	.+30     	; 0x2f40 <LCD_voidIntialization+0x2c6>
    2f22:	88 ec       	ldi	r24, 0xC8	; 200
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	9c 83       	std	Y+4, r25	; 0x04
    2f28:	8b 83       	std	Y+3, r24	; 0x03
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <LCD_voidIntialization+0x2b4>
    2f32:	9c 83       	std	Y+4, r25	; 0x04
    2f34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	9e 83       	std	Y+6, r25	; 0x06
    2f3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	69 f7       	brne	.-38     	; 0x2f22 <LCD_voidIntialization+0x2a8>
    2f48:	14 c0       	rjmp	.+40     	; 0x2f72 <LCD_voidIntialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4c:	78 85       	ldd	r23, Y+8	; 0x08
    2f4e:	89 85       	ldd	r24, Y+9	; 0x09
    2f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f60:	9e 81       	ldd	r25, Y+6	; 0x06
    2f62:	9a 83       	std	Y+2, r25	; 0x02
    2f64:	89 83       	std	Y+1, r24	; 0x01
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <LCD_voidIntialization+0x2f0>
    2f6e:	9a 83       	std	Y+2, r25	; 0x02
    2f70:	89 83       	std	Y+1, r24	; 0x01
	//LCD_voidSend_Command(0x06);
	/* Wait more than 1.39 ms */
	//_delay_ms(20);


}
    2f72:	aa 96       	adiw	r28, 0x2a	; 42
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <LCD_voidSend_Data>:

extern void LCD_voidSend_Data (u8 copy_u8data)
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	2f 97       	sbiw	r28, 0x0f	; 15
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RW, DIO_LOW);
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	65 e0       	ldi	r22, 0x05	; 5
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8RS, DIO_HIGH);
    2fa4:	83 e0       	ldi	r24, 0x03	; 3
    2fa6:	64 e0       	ldi	r22, 0x04	; 4
    2fa8:	41 e0       	ldi	r20, 0x01	; 1
    2faa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_Data_PORT,copy_u8data);
    2fae:	82 e0       	ldi	r24, 0x02	; 2
    2fb0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fb2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_HIGH);
    2fb6:	83 e0       	ldi	r24, 0x03	; 3
    2fb8:	66 e0       	ldi	r22, 0x06	; 6
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e4       	ldi	r27, 0x40	; 64
    2fc8:	8b 87       	std	Y+11, r24	; 0x0b
    2fca:	9c 87       	std	Y+12, r25	; 0x0c
    2fcc:	ad 87       	std	Y+13, r26	; 0x0d
    2fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4a ef       	ldi	r20, 0xFA	; 250
    2fde:	54 e4       	ldi	r21, 0x44	; 68
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8f 83       	std	Y+7, r24	; 0x07
    2fea:	98 87       	std	Y+8, r25	; 0x08
    2fec:	a9 87       	std	Y+9, r26	; 0x09
    2fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	2c f4       	brge	.+10     	; 0x3012 <LCD_voidSend_Data+0x8e>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	3f c0       	rjmp	.+126    	; 0x3090 <LCD_voidSend_Data+0x10c>
	else if (__tmp > 65535)
    3012:	6f 81       	ldd	r22, Y+7	; 0x07
    3014:	78 85       	ldd	r23, Y+8	; 0x08
    3016:	89 85       	ldd	r24, Y+9	; 0x09
    3018:	9a 85       	ldd	r25, Y+10	; 0x0a
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	4c f5       	brge	.+82     	; 0x307c <LCD_voidSend_Data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	6b 85       	ldd	r22, Y+11	; 0x0b
    302c:	7c 85       	ldd	r23, Y+12	; 0x0c
    302e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3030:	9e 85       	ldd	r25, Y+14	; 0x0e
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <LCD_voidSend_Data+0xee>
    3054:	88 ec       	ldi	r24, 0xC8	; 200
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <LCD_voidSend_Data+0xdc>
    3064:	9c 83       	std	Y+4, r25	; 0x04
    3066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	69 f7       	brne	.-38     	; 0x3054 <LCD_voidSend_Data+0xd0>
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <LCD_voidSend_Data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <LCD_voidSend_Data+0x118>
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	66 e0       	ldi	r22, 0x06	; 6
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
}
    30ae:	2f 96       	adiw	r28, 0x0f	; 15
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	08 95       	ret

000030c0 <LCD_voidSend_String>:

void LCD_voidSend_String (char *copy_ptrString)
{
    30c0:	df 93       	push	r29
    30c2:	cf 93       	push	r28
    30c4:	00 d0       	rcall	.+0      	; 0x30c6 <LCD_voidSend_String+0x6>
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	0b c0       	rjmp	.+22     	; 0x30e6 <LCD_voidSend_String+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_Data (*copy_ptrString++);
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	20 81       	ld	r18, Z
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	01 96       	adiw	r24, 0x01	; 1
    30dc:	9a 83       	std	Y+2, r25	; 0x02
    30de:	89 83       	std	Y+1, r24	; 0x01
    30e0:	82 2f       	mov	r24, r18
    30e2:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <LCD_voidSend_Data>
	DIO_voidSetPinValue(LCD_CNT_PORT, LCD_u8EN, DIO_LOW);
}

void LCD_voidSend_String (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    30e6:	e9 81       	ldd	r30, Y+1	; 0x01
    30e8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ea:	80 81       	ld	r24, Z
    30ec:	88 23       	and	r24, r24
    30ee:	81 f7       	brne	.-32     	; 0x30d0 <LCD_voidSend_String+0x10>
	{
		LCD_voidSend_Data (*copy_ptrString++);
	}
}
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <LCD_voidSend_4bitCommand>:


extern void LCD_voidSend_4bitCommand (u8 copy_u8Command)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	e5 97       	sbiw	r28, 0x35	; 53
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	8d ab       	std	Y+53, r24	; 0x35
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    3110:	83 e0       	ldi	r24, 0x03	; 3
    3112:	64 e0       	ldi	r22, 0x04	; 4
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,4));
    3124:	8d a9       	ldd	r24, Y+53	; 0x35
    3126:	82 95       	swap	r24
    3128:	8f 70       	andi	r24, 0x0F	; 15
    312a:	98 2f       	mov	r25, r24
    312c:	91 70       	andi	r25, 0x01	; 1
    312e:	82 e0       	ldi	r24, 0x02	; 2
    3130:	64 e0       	ldi	r22, 0x04	; 4
    3132:	49 2f       	mov	r20, r25
    3134:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,5));
    3138:	8d a9       	ldd	r24, Y+53	; 0x35
    313a:	82 95       	swap	r24
    313c:	86 95       	lsr	r24
    313e:	87 70       	andi	r24, 0x07	; 7
    3140:	98 2f       	mov	r25, r24
    3142:	91 70       	andi	r25, 0x01	; 1
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	65 e0       	ldi	r22, 0x05	; 5
    3148:	49 2f       	mov	r20, r25
    314a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,6));
    314e:	8d a9       	ldd	r24, Y+53	; 0x35
    3150:	82 95       	swap	r24
    3152:	86 95       	lsr	r24
    3154:	86 95       	lsr	r24
    3156:	83 70       	andi	r24, 0x03	; 3
    3158:	98 2f       	mov	r25, r24
    315a:	91 70       	andi	r25, 0x01	; 1
    315c:	82 e0       	ldi	r24, 0x02	; 2
    315e:	66 e0       	ldi	r22, 0x06	; 6
    3160:	49 2f       	mov	r20, r25
    3162:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,7));
    3166:	8d a9       	ldd	r24, Y+53	; 0x35
    3168:	98 2f       	mov	r25, r24
    316a:	99 1f       	adc	r25, r25
    316c:	99 27       	eor	r25, r25
    316e:	99 1f       	adc	r25, r25
    3170:	82 e0       	ldi	r24, 0x02	; 2
    3172:	67 e0       	ldi	r22, 0x07	; 7
    3174:	49 2f       	mov	r20, r25
    3176:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	66 e0       	ldi	r22, 0x06	; 6
    317e:	41 e0       	ldi	r20, 0x01	; 1
    3180:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	a0 e0       	ldi	r26, 0x00	; 0
    318a:	b0 e4       	ldi	r27, 0x40	; 64
    318c:	89 ab       	std	Y+49, r24	; 0x31
    318e:	9a ab       	std	Y+50, r25	; 0x32
    3190:	ab ab       	std	Y+51, r26	; 0x33
    3192:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3194:	69 a9       	ldd	r22, Y+49	; 0x31
    3196:	7a a9       	ldd	r23, Y+50	; 0x32
    3198:	8b a9       	ldd	r24, Y+51	; 0x33
    319a:	9c a9       	ldd	r25, Y+52	; 0x34
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a ef       	ldi	r20, 0xFA	; 250
    31a2:	54 e4       	ldi	r21, 0x44	; 68
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8d a7       	std	Y+45, r24	; 0x2d
    31ae:	9e a7       	std	Y+46, r25	; 0x2e
    31b0:	af a7       	std	Y+47, r26	; 0x2f
    31b2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    31b4:	6d a5       	ldd	r22, Y+45	; 0x2d
    31b6:	7e a5       	ldd	r23, Y+46	; 0x2e
    31b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ba:	98 a9       	ldd	r25, Y+48	; 0x30
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <LCD_voidSend_4bitCommand+0xdc>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9c a7       	std	Y+44, r25	; 0x2c
    31d2:	8b a7       	std	Y+43, r24	; 0x2b
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <LCD_voidSend_4bitCommand+0x15a>
	else if (__tmp > 65535)
    31d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    31d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    31da:	8f a5       	ldd	r24, Y+47	; 0x2f
    31dc:	98 a9       	ldd	r25, Y+48	; 0x30
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <LCD_voidSend_4bitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	69 a9       	ldd	r22, Y+49	; 0x31
    31f0:	7a a9       	ldd	r23, Y+50	; 0x32
    31f2:	8b a9       	ldd	r24, Y+51	; 0x33
    31f4:	9c a9       	ldd	r25, Y+52	; 0x34
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9c a7       	std	Y+44, r25	; 0x2c
    3214:	8b a7       	std	Y+43, r24	; 0x2b
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <LCD_voidSend_4bitCommand+0x13c>
    3218:	88 ec       	ldi	r24, 0xC8	; 200
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9a a7       	std	Y+42, r25	; 0x2a
    321e:	89 a7       	std	Y+41, r24	; 0x29
    3220:	89 a5       	ldd	r24, Y+41	; 0x29
    3222:	9a a5       	ldd	r25, Y+42	; 0x2a
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_voidSend_4bitCommand+0x12a>
    3228:	9a a7       	std	Y+42, r25	; 0x2a
    322a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8b a5       	ldd	r24, Y+43	; 0x2b
    322e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9c a7       	std	Y+44, r25	; 0x2c
    3234:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8b a5       	ldd	r24, Y+43	; 0x2b
    3238:	9c a5       	ldd	r25, Y+44	; 0x2c
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	69 f7       	brne	.-38     	; 0x3218 <LCD_voidSend_4bitCommand+0x11e>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <LCD_voidSend_4bitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	6d a5       	ldd	r22, Y+45	; 0x2d
    3242:	7e a5       	ldd	r23, Y+46	; 0x2e
    3244:	8f a5       	ldd	r24, Y+47	; 0x2f
    3246:	98 a9       	ldd	r25, Y+48	; 0x30
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9c a7       	std	Y+44, r25	; 0x2c
    3252:	8b a7       	std	Y+43, r24	; 0x2b
    3254:	8b a5       	ldd	r24, Y+43	; 0x2b
    3256:	9c a5       	ldd	r25, Y+44	; 0x2c
    3258:	98 a7       	std	Y+40, r25	; 0x28
    325a:	8f a3       	std	Y+39, r24	; 0x27
    325c:	8f a1       	ldd	r24, Y+39	; 0x27
    325e:	98 a5       	ldd	r25, Y+40	; 0x28
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_voidSend_4bitCommand+0x166>
    3264:	98 a7       	std	Y+40, r25	; 0x28
    3266:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    3268:	83 e0       	ldi	r24, 0x03	; 3
    326a:	66 e0       	ldi	r22, 0x06	; 6
    326c:	40 e0       	ldi	r20, 0x00	; 0
    326e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a8 e4       	ldi	r26, 0x48	; 72
    3278:	b3 e4       	ldi	r27, 0x43	; 67
    327a:	8b a3       	std	Y+35, r24	; 0x23
    327c:	9c a3       	std	Y+36, r25	; 0x24
    327e:	ad a3       	std	Y+37, r26	; 0x25
    3280:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3282:	6b a1       	ldd	r22, Y+35	; 0x23
    3284:	7c a1       	ldd	r23, Y+36	; 0x24
    3286:	8d a1       	ldd	r24, Y+37	; 0x25
    3288:	9e a1       	ldd	r25, Y+38	; 0x26
    328a:	2b ea       	ldi	r18, 0xAB	; 171
    328c:	3a ea       	ldi	r19, 0xAA	; 170
    328e:	4a e2       	ldi	r20, 0x2A	; 42
    3290:	50 e4       	ldi	r21, 0x40	; 64
    3292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	8f 8f       	std	Y+31, r24	; 0x1f
    329c:	98 a3       	std	Y+32, r25	; 0x20
    329e:	a9 a3       	std	Y+33, r26	; 0x21
    32a0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    32a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32a4:	78 a1       	ldd	r23, Y+32	; 0x20
    32a6:	89 a1       	ldd	r24, Y+33	; 0x21
    32a8:	9a a1       	ldd	r25, Y+34	; 0x22
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	1c f4       	brge	.+6      	; 0x32c0 <LCD_voidSend_4bitCommand+0x1c6>
		__ticks = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	8e 8f       	std	Y+30, r24	; 0x1e
    32be:	91 c0       	rjmp	.+290    	; 0x33e2 <LCD_voidSend_4bitCommand+0x2e8>
	else if (__tmp > 255)
    32c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    32c2:	78 a1       	ldd	r23, Y+32	; 0x20
    32c4:	89 a1       	ldd	r24, Y+33	; 0x21
    32c6:	9a a1       	ldd	r25, Y+34	; 0x22
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4f e7       	ldi	r20, 0x7F	; 127
    32ce:	53 e4       	ldi	r21, 0x43	; 67
    32d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d4:	18 16       	cp	r1, r24
    32d6:	0c f0       	brlt	.+2      	; 0x32da <LCD_voidSend_4bitCommand+0x1e0>
    32d8:	7b c0       	rjmp	.+246    	; 0x33d0 <LCD_voidSend_4bitCommand+0x2d6>
	{
		_delay_ms(__us / 1000.0);
    32da:	6b a1       	ldd	r22, Y+35	; 0x23
    32dc:	7c a1       	ldd	r23, Y+36	; 0x24
    32de:	8d a1       	ldd	r24, Y+37	; 0x25
    32e0:	9e a1       	ldd	r25, Y+38	; 0x26
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	4a e7       	ldi	r20, 0x7A	; 122
    32e8:	54 e4       	ldi	r21, 0x44	; 68
    32ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	8a 8f       	std	Y+26, r24	; 0x1a
    32f4:	9b 8f       	std	Y+27, r25	; 0x1b
    32f6:	ac 8f       	std	Y+28, r26	; 0x1c
    32f8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    32fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3300:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8e 8b       	std	Y+22, r24	; 0x16
    3314:	9f 8b       	std	Y+23, r25	; 0x17
    3316:	a8 8f       	std	Y+24, r26	; 0x18
    3318:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    331a:	6e 89       	ldd	r22, Y+22	; 0x16
    331c:	7f 89       	ldd	r23, Y+23	; 0x17
    331e:	88 8d       	ldd	r24, Y+24	; 0x18
    3320:	99 8d       	ldd	r25, Y+25	; 0x19
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <LCD_voidSend_4bitCommand+0x242>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9d 8b       	std	Y+21, r25	; 0x15
    3338:	8c 8b       	std	Y+20, r24	; 0x14
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <LCD_voidSend_4bitCommand+0x2c0>
	else if (__tmp > 65535)
    333c:	6e 89       	ldd	r22, Y+22	; 0x16
    333e:	7f 89       	ldd	r23, Y+23	; 0x17
    3340:	88 8d       	ldd	r24, Y+24	; 0x18
    3342:	99 8d       	ldd	r25, Y+25	; 0x19
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <LCD_voidSend_4bitCommand+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3356:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3358:	8c 8d       	ldd	r24, Y+28	; 0x1c
    335a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9d 8b       	std	Y+21, r25	; 0x15
    337a:	8c 8b       	std	Y+20, r24	; 0x14
    337c:	0f c0       	rjmp	.+30     	; 0x339c <LCD_voidSend_4bitCommand+0x2a2>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9b 8b       	std	Y+19, r25	; 0x13
    3384:	8a 8b       	std	Y+18, r24	; 0x12
    3386:	8a 89       	ldd	r24, Y+18	; 0x12
    3388:	9b 89       	ldd	r25, Y+19	; 0x13
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <LCD_voidSend_4bitCommand+0x290>
    338e:	9b 8b       	std	Y+19, r25	; 0x13
    3390:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8c 89       	ldd	r24, Y+20	; 0x14
    3394:	9d 89       	ldd	r25, Y+21	; 0x15
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9d 8b       	std	Y+21, r25	; 0x15
    339a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8c 89       	ldd	r24, Y+20	; 0x14
    339e:	9d 89       	ldd	r25, Y+21	; 0x15
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <LCD_voidSend_4bitCommand+0x284>
    33a4:	24 c0       	rjmp	.+72     	; 0x33ee <LCD_voidSend_4bitCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6e 89       	ldd	r22, Y+22	; 0x16
    33a8:	7f 89       	ldd	r23, Y+23	; 0x17
    33aa:	88 8d       	ldd	r24, Y+24	; 0x18
    33ac:	99 8d       	ldd	r25, Y+25	; 0x19
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9d 8b       	std	Y+21, r25	; 0x15
    33b8:	8c 8b       	std	Y+20, r24	; 0x14
    33ba:	8c 89       	ldd	r24, Y+20	; 0x14
    33bc:	9d 89       	ldd	r25, Y+21	; 0x15
    33be:	99 8b       	std	Y+17, r25	; 0x11
    33c0:	88 8b       	std	Y+16, r24	; 0x10
    33c2:	88 89       	ldd	r24, Y+16	; 0x10
    33c4:	99 89       	ldd	r25, Y+17	; 0x11
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <LCD_voidSend_4bitCommand+0x2cc>
    33ca:	99 8b       	std	Y+17, r25	; 0x11
    33cc:	88 8b       	std	Y+16, r24	; 0x10
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <LCD_voidSend_4bitCommand+0x2f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    33d2:	78 a1       	ldd	r23, Y+32	; 0x20
    33d4:	89 a1       	ldd	r24, Y+33	; 0x21
    33d6:	9a a1       	ldd	r25, Y+34	; 0x22
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	8e 8f       	std	Y+30, r24	; 0x1e
    33e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33e4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	8a 95       	dec	r24
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <LCD_voidSend_4bitCommand+0x2ee>
    33ec:	8f 87       	std	Y+15, r24	; 0x0f
		/*///////////////////////////////////////////////////////////////////////////////////*/
		_delay_us(200);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_LOW);
    33ee:	83 e0       	ldi	r24, 0x03	; 3
    33f0:	64 e0       	ldi	r22, 0x04	; 4
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RW,DIO_LOW);
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	65 e0       	ldi	r22, 0x05	; 5
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8Command,0));
    3402:	8d a9       	ldd	r24, Y+53	; 0x35
    3404:	98 2f       	mov	r25, r24
    3406:	91 70       	andi	r25, 0x01	; 1
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	64 e0       	ldi	r22, 0x04	; 4
    340c:	49 2f       	mov	r20, r25
    340e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8Command,1));
    3412:	8d a9       	ldd	r24, Y+53	; 0x35
    3414:	86 95       	lsr	r24
    3416:	98 2f       	mov	r25, r24
    3418:	91 70       	andi	r25, 0x01	; 1
    341a:	82 e0       	ldi	r24, 0x02	; 2
    341c:	65 e0       	ldi	r22, 0x05	; 5
    341e:	49 2f       	mov	r20, r25
    3420:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8Command,2));
    3424:	8d a9       	ldd	r24, Y+53	; 0x35
    3426:	86 95       	lsr	r24
    3428:	86 95       	lsr	r24
    342a:	98 2f       	mov	r25, r24
    342c:	91 70       	andi	r25, 0x01	; 1
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	66 e0       	ldi	r22, 0x06	; 6
    3432:	49 2f       	mov	r20, r25
    3434:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8Command,3));
    3438:	8d a9       	ldd	r24, Y+53	; 0x35
    343a:	86 95       	lsr	r24
    343c:	86 95       	lsr	r24
    343e:	86 95       	lsr	r24
    3440:	98 2f       	mov	r25, r24
    3442:	91 70       	andi	r25, 0x01	; 1
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	67 e0       	ldi	r22, 0x07	; 7
    3448:	49 2f       	mov	r20, r25
    344a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>

		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	66 e0       	ldi	r22, 0x06	; 6
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	a0 e0       	ldi	r26, 0x00	; 0
    345e:	b0 e4       	ldi	r27, 0x40	; 64
    3460:	8b 87       	std	Y+11, r24	; 0x0b
    3462:	9c 87       	std	Y+12, r25	; 0x0c
    3464:	ad 87       	std	Y+13, r26	; 0x0d
    3466:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3468:	6b 85       	ldd	r22, Y+11	; 0x0b
    346a:	7c 85       	ldd	r23, Y+12	; 0x0c
    346c:	8d 85       	ldd	r24, Y+13	; 0x0d
    346e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a ef       	ldi	r20, 0xFA	; 250
    3476:	54 e4       	ldi	r21, 0x44	; 68
    3478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	8f 83       	std	Y+7, r24	; 0x07
    3482:	98 87       	std	Y+8, r25	; 0x08
    3484:	a9 87       	std	Y+9, r26	; 0x09
    3486:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3488:	6f 81       	ldd	r22, Y+7	; 0x07
    348a:	78 85       	ldd	r23, Y+8	; 0x08
    348c:	89 85       	ldd	r24, Y+9	; 0x09
    348e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e8       	ldi	r20, 0x80	; 128
    3496:	5f e3       	ldi	r21, 0x3F	; 63
    3498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    349c:	88 23       	and	r24, r24
    349e:	2c f4       	brge	.+10     	; 0x34aa <LCD_voidSend_4bitCommand+0x3b0>
		__ticks = 1;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
    34a8:	3f c0       	rjmp	.+126    	; 0x3528 <LCD_voidSend_4bitCommand+0x42e>
	else if (__tmp > 65535)
    34aa:	6f 81       	ldd	r22, Y+7	; 0x07
    34ac:	78 85       	ldd	r23, Y+8	; 0x08
    34ae:	89 85       	ldd	r24, Y+9	; 0x09
    34b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	3f ef       	ldi	r19, 0xFF	; 255
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	57 e4       	ldi	r21, 0x47	; 71
    34ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34be:	18 16       	cp	r1, r24
    34c0:	4c f5       	brge	.+82     	; 0x3514 <LCD_voidSend_4bitCommand+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9e 83       	std	Y+6, r25	; 0x06
    34e8:	8d 83       	std	Y+5, r24	; 0x05
    34ea:	0f c0       	rjmp	.+30     	; 0x350a <LCD_voidSend_4bitCommand+0x410>
    34ec:	88 ec       	ldi	r24, 0xC8	; 200
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34f4:	8b 81       	ldd	r24, Y+3	; 0x03
    34f6:	9c 81       	ldd	r25, Y+4	; 0x04
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <LCD_voidSend_4bitCommand+0x3fe>
    34fc:	9c 83       	std	Y+4, r25	; 0x04
    34fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	9e 83       	std	Y+6, r25	; 0x06
    3508:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350a:	8d 81       	ldd	r24, Y+5	; 0x05
    350c:	9e 81       	ldd	r25, Y+6	; 0x06
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	69 f7       	brne	.-38     	; 0x34ec <LCD_voidSend_4bitCommand+0x3f2>
    3512:	14 c0       	rjmp	.+40     	; 0x353c <LCD_voidSend_4bitCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3514:	6f 81       	ldd	r22, Y+7	; 0x07
    3516:	78 85       	ldd	r23, Y+8	; 0x08
    3518:	89 85       	ldd	r24, Y+9	; 0x09
    351a:	9a 85       	ldd	r25, Y+10	; 0x0a
    351c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	9e 83       	std	Y+6, r25	; 0x06
    3526:	8d 83       	std	Y+5, r24	; 0x05
    3528:	8d 81       	ldd	r24, Y+5	; 0x05
    352a:	9e 81       	ldd	r25, Y+6	; 0x06
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <LCD_voidSend_4bitCommand+0x43a>
    3538:	9a 83       	std	Y+2, r25	; 0x02
    353a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    353c:	83 e0       	ldi	r24, 0x03	; 3
    353e:	66 e0       	ldi	r22, 0x06	; 6
    3540:	40 e0       	ldi	r20, 0x00	; 0
    3542:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
}
    3546:	e5 96       	adiw	r28, 0x35	; 53
    3548:	0f b6       	in	r0, 0x3f	; 63
    354a:	f8 94       	cli
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	0f be       	out	0x3f, r0	; 63
    3550:	cd bf       	out	0x3d, r28	; 61
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <LCD_4bitIntialization>:

extern void LCD_4bitIntialization (void)
{
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	2e 97       	sbiw	r28, 0x0e	; 14
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_CNT_PORT,LCD_u8RS,DIO_OUTPUT);
    356c:	83 e0       	ldi	r24, 0x03	; 3
    356e:	64 e0       	ldi	r22, 0x04	; 4
    3570:	41 e0       	ldi	r20, 0x01	; 1
    3572:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8RW, DIO_OUTPUT);
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	65 e0       	ldi	r22, 0x05	; 5
    357a:	41 e0       	ldi	r20, 0x01	; 1
    357c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CNT_PORT, LCD_u8EN, DIO_OUTPUT);
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	66 e0       	ldi	r22, 0x06	; 6
    3584:	41 e0       	ldi	r20, 0x01	; 1
    3586:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN4,DIO_OUTPUT);
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	64 e0       	ldi	r22, 0x04	; 4
    358e:	41 e0       	ldi	r20, 0x01	; 1
    3590:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN5,DIO_OUTPUT);
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	65 e0       	ldi	r22, 0x05	; 5
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN6,DIO_OUTPUT);
    359e:	82 e0       	ldi	r24, 0x02	; 2
    35a0:	66 e0       	ldi	r22, 0x06	; 6
    35a2:	41 e0       	ldi	r20, 0x01	; 1
    35a4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_PORT,DIO_PIN7,DIO_OUTPUT);
    35a8:	82 e0       	ldi	r24, 0x02	; 2
    35aa:	67 e0       	ldi	r22, 0x07	; 7
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_voidSetPinDirection>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	a0 ea       	ldi	r26, 0xA0	; 160
    35b8:	b1 e4       	ldi	r27, 0x41	; 65
    35ba:	8b 87       	std	Y+11, r24	; 0x0b
    35bc:	9c 87       	std	Y+12, r25	; 0x0c
    35be:	ad 87       	std	Y+13, r26	; 0x0d
    35c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	4a ef       	ldi	r20, 0xFA	; 250
    35d0:	54 e4       	ldi	r21, 0x44	; 68
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	8f 83       	std	Y+7, r24	; 0x07
    35dc:	98 87       	std	Y+8, r25	; 0x08
    35de:	a9 87       	std	Y+9, r26	; 0x09
    35e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	40 e8       	ldi	r20, 0x80	; 128
    35f0:	5f e3       	ldi	r21, 0x3F	; 63
    35f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f6:	88 23       	and	r24, r24
    35f8:	2c f4       	brge	.+10     	; 0x3604 <LCD_4bitIntialization+0xac>
		__ticks = 1;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	3f c0       	rjmp	.+126    	; 0x3682 <LCD_4bitIntialization+0x12a>
	else if (__tmp > 65535)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	3f ef       	ldi	r19, 0xFF	; 255
    3610:	4f e7       	ldi	r20, 0x7F	; 127
    3612:	57 e4       	ldi	r21, 0x47	; 71
    3614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3618:	18 16       	cp	r1, r24
    361a:	4c f5       	brge	.+82     	; 0x366e <LCD_4bitIntialization+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    361c:	6b 85       	ldd	r22, Y+11	; 0x0b
    361e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3620:	8d 85       	ldd	r24, Y+13	; 0x0d
    3622:	9e 85       	ldd	r25, Y+14	; 0x0e
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e2       	ldi	r20, 0x20	; 32
    362a:	51 e4       	ldi	r21, 0x41	; 65
    362c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	0f c0       	rjmp	.+30     	; 0x3664 <LCD_4bitIntialization+0x10c>
    3646:	88 ec       	ldi	r24, 0xC8	; 200
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 83       	std	Y+4, r25	; 0x04
    364c:	8b 83       	std	Y+3, r24	; 0x03
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	9c 81       	ldd	r25, Y+4	; 0x04
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	f1 f7       	brne	.-4      	; 0x3652 <LCD_4bitIntialization+0xfa>
    3656:	9c 83       	std	Y+4, r25	; 0x04
    3658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f7       	brne	.-38     	; 0x3646 <LCD_4bitIntialization+0xee>
    366c:	14 c0       	rjmp	.+40     	; 0x3696 <LCD_4bitIntialization+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	f1 f7       	brne	.-4      	; 0x368e <LCD_4bitIntialization+0x136>
    3692:	9a 83       	std	Y+2, r25	; 0x02
    3694:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

		LCD_voidSend_4bitCommand(0x33);
    3696:	83 e3       	ldi	r24, 0x33	; 51
    3698:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x32);	/* Send for 4 bit initialization of LCD  */
    369c:	82 e3       	ldi	r24, 0x32	; 50
    369e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    36a2:	88 e2       	ldi	r24, 0x28	; 40
    36a4:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x0c);	/* Display on cursor off */
    36a8:	8c e0       	ldi	r24, 0x0C	; 12
    36aa:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x06);	/* Increment cursor (shift cursor to right) */
    36ae:	86 e0       	ldi	r24, 0x06	; 6
    36b0:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
		LCD_voidSend_4bitCommand(0x01);	/* Clear display screen */
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
}
    36ba:	2e 96       	adiw	r28, 0x0e	; 14
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <LCD_voidSend_4bitData>:


extern void LCD_voidSend_4bitData (u8 copy_u8data)
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	e5 97       	sbiw	r28, 0x35	; 53
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	8d ab       	std	Y+53, r24	; 0x35
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,4));
    36e2:	8d a9       	ldd	r24, Y+53	; 0x35
    36e4:	82 95       	swap	r24
    36e6:	8f 70       	andi	r24, 0x0F	; 15
    36e8:	98 2f       	mov	r25, r24
    36ea:	91 70       	andi	r25, 0x01	; 1
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	64 e0       	ldi	r22, 0x04	; 4
    36f0:	49 2f       	mov	r20, r25
    36f2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,5));
    36f6:	8d a9       	ldd	r24, Y+53	; 0x35
    36f8:	82 95       	swap	r24
    36fa:	86 95       	lsr	r24
    36fc:	87 70       	andi	r24, 0x07	; 7
    36fe:	98 2f       	mov	r25, r24
    3700:	91 70       	andi	r25, 0x01	; 1
    3702:	82 e0       	ldi	r24, 0x02	; 2
    3704:	65 e0       	ldi	r22, 0x05	; 5
    3706:	49 2f       	mov	r20, r25
    3708:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,6));
    370c:	8d a9       	ldd	r24, Y+53	; 0x35
    370e:	82 95       	swap	r24
    3710:	86 95       	lsr	r24
    3712:	86 95       	lsr	r24
    3714:	83 70       	andi	r24, 0x03	; 3
    3716:	98 2f       	mov	r25, r24
    3718:	91 70       	andi	r25, 0x01	; 1
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	66 e0       	ldi	r22, 0x06	; 6
    371e:	49 2f       	mov	r20, r25
    3720:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,7));
    3724:	8d a9       	ldd	r24, Y+53	; 0x35
    3726:	98 2f       	mov	r25, r24
    3728:	99 1f       	adc	r25, r25
    372a:	99 27       	eor	r25, r25
    372c:	99 1f       	adc	r25, r25
    372e:	82 e0       	ldi	r24, 0x02	; 2
    3730:	67 e0       	ldi	r22, 0x07	; 7
    3732:	49 2f       	mov	r20, r25
    3734:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
    3738:	83 e0       	ldi	r24, 0x03	; 3
    373a:	64 e0       	ldi	r22, 0x04	; 4
    373c:	41 e0       	ldi	r20, 0x01	; 1
    373e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	66 e0       	ldi	r22, 0x06	; 6
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e4       	ldi	r27, 0x40	; 64
    3754:	89 ab       	std	Y+49, r24	; 0x31
    3756:	9a ab       	std	Y+50, r25	; 0x32
    3758:	ab ab       	std	Y+51, r26	; 0x33
    375a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375c:	69 a9       	ldd	r22, Y+49	; 0x31
    375e:	7a a9       	ldd	r23, Y+50	; 0x32
    3760:	8b a9       	ldd	r24, Y+51	; 0x33
    3762:	9c a9       	ldd	r25, Y+52	; 0x34
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a ef       	ldi	r20, 0xFA	; 250
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	8d a7       	std	Y+45, r24	; 0x2d
    3776:	9e a7       	std	Y+46, r25	; 0x2e
    3778:	af a7       	std	Y+47, r26	; 0x2f
    377a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    377c:	6d a5       	ldd	r22, Y+45	; 0x2d
    377e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3780:	8f a5       	ldd	r24, Y+47	; 0x2f
    3782:	98 a9       	ldd	r25, Y+48	; 0x30
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3790:	88 23       	and	r24, r24
    3792:	2c f4       	brge	.+10     	; 0x379e <LCD_voidSend_4bitData+0xd2>
		__ticks = 1;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	9c a7       	std	Y+44, r25	; 0x2c
    379a:	8b a7       	std	Y+43, r24	; 0x2b
    379c:	3f c0       	rjmp	.+126    	; 0x381c <LCD_voidSend_4bitData+0x150>
	else if (__tmp > 65535)
    379e:	6d a5       	ldd	r22, Y+45	; 0x2d
    37a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    37a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a4:	98 a9       	ldd	r25, Y+48	; 0x30
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	4c f5       	brge	.+82     	; 0x3808 <LCD_voidSend_4bitData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b6:	69 a9       	ldd	r22, Y+49	; 0x31
    37b8:	7a a9       	ldd	r23, Y+50	; 0x32
    37ba:	8b a9       	ldd	r24, Y+51	; 0x33
    37bc:	9c a9       	ldd	r25, Y+52	; 0x34
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e2       	ldi	r20, 0x20	; 32
    37c4:	51 e4       	ldi	r21, 0x41	; 65
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	9c a7       	std	Y+44, r25	; 0x2c
    37dc:	8b a7       	std	Y+43, r24	; 0x2b
    37de:	0f c0       	rjmp	.+30     	; 0x37fe <LCD_voidSend_4bitData+0x132>
    37e0:	88 ec       	ldi	r24, 0xC8	; 200
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9a a7       	std	Y+42, r25	; 0x2a
    37e6:	89 a7       	std	Y+41, r24	; 0x29
    37e8:	89 a5       	ldd	r24, Y+41	; 0x29
    37ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <LCD_voidSend_4bitData+0x120>
    37f0:	9a a7       	std	Y+42, r25	; 0x2a
    37f2:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    37f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	9c a7       	std	Y+44, r25	; 0x2c
    37fc:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3800:	9c a5       	ldd	r25, Y+44	; 0x2c
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	69 f7       	brne	.-38     	; 0x37e0 <LCD_voidSend_4bitData+0x114>
    3806:	14 c0       	rjmp	.+40     	; 0x3830 <LCD_voidSend_4bitData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3808:	6d a5       	ldd	r22, Y+45	; 0x2d
    380a:	7e a5       	ldd	r23, Y+46	; 0x2e
    380c:	8f a5       	ldd	r24, Y+47	; 0x2f
    380e:	98 a9       	ldd	r25, Y+48	; 0x30
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9c a7       	std	Y+44, r25	; 0x2c
    381a:	8b a7       	std	Y+43, r24	; 0x2b
    381c:	8b a5       	ldd	r24, Y+43	; 0x2b
    381e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3820:	98 a7       	std	Y+40, r25	; 0x28
    3822:	8f a3       	std	Y+39, r24	; 0x27
    3824:	8f a1       	ldd	r24, Y+39	; 0x27
    3826:	98 a5       	ldd	r25, Y+40	; 0x28
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <LCD_voidSend_4bitData+0x15c>
    382c:	98 a7       	std	Y+40, r25	; 0x28
    382e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    3830:	83 e0       	ldi	r24, 0x03	; 3
    3832:	66 e0       	ldi	r22, 0x06	; 6
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	a8 e4       	ldi	r26, 0x48	; 72
    3840:	b3 e4       	ldi	r27, 0x43	; 67
    3842:	8b a3       	std	Y+35, r24	; 0x23
    3844:	9c a3       	std	Y+36, r25	; 0x24
    3846:	ad a3       	std	Y+37, r26	; 0x25
    3848:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    384a:	6b a1       	ldd	r22, Y+35	; 0x23
    384c:	7c a1       	ldd	r23, Y+36	; 0x24
    384e:	8d a1       	ldd	r24, Y+37	; 0x25
    3850:	9e a1       	ldd	r25, Y+38	; 0x26
    3852:	2b ea       	ldi	r18, 0xAB	; 171
    3854:	3a ea       	ldi	r19, 0xAA	; 170
    3856:	4a e2       	ldi	r20, 0x2A	; 42
    3858:	50 e4       	ldi	r21, 0x40	; 64
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	8f 8f       	std	Y+31, r24	; 0x1f
    3864:	98 a3       	std	Y+32, r25	; 0x20
    3866:	a9 a3       	std	Y+33, r26	; 0x21
    3868:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    386a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    386c:	78 a1       	ldd	r23, Y+32	; 0x20
    386e:	89 a1       	ldd	r24, Y+33	; 0x21
    3870:	9a a1       	ldd	r25, Y+34	; 0x22
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	1c f4       	brge	.+6      	; 0x3888 <LCD_voidSend_4bitData+0x1bc>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	8e 8f       	std	Y+30, r24	; 0x1e
    3886:	91 c0       	rjmp	.+290    	; 0x39aa <LCD_voidSend_4bitData+0x2de>
	else if (__tmp > 255)
    3888:	6f 8d       	ldd	r22, Y+31	; 0x1f
    388a:	78 a1       	ldd	r23, Y+32	; 0x20
    388c:	89 a1       	ldd	r24, Y+33	; 0x21
    388e:	9a a1       	ldd	r25, Y+34	; 0x22
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	53 e4       	ldi	r21, 0x43	; 67
    3898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	0c f0       	brlt	.+2      	; 0x38a2 <LCD_voidSend_4bitData+0x1d6>
    38a0:	7b c0       	rjmp	.+246    	; 0x3998 <LCD_voidSend_4bitData+0x2cc>
	{
		_delay_ms(__us / 1000.0);
    38a2:	6b a1       	ldd	r22, Y+35	; 0x23
    38a4:	7c a1       	ldd	r23, Y+36	; 0x24
    38a6:	8d a1       	ldd	r24, Y+37	; 0x25
    38a8:	9e a1       	ldd	r25, Y+38	; 0x26
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	4a e7       	ldi	r20, 0x7A	; 122
    38b0:	54 e4       	ldi	r21, 0x44	; 68
    38b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	8a 8f       	std	Y+26, r24	; 0x1a
    38bc:	9b 8f       	std	Y+27, r25	; 0x1b
    38be:	ac 8f       	std	Y+28, r26	; 0x1c
    38c0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    38c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	4a ef       	ldi	r20, 0xFA	; 250
    38d0:	54 e4       	ldi	r21, 0x44	; 68
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	8e 8b       	std	Y+22, r24	; 0x16
    38dc:	9f 8b       	std	Y+23, r25	; 0x17
    38de:	a8 8f       	std	Y+24, r26	; 0x18
    38e0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    38e2:	6e 89       	ldd	r22, Y+22	; 0x16
    38e4:	7f 89       	ldd	r23, Y+23	; 0x17
    38e6:	88 8d       	ldd	r24, Y+24	; 0x18
    38e8:	99 8d       	ldd	r25, Y+25	; 0x19
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	40 e8       	ldi	r20, 0x80	; 128
    38f0:	5f e3       	ldi	r21, 0x3F	; 63
    38f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f6:	88 23       	and	r24, r24
    38f8:	2c f4       	brge	.+10     	; 0x3904 <LCD_voidSend_4bitData+0x238>
		__ticks = 1;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9d 8b       	std	Y+21, r25	; 0x15
    3900:	8c 8b       	std	Y+20, r24	; 0x14
    3902:	3f c0       	rjmp	.+126    	; 0x3982 <LCD_voidSend_4bitData+0x2b6>
	else if (__tmp > 65535)
    3904:	6e 89       	ldd	r22, Y+22	; 0x16
    3906:	7f 89       	ldd	r23, Y+23	; 0x17
    3908:	88 8d       	ldd	r24, Y+24	; 0x18
    390a:	99 8d       	ldd	r25, Y+25	; 0x19
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	3f ef       	ldi	r19, 0xFF	; 255
    3910:	4f e7       	ldi	r20, 0x7F	; 127
    3912:	57 e4       	ldi	r21, 0x47	; 71
    3914:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3918:	18 16       	cp	r1, r24
    391a:	4c f5       	brge	.+82     	; 0x396e <LCD_voidSend_4bitData+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    391e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3920:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3922:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e2       	ldi	r20, 0x20	; 32
    392a:	51 e4       	ldi	r21, 0x41	; 65
    392c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	bc 01       	movw	r22, r24
    3936:	cd 01       	movw	r24, r26
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9d 8b       	std	Y+21, r25	; 0x15
    3942:	8c 8b       	std	Y+20, r24	; 0x14
    3944:	0f c0       	rjmp	.+30     	; 0x3964 <LCD_voidSend_4bitData+0x298>
    3946:	88 ec       	ldi	r24, 0xC8	; 200
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9b 8b       	std	Y+19, r25	; 0x13
    394c:	8a 8b       	std	Y+18, r24	; 0x12
    394e:	8a 89       	ldd	r24, Y+18	; 0x12
    3950:	9b 89       	ldd	r25, Y+19	; 0x13
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	f1 f7       	brne	.-4      	; 0x3952 <LCD_voidSend_4bitData+0x286>
    3956:	9b 8b       	std	Y+19, r25	; 0x13
    3958:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    395a:	8c 89       	ldd	r24, Y+20	; 0x14
    395c:	9d 89       	ldd	r25, Y+21	; 0x15
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	9d 8b       	std	Y+21, r25	; 0x15
    3962:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3964:	8c 89       	ldd	r24, Y+20	; 0x14
    3966:	9d 89       	ldd	r25, Y+21	; 0x15
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	69 f7       	brne	.-38     	; 0x3946 <LCD_voidSend_4bitData+0x27a>
    396c:	24 c0       	rjmp	.+72     	; 0x39b6 <LCD_voidSend_4bitData+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396e:	6e 89       	ldd	r22, Y+22	; 0x16
    3970:	7f 89       	ldd	r23, Y+23	; 0x17
    3972:	88 8d       	ldd	r24, Y+24	; 0x18
    3974:	99 8d       	ldd	r25, Y+25	; 0x19
    3976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	9d 8b       	std	Y+21, r25	; 0x15
    3980:	8c 8b       	std	Y+20, r24	; 0x14
    3982:	8c 89       	ldd	r24, Y+20	; 0x14
    3984:	9d 89       	ldd	r25, Y+21	; 0x15
    3986:	99 8b       	std	Y+17, r25	; 0x11
    3988:	88 8b       	std	Y+16, r24	; 0x10
    398a:	88 89       	ldd	r24, Y+16	; 0x10
    398c:	99 89       	ldd	r25, Y+17	; 0x11
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <LCD_voidSend_4bitData+0x2c2>
    3992:	99 8b       	std	Y+17, r25	; 0x11
    3994:	88 8b       	std	Y+16, r24	; 0x10
    3996:	0f c0       	rjmp	.+30     	; 0x39b6 <LCD_voidSend_4bitData+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3998:	6f 8d       	ldd	r22, Y+31	; 0x1f
    399a:	78 a1       	ldd	r23, Y+32	; 0x20
    399c:	89 a1       	ldd	r24, Y+33	; 0x21
    399e:	9a a1       	ldd	r25, Y+34	; 0x22
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	8e 8f       	std	Y+30, r24	; 0x1e
    39aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b0:	8a 95       	dec	r24
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <LCD_voidSend_4bitData+0x2e4>
    39b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(200);
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN4,GET_BIT(copy_u8data,0));
    39b6:	8d a9       	ldd	r24, Y+53	; 0x35
    39b8:	98 2f       	mov	r25, r24
    39ba:	91 70       	andi	r25, 0x01	; 1
    39bc:	82 e0       	ldi	r24, 0x02	; 2
    39be:	64 e0       	ldi	r22, 0x04	; 4
    39c0:	49 2f       	mov	r20, r25
    39c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN5,GET_BIT(copy_u8data,1));
    39c6:	8d a9       	ldd	r24, Y+53	; 0x35
    39c8:	86 95       	lsr	r24
    39ca:	98 2f       	mov	r25, r24
    39cc:	91 70       	andi	r25, 0x01	; 1
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	65 e0       	ldi	r22, 0x05	; 5
    39d2:	49 2f       	mov	r20, r25
    39d4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN6,GET_BIT(copy_u8data,2));
    39d8:	8d a9       	ldd	r24, Y+53	; 0x35
    39da:	86 95       	lsr	r24
    39dc:	86 95       	lsr	r24
    39de:	98 2f       	mov	r25, r24
    39e0:	91 70       	andi	r25, 0x01	; 1
    39e2:	82 e0       	ldi	r24, 0x02	; 2
    39e4:	66 e0       	ldi	r22, 0x06	; 6
    39e6:	49 2f       	mov	r20, r25
    39e8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_PORT,DIO_PIN7,GET_BIT(copy_u8data,3));
    39ec:	8d a9       	ldd	r24, Y+53	; 0x35
    39ee:	86 95       	lsr	r24
    39f0:	86 95       	lsr	r24
    39f2:	86 95       	lsr	r24
    39f4:	98 2f       	mov	r25, r24
    39f6:	91 70       	andi	r25, 0x01	; 1
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	67 e0       	ldi	r22, 0x07	; 7
    39fc:	49 2f       	mov	r20, r25
    39fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8RS,DIO_HIGH);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_HIGH);
    3a02:	83 e0       	ldi	r24, 0x03	; 3
    3a04:	66 e0       	ldi	r22, 0x06	; 6
    3a06:	41 e0       	ldi	r20, 0x01	; 1
    3a08:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	a0 e0       	ldi	r26, 0x00	; 0
    3a12:	b0 e4       	ldi	r27, 0x40	; 64
    3a14:	8b 87       	std	Y+11, r24	; 0x0b
    3a16:	9c 87       	std	Y+12, r25	; 0x0c
    3a18:	ad 87       	std	Y+13, r26	; 0x0d
    3a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	4a ef       	ldi	r20, 0xFA	; 250
    3a2a:	54 e4       	ldi	r21, 0x44	; 68
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	8f 83       	std	Y+7, r24	; 0x07
    3a36:	98 87       	std	Y+8, r25	; 0x08
    3a38:	a9 87       	std	Y+9, r26	; 0x09
    3a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3e:	78 85       	ldd	r23, Y+8	; 0x08
    3a40:	89 85       	ldd	r24, Y+9	; 0x09
    3a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e8       	ldi	r20, 0x80	; 128
    3a4a:	5f e3       	ldi	r21, 0x3F	; 63
    3a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a50:	88 23       	and	r24, r24
    3a52:	2c f4       	brge	.+10     	; 0x3a5e <LCD_voidSend_4bitData+0x392>
		__ticks = 1;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	3f c0       	rjmp	.+126    	; 0x3adc <LCD_voidSend_4bitData+0x410>
	else if (__tmp > 65535)
    3a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a60:	78 85       	ldd	r23, Y+8	; 0x08
    3a62:	89 85       	ldd	r24, Y+9	; 0x09
    3a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	3f ef       	ldi	r19, 0xFF	; 255
    3a6a:	4f e7       	ldi	r20, 0x7F	; 127
    3a6c:	57 e4       	ldi	r21, 0x47	; 71
    3a6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a72:	18 16       	cp	r1, r24
    3a74:	4c f5       	brge	.+82     	; 0x3ac8 <LCD_voidSend_4bitData+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e2       	ldi	r20, 0x20	; 32
    3a84:	51 e4       	ldi	r21, 0x41	; 65
    3a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	bc 01       	movw	r22, r24
    3a90:	cd 01       	movw	r24, r26
    3a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	9e 83       	std	Y+6, r25	; 0x06
    3a9c:	8d 83       	std	Y+5, r24	; 0x05
    3a9e:	0f c0       	rjmp	.+30     	; 0x3abe <LCD_voidSend_4bitData+0x3f2>
    3aa0:	88 ec       	ldi	r24, 0xC8	; 200
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	9c 83       	std	Y+4, r25	; 0x04
    3aa6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <LCD_voidSend_4bitData+0x3e0>
    3ab0:	9c 83       	std	Y+4, r25	; 0x04
    3ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	9e 83       	std	Y+6, r25	; 0x06
    3abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	69 f7       	brne	.-38     	; 0x3aa0 <LCD_voidSend_4bitData+0x3d4>
    3ac6:	14 c0       	rjmp	.+40     	; 0x3af0 <LCD_voidSend_4bitData+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aca:	78 85       	ldd	r23, Y+8	; 0x08
    3acc:	89 85       	ldd	r24, Y+9	; 0x09
    3ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	9e 83       	std	Y+6, r25	; 0x06
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	9a 83       	std	Y+2, r25	; 0x02
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_voidSend_4bitData+0x41c>
    3aec:	9a 83       	std	Y+2, r25	; 0x02
    3aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CNT_PORT,LCD_u8EN,DIO_LOW);
    3af0:	83 e0       	ldi	r24, 0x03	; 3
    3af2:	66 e0       	ldi	r22, 0x06	; 6
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_voidSetPinValue>
}
    3afa:	e5 96       	adiw	r28, 0x35	; 53
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	cf 91       	pop	r28
    3b08:	df 91       	pop	r29
    3b0a:	08 95       	ret

00003b0c <LCD_voidSend_4bitString>:


void LCD_voidSend_4bitString (char *copy_ptrString)
{
    3b0c:	df 93       	push	r29
    3b0e:	cf 93       	push	r28
    3b10:	00 d0       	rcall	.+0      	; 0x3b12 <LCD_voidSend_4bitString+0x6>
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01
    3b1a:	0b c0       	rjmp	.+22     	; 0x3b32 <LCD_voidSend_4bitString+0x26>
	while ( *copy_ptrString > 0 )
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
    3b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b20:	20 81       	ld	r18, Z
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	9a 83       	std	Y+2, r25	; 0x02
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	82 2f       	mov	r24, r18
    3b2e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <LCD_voidSend_4bitData>
}


void LCD_voidSend_4bitString (char *copy_ptrString)
{
	while ( *copy_ptrString > 0 )
    3b32:	e9 81       	ldd	r30, Y+1	; 0x01
    3b34:	fa 81       	ldd	r31, Y+2	; 0x02
    3b36:	80 81       	ld	r24, Z
    3b38:	88 23       	and	r24, r24
    3b3a:	81 f7       	brne	.-32     	; 0x3b1c <LCD_voidSend_4bitString+0x10>
	{
		LCD_voidSend_4bitData (*copy_ptrString++);
	}
}
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <LCD_void4bitDisplayNumber>:

extern void LCD_void4bitDisplayNumber(u32 x)
{
    3b46:	ef 92       	push	r14
    3b48:	ff 92       	push	r15
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	28 97       	sbiw	r28, 0x08	; 8
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	6d 83       	std	Y+5, r22	; 0x05
    3b64:	7e 83       	std	Y+6, r23	; 0x06
    3b66:	8f 83       	std	Y+7, r24	; 0x07
    3b68:	98 87       	std	Y+8, r25	; 0x08
	u32 y = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	a0 e0       	ldi	r26, 0x00	; 0
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	ab 83       	std	Y+3, r26	; 0x03
    3b78:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	af 81       	ldd	r26, Y+7	; 0x07
    3b80:	b8 85       	ldd	r27, Y+8	; 0x08
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	a1 05       	cpc	r26, r1
    3b86:	b1 05       	cpc	r27, r1
    3b88:	d1 f5       	brne	.+116    	; 0x3bfe <LCD_void4bitDisplayNumber+0xb8>
	{
		LCD_voidSend_4bitData('0');
    3b8a:	80 e3       	ldi	r24, 0x30	; 48
    3b8c:	0e 94 66 1b 	call	0x36cc	; 0x36cc <LCD_voidSend_4bitData>
    3b90:	36 c0       	rjmp	.+108    	; 0x3bfe <LCD_void4bitDisplayNumber+0xb8>
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	9a 81       	ldd	r25, Y+2	; 0x02
    3b96:	ab 81       	ldd	r26, Y+3	; 0x03
    3b98:	bc 81       	ldd	r27, Y+4	; 0x04
    3b9a:	2a e0       	ldi	r18, 0x0A	; 10
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	0e 94 93 21 	call	0x4326	; 0x4326 <__mulsi3>
    3baa:	7b 01       	movw	r14, r22
    3bac:	8c 01       	movw	r16, r24
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	af 81       	ldd	r26, Y+7	; 0x07
    3bb4:	b8 85       	ldd	r27, Y+8	; 0x08
    3bb6:	2a e0       	ldi	r18, 0x0A	; 10
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	8e 0d       	add	r24, r14
    3bcc:	9f 1d       	adc	r25, r15
    3bce:	a0 1f       	adc	r26, r16
    3bd0:	b1 1f       	adc	r27, r17
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	ab 83       	std	Y+3, r26	; 0x03
    3bd8:	bc 83       	std	Y+4, r27	; 0x04
		x = (x / 10);
    3bda:	8d 81       	ldd	r24, Y+5	; 0x05
    3bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bde:	af 81       	ldd	r26, Y+7	; 0x07
    3be0:	b8 85       	ldd	r27, Y+8	; 0x08
    3be2:	2a e0       	ldi	r18, 0x0A	; 10
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	bc 01       	movw	r22, r24
    3bec:	cd 01       	movw	r24, r26
    3bee:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    3bf2:	da 01       	movw	r26, r20
    3bf4:	c9 01       	movw	r24, r18
    3bf6:	8d 83       	std	Y+5, r24	; 0x05
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	af 83       	std	Y+7, r26	; 0x07
    3bfc:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (x < 0) {
		LCD_voidSend_4bitData('-');
		x *= -1;
	}
	while (x != 0) {
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	af 81       	ldd	r26, Y+7	; 0x07
    3c04:	b8 85       	ldd	r27, Y+8	; 0x08
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	a1 05       	cpc	r26, r1
    3c0a:	b1 05       	cpc	r27, r1
    3c0c:	11 f6       	brne	.-124    	; 0x3b92 <LCD_void4bitDisplayNumber+0x4c>
    3c0e:	23 c0       	rjmp	.+70     	; 0x3c56 <LCD_void4bitDisplayNumber+0x110>
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
		LCD_voidSend_4bitData((y % 10) + 48);
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	ab 81       	ldd	r26, Y+3	; 0x03
    3c16:	bc 81       	ldd	r27, Y+4	; 0x04
    3c18:	2a e0       	ldi	r18, 0x0A	; 10
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	bc 01       	movw	r22, r24
    3c22:	cd 01       	movw	r24, r26
    3c24:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	80 5d       	subi	r24, 0xD0	; 208
    3c2e:	0e 94 66 1b 	call	0x36cc	; 0x36cc <LCD_voidSend_4bitData>
		y = (y / 10);
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	ab 81       	ldd	r26, Y+3	; 0x03
    3c38:	bc 81       	ldd	r27, Y+4	; 0x04
    3c3a:	2a e0       	ldi	r18, 0x0A	; 10
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 b2 21 	call	0x4364	; 0x4364 <__udivmodsi4>
    3c4a:	da 01       	movw	r26, r20
    3c4c:	c9 01       	movw	r24, r18
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	ab 83       	std	Y+3, r26	; 0x03
    3c54:	bc 83       	std	Y+4, r27	; 0x04
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    3c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    3c5e:	81 30       	cpi	r24, 0x01	; 1
    3c60:	91 05       	cpc	r25, r1
    3c62:	a1 05       	cpc	r26, r1
    3c64:	b1 05       	cpc	r27, r1
    3c66:	a1 f6       	brne	.-88     	; 0x3c10 <LCD_void4bitDisplayNumber+0xca>
		LCD_voidSend_4bitData((y % 10) + 48);
		y = (y / 10);
	}
}
    3c68:	28 96       	adiw	r28, 0x08	; 8
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	ff 90       	pop	r15
    3c7e:	ef 90       	pop	r14
    3c80:	08 95       	ret

00003c82 <LCD_voidGoToPos>:


void LCD_voidGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <LCD_voidGoToPos+0x6>
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	89 83       	std	Y+1, r24	; 0x01
    3c8e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_Command(0b10000000);
    3c90:	80 e8       	ldi	r24, 0x80	; 128
    3c92:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
		if(Copy_u8RowNum==1)
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	81 30       	cpi	r24, 0x01	; 1
    3c9a:	59 f4       	brne	.+22     	; 0x3cb2 <LCD_voidGoToPos+0x30>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	88 23       	and	r24, r24
    3ca0:	a9 f0       	breq	.+42     	; 0x3ccc <LCD_voidGoToPos+0x4a>
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	81 31       	cpi	r24, 0x11	; 17
    3ca6:	90 f4       	brcc	.+36     	; 0x3ccc <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(127+Copy_u8ColNum);}
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	81 58       	subi	r24, 0x81	; 129
    3cac:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
    3cb0:	0d c0       	rjmp	.+26     	; 0x3ccc <LCD_voidGoToPos+0x4a>
		}
		else if (Copy_u8RowNum==2)
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	82 30       	cpi	r24, 0x02	; 2
    3cb6:	51 f4       	brne	.+20     	; 0x3ccc <LCD_voidGoToPos+0x4a>
		{
			if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cba:	88 23       	and	r24, r24
    3cbc:	39 f0       	breq	.+14     	; 0x3ccc <LCD_voidGoToPos+0x4a>
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	81 31       	cpi	r24, 0x11	; 17
    3cc2:	20 f4       	brcc	.+8      	; 0x3ccc <LCD_voidGoToPos+0x4a>
			{LCD_voidSend_Command(191+Copy_u8ColNum);}
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	81 54       	subi	r24, 0x41	; 65
    3cc8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <LCD_voidSend_Command>
		}
}
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	cf 91       	pop	r28
    3cd2:	df 91       	pop	r29
    3cd4:	08 95       	ret

00003cd6 <LCD_void4bitGoToPos>:
void LCD_void4bitGoToPos(u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    3cd6:	df 93       	push	r29
    3cd8:	cf 93       	push	r28
    3cda:	00 d0       	rcall	.+0      	; 0x3cdc <LCD_void4bitGoToPos+0x6>
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSend_4bitCommand(0b10000000);
    3ce4:	80 e8       	ldi	r24, 0x80	; 128
    3ce6:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
			if(Copy_u8RowNum==1)
    3cea:	89 81       	ldd	r24, Y+1	; 0x01
    3cec:	81 30       	cpi	r24, 0x01	; 1
    3cee:	59 f4       	brne	.+22     	; 0x3d06 <LCD_void4bitGoToPos+0x30>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	88 23       	and	r24, r24
    3cf4:	a9 f0       	breq	.+42     	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
    3cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf8:	81 31       	cpi	r24, 0x11	; 17
    3cfa:	90 f4       	brcc	.+36     	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(127+Copy_u8ColNum);}
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	81 58       	subi	r24, 0x81	; 129
    3d00:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
    3d04:	0d c0       	rjmp	.+26     	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
			}
			else if (Copy_u8RowNum==2)
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	82 30       	cpi	r24, 0x02	; 2
    3d0a:	51 f4       	brne	.+20     	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
			{
				if (Copy_u8ColNum>0 && Copy_u8ColNum <=16)
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	88 23       	and	r24, r24
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	81 31       	cpi	r24, 0x11	; 17
    3d16:	20 f4       	brcc	.+8      	; 0x3d20 <LCD_void4bitGoToPos+0x4a>
				{LCD_voidSend_4bitCommand(191+Copy_u8ColNum);}
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	81 54       	subi	r24, 0x41	; 65
    3d1c:	0e 94 7d 18 	call	0x30fa	; 0x30fa <LCD_voidSend_4bitCommand>
			}
}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <KBD_voidInitialization>:
											{ '@', '0', '*'}
                                          };
/*********************************************************************************************************************************/
/* Initialization to set the keypad pins and ports */
extern void KBD_voidInitialization (void)
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
	/* This instruction is to set half of pins to be input ant the other half to be output */
	DIO_voidSetPortDirection(KBD_PORT_HW, 0b11110000 );
    3d32:	83 e0       	ldi	r24, 0x03	; 3
    3d34:	60 ef       	ldi	r22, 0xF0	; 240
    3d36:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_voidSetPortDirection>
	/* This instruction is to out high on the pins which are o/p and to switch the pull up resistors on for the i/p pins  */
	DIO_voidSetPortValue(KBD_PORT_HW ,0b01111111);
    3d3a:	83 e0       	ldi	r24, 0x03	; 3
    3d3c:	6f e7       	ldi	r22, 0x7F	; 127
    3d3e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <DIO_voidSetPortValue>
}
    3d42:	cf 91       	pop	r28
    3d44:	df 91       	pop	r29
    3d46:	08 95       	ret

00003d48 <KBD_u8GetKeyPressed>:


extern u8 KBD_u8GetKeyPressed(void)
{
    3d48:	df 93       	push	r29
    3d4a:	cf 93       	push	r28
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	63 97       	sbiw	r28, 0x13	; 19
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3d5c:	18 8a       	std	Y+16, r1	; 0x10
    3d5e:	00 c1       	rjmp	.+512    	; 0x3f60 <KBD_u8GetKeyPressed+0x218>
			{
					/* activate only one column, then read all rows  */
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
    3d60:	a2 e3       	ldi	r26, 0x32	; 50
    3d62:	b0 e0       	ldi	r27, 0x00	; 0
    3d64:	e2 e3       	ldi	r30, 0x32	; 50
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	80 81       	ld	r24, Z
    3d6a:	48 2f       	mov	r20, r24
    3d6c:	88 89       	ldd	r24, Y+16	; 0x10
    3d6e:	88 2f       	mov	r24, r24
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	fc 01       	movw	r30, r24
    3d74:	e5 58       	subi	r30, 0x85	; 133
    3d76:	fe 4f       	sbci	r31, 0xFE	; 254
    3d78:	80 81       	ld	r24, Z
    3d7a:	28 2f       	mov	r18, r24
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	02 2e       	mov	r0, r18
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <KBD_u8GetKeyPressed+0x42>
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	0a 94       	dec	r0
    3d8c:	e2 f7       	brpl	.-8      	; 0x3d86 <KBD_u8GetKeyPressed+0x3e>
    3d8e:	80 95       	com	r24
    3d90:	84 23       	and	r24, r20
    3d92:	8c 93       	st	X, r24
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;
    3d94:	88 89       	ldd	r24, Y+16	; 0x10
    3d96:	8a 8b       	std	Y+18, r24	; 0x12

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3d98:	1f 86       	std	Y+15, r1	; 0x0f
    3d9a:	c2 c0       	rjmp	.+388    	; 0x3f20 <KBD_u8GetKeyPressed+0x1d8>
					{
						/* Get the value of the row to check if it is pressed or not */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3d9c:	e0 e3       	ldi	r30, 0x30	; 48
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da8:	88 2f       	mov	r24, r24
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	fc 01       	movw	r30, r24
    3dae:	e9 58       	subi	r30, 0x89	; 137
    3db0:	fe 4f       	sbci	r31, 0xFE	; 254
    3db2:	80 81       	ld	r24, Z
    3db4:	88 2f       	mov	r24, r24
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	a9 01       	movw	r20, r18
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <KBD_u8GetKeyPressed+0x78>
    3dbc:	55 95       	asr	r21
    3dbe:	47 95       	ror	r20
    3dc0:	8a 95       	dec	r24
    3dc2:	e2 f7       	brpl	.-8      	; 0x3dbc <KBD_u8GetKeyPressed+0x74>
    3dc4:	ca 01       	movw	r24, r20
    3dc6:	81 70       	andi	r24, 0x01	; 1
    3dc8:	89 8b       	std	Y+17, r24	; 0x11
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	a0 ea       	ldi	r26, 0xA0	; 160
    3dd0:	b1 e4       	ldi	r27, 0x41	; 65
    3dd2:	8b 87       	std	Y+11, r24	; 0x0b
    3dd4:	9c 87       	std	Y+12, r25	; 0x0c
    3dd6:	ad 87       	std	Y+13, r26	; 0x0d
    3dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	4a ef       	ldi	r20, 0xFA	; 250
    3de8:	54 e4       	ldi	r21, 0x44	; 68
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8f 83       	std	Y+7, r24	; 0x07
    3df4:	98 87       	std	Y+8, r25	; 0x08
    3df6:	a9 87       	std	Y+9, r26	; 0x09
    3df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfc:	78 85       	ldd	r23, Y+8	; 0x08
    3dfe:	89 85       	ldd	r24, Y+9	; 0x09
    3e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	30 e0       	ldi	r19, 0x00	; 0
    3e06:	40 e8       	ldi	r20, 0x80	; 128
    3e08:	5f e3       	ldi	r21, 0x3F	; 63
    3e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e0e:	88 23       	and	r24, r24
    3e10:	2c f4       	brge	.+10     	; 0x3e1c <KBD_u8GetKeyPressed+0xd4>
		__ticks = 1;
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	8d 83       	std	Y+5, r24	; 0x05
    3e1a:	3f c0       	rjmp	.+126    	; 0x3e9a <KBD_u8GetKeyPressed+0x152>
	else if (__tmp > 65535)
    3e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1e:	78 85       	ldd	r23, Y+8	; 0x08
    3e20:	89 85       	ldd	r24, Y+9	; 0x09
    3e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
    3e28:	4f e7       	ldi	r20, 0x7F	; 127
    3e2a:	57 e4       	ldi	r21, 0x47	; 71
    3e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e30:	18 16       	cp	r1, r24
    3e32:	4c f5       	brge	.+82     	; 0x3e86 <KBD_u8GetKeyPressed+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 e2       	ldi	r20, 0x20	; 32
    3e42:	51 e4       	ldi	r21, 0x41	; 65
    3e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	bc 01       	movw	r22, r24
    3e4e:	cd 01       	movw	r24, r26
    3e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9e 83       	std	Y+6, r25	; 0x06
    3e5a:	8d 83       	std	Y+5, r24	; 0x05
    3e5c:	0f c0       	rjmp	.+30     	; 0x3e7c <KBD_u8GetKeyPressed+0x134>
    3e5e:	88 ec       	ldi	r24, 0xC8	; 200
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	8b 81       	ldd	r24, Y+3	; 0x03
    3e68:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <KBD_u8GetKeyPressed+0x122>
    3e6e:	9c 83       	std	Y+4, r25	; 0x04
    3e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	69 f7       	brne	.-38     	; 0x3e5e <KBD_u8GetKeyPressed+0x116>
    3e84:	14 c0       	rjmp	.+40     	; 0x3eae <KBD_u8GetKeyPressed+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e86:	6f 81       	ldd	r22, Y+7	; 0x07
    3e88:	78 85       	ldd	r23, Y+8	; 0x08
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9e 83       	std	Y+6, r25	; 0x06
    3e98:	8d 83       	std	Y+5, r24	; 0x05
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	f1 f7       	brne	.-4      	; 0x3ea6 <KBD_u8GetKeyPressed+0x15e>
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	89 83       	std	Y+1, r24	; 0x01
						/*This delay is to fix The bouncing Effect  */
						_delay_ms(20);
						/* Get the value again to make sure it is right after avoiding The Debouncing Effect  */
						Local_u8val = GET_BIT( KBD_PIN, KBD_u8Rows[j] );
    3eae:	e0 e3       	ldi	r30, 0x30	; 48
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	80 81       	ld	r24, Z
    3eb4:	28 2f       	mov	r18, r24
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eba:	88 2f       	mov	r24, r24
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	fc 01       	movw	r30, r24
    3ec0:	e9 58       	subi	r30, 0x89	; 137
    3ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec4:	80 81       	ld	r24, Z
    3ec6:	88 2f       	mov	r24, r24
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	a9 01       	movw	r20, r18
    3ecc:	02 c0       	rjmp	.+4      	; 0x3ed2 <KBD_u8GetKeyPressed+0x18a>
    3ece:	55 95       	asr	r21
    3ed0:	47 95       	ror	r20
    3ed2:	8a 95       	dec	r24
    3ed4:	e2 f7       	brpl	.-8      	; 0x3ece <KBD_u8GetKeyPressed+0x186>
    3ed6:	ca 01       	movw	r24, r20
    3ed8:	81 70       	andi	r24, 0x01	; 1
    3eda:	89 8b       	std	Y+17, r24	; 0x11
						/* Store the row index which is the counter of the for loop */
						Local_u8RowIndex = j;
    3edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ede:	8b 8b       	std	Y+19, r24	; 0x13

						/* Check if the key is pressed or not by getting the pin value of the row */
						if (Local_u8val==KBD_KEY_PRESSED)
    3ee0:	89 89       	ldd	r24, Y+17	; 0x11
    3ee2:	88 23       	and	r24, r24
    3ee4:	d1 f4       	brne	.+52     	; 0x3f1a <KBD_u8GetKeyPressed+0x1d2>
						{
							/* Return a value from the global array  */
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
    3ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	8a 89       	ldd	r24, Y+18	; 0x12
    3eee:	48 2f       	mov	r20, r24
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	c9 01       	movw	r24, r18
    3ef4:	88 0f       	add	r24, r24
    3ef6:	99 1f       	adc	r25, r25
    3ef8:	82 0f       	add	r24, r18
    3efa:	93 1f       	adc	r25, r19
    3efc:	84 0f       	add	r24, r20
    3efe:	95 1f       	adc	r25, r21
    3f00:	fc 01       	movw	r30, r24
    3f02:	e2 58       	subi	r30, 0x82	; 130
    3f04:	fe 4f       	sbci	r31, 0xFE	; 254
    3f06:	80 81       	ld	r24, Z

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
			}
	}
}
    3f08:	63 96       	adiw	r28, 0x13	; 19
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	cf 91       	pop	r28
    3f16:	df 91       	pop	r29
    3f18:	08 95       	ret
					CLR_BIT( KBD_PORT, KBD_u8Cols[i] );
					/* Store the column index which is the counter of the for loop */
					Local_u8ColumnIndex=i;

					/* The second for loop is to check on each row to cofirm if it is the one or not */
					for(u8 j=0; j<KBD_ROW_NUM; j++)
    3f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1c:	8f 5f       	subi	r24, 0xFF	; 255
    3f1e:	8f 87       	std	Y+15, r24	; 0x0f
    3f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f22:	84 30       	cpi	r24, 0x04	; 4
    3f24:	08 f4       	brcc	.+2      	; 0x3f28 <KBD_u8GetKeyPressed+0x1e0>
    3f26:	3a cf       	rjmp	.-396    	; 0x3d9c <KBD_u8GetKeyPressed+0x54>
							return KBD_u8Keys[Local_u8RowIndex][Local_u8ColumnIndex];
						}
					}

					/* Deactivate the column again, to activate another column in the next iteration  */
					SET_BIT( KBD_PORT, KBD_u8Cols[i] );
    3f28:	a2 e3       	ldi	r26, 0x32	; 50
    3f2a:	b0 e0       	ldi	r27, 0x00	; 0
    3f2c:	e2 e3       	ldi	r30, 0x32	; 50
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	80 81       	ld	r24, Z
    3f32:	48 2f       	mov	r20, r24
    3f34:	88 89       	ldd	r24, Y+16	; 0x10
    3f36:	88 2f       	mov	r24, r24
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	e5 58       	subi	r30, 0x85	; 133
    3f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f40:	80 81       	ld	r24, Z
    3f42:	28 2f       	mov	r18, r24
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	02 2e       	mov	r0, r18
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <KBD_u8GetKeyPressed+0x20a>
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	0a 94       	dec	r0
    3f54:	e2 f7       	brpl	.-8      	; 0x3f4e <KBD_u8GetKeyPressed+0x206>
    3f56:	84 2b       	or	r24, r20
    3f58:	8c 93       	st	X, r24

	while (1)
	{

		/* The first for loop is to check on each column individually to set it as 0 */
		for (u8 i=0 ; i < KBD_COL_NUM ; i++)
    3f5a:	88 89       	ldd	r24, Y+16	; 0x10
    3f5c:	8f 5f       	subi	r24, 0xFF	; 255
    3f5e:	88 8b       	std	Y+16, r24	; 0x10
    3f60:	88 89       	ldd	r24, Y+16	; 0x10
    3f62:	83 30       	cpi	r24, 0x03	; 3
    3f64:	08 f4       	brcc	.+2      	; 0x3f68 <KBD_u8GetKeyPressed+0x220>
    3f66:	fc ce       	rjmp	.-520    	; 0x3d60 <KBD_u8GetKeyPressed+0x18>
    3f68:	f9 ce       	rjmp	.-526    	; 0x3d5c <KBD_u8GetKeyPressed+0x14>

00003f6a <main>:

/* Global array for the signal values */
u32 Global_u16Signal[100];
u32 Global_u8timer[100];
void main (void)
{
    3f6a:	0f 93       	push	r16
    3f6c:	1f 93       	push	r17
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	e3 97       	sbiw	r28, 0x33	; 51
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
	for (u8 i=0; i<100;i++)
    3f82:	1d 8e       	std	Y+29, r1	; 0x1d
    3f84:	1f c0       	rjmp	.+62     	; 0x3fc4 <main+0x5a>
	{
		 Global_u16Signal[i]=0;
    3f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f88:	88 2f       	mov	r24, r24
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	88 0f       	add	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	88 0f       	add	r24, r24
    3f92:	99 1f       	adc	r25, r25
    3f94:	fc 01       	movw	r30, r24
    3f96:	ee 5d       	subi	r30, 0xDE	; 222
    3f98:	fc 4f       	sbci	r31, 0xFC	; 252
    3f9a:	10 82       	st	Z, r1
    3f9c:	11 82       	std	Z+1, r1	; 0x01
    3f9e:	12 82       	std	Z+2, r1	; 0x02
    3fa0:	13 82       	std	Z+3, r1	; 0x03
		 Global_u8timer[i]=0;
    3fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fa4:	88 2f       	mov	r24, r24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	ee 56       	subi	r30, 0x6E	; 110
    3fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fb6:	10 82       	st	Z, r1
    3fb8:	11 82       	std	Z+1, r1	; 0x01
    3fba:	12 82       	std	Z+2, r1	; 0x02
    3fbc:	13 82       	std	Z+3, r1	; 0x03
/* Global array for the signal values */
u32 Global_u16Signal[100];
u32 Global_u8timer[100];
void main (void)
{
	for (u8 i=0; i<100;i++)
    3fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc0:	8f 5f       	subi	r24, 0xFF	; 255
    3fc2:	8d 8f       	std	Y+29, r24	; 0x1d
    3fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc6:	84 36       	cpi	r24, 0x64	; 100
    3fc8:	f0 f2       	brcs	.-68     	; 0x3f86 <main+0x1c>
	{
		 Global_u16Signal[i]=0;
		 Global_u8timer[i]=0;
	}
	f32 Local_f32Adc_value1 = 0;
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a0 e0       	ldi	r26, 0x00	; 0
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	88 ab       	std	Y+48, r24	; 0x30
    3fd4:	99 ab       	std	Y+49, r25	; 0x31
    3fd6:	aa ab       	std	Y+50, r26	; 0x32
    3fd8:	bb ab       	std	Y+51, r27	; 0x33
	f32 Local_f32Adc_value2 = 0;
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	a0 e0       	ldi	r26, 0x00	; 0
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	8c a7       	std	Y+44, r24	; 0x2c
    3fe4:	9d a7       	std	Y+45, r25	; 0x2d
    3fe6:	ae a7       	std	Y+46, r26	; 0x2e
    3fe8:	bf a7       	std	Y+47, r27	; 0x2f
	f32 Local_f32Adc_volt1 = 0;
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	a0 e0       	ldi	r26, 0x00	; 0
    3ff0:	b0 e0       	ldi	r27, 0x00	; 0
    3ff2:	88 a7       	std	Y+40, r24	; 0x28
    3ff4:	99 a7       	std	Y+41, r25	; 0x29
    3ff6:	aa a7       	std	Y+42, r26	; 0x2a
    3ff8:	bb a7       	std	Y+43, r27	; 0x2b
	f32 Local_f32Adc_volt2 = 0;
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	a0 e0       	ldi	r26, 0x00	; 0
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	8c a3       	std	Y+36, r24	; 0x24
    4004:	9d a3       	std	Y+37, r25	; 0x25
    4006:	ae a3       	std	Y+38, r26	; 0x26
    4008:	bf a3       	std	Y+39, r27	; 0x27
	f32 Local_f32Temp = 0;
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	88 a3       	std	Y+32, r24	; 0x20
    4014:	99 a3       	std	Y+33, r25	; 0x21
    4016:	aa a3       	std	Y+34, r26	; 0x22
    4018:	bb a3       	std	Y+35, r27	; 0x23
	/* Initialize ADC */
	ADC_voidInitTEMP();
    401a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <ADC_voidInitTEMP>
	/* Initialize the USART using the Pre-Configuration */
	UART_Init();
    401e:	0e 94 2a 07 	call	0xe54	; 0xe54 <UART_Init>
	/*
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_INPUT);
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN1,DIO_INPUT);
	*/
	/* Initialize the LCD 16*2 Uing the 4 Bit Mode  */
	LCD_4bitIntialization();
    4022:	0e 94 ac 1a 	call	0x3558	; 0x3558 <LCD_4bitIntialization>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	a8 e4       	ldi	r26, 0x48	; 72
    402c:	b3 e4       	ldi	r27, 0x43	; 67
    402e:	89 8f       	std	Y+25, r24	; 0x19
    4030:	9a 8f       	std	Y+26, r25	; 0x1a
    4032:	ab 8f       	std	Y+27, r26	; 0x1b
    4034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4036:	69 8d       	ldd	r22, Y+25	; 0x19
    4038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	4a ef       	ldi	r20, 0xFA	; 250
    4044:	54 e4       	ldi	r21, 0x44	; 68
    4046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404a:	dc 01       	movw	r26, r24
    404c:	cb 01       	movw	r24, r22
    404e:	8d 8b       	std	Y+21, r24	; 0x15
    4050:	9e 8b       	std	Y+22, r25	; 0x16
    4052:	af 8b       	std	Y+23, r26	; 0x17
    4054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4056:	6d 89       	ldd	r22, Y+21	; 0x15
    4058:	7e 89       	ldd	r23, Y+22	; 0x16
    405a:	8f 89       	ldd	r24, Y+23	; 0x17
    405c:	98 8d       	ldd	r25, Y+24	; 0x18
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e8       	ldi	r20, 0x80	; 128
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    406a:	88 23       	and	r24, r24
    406c:	2c f4       	brge	.+10     	; 0x4078 <main+0x10e>
		__ticks = 1;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	9c 8b       	std	Y+20, r25	; 0x14
    4074:	8b 8b       	std	Y+19, r24	; 0x13
    4076:	3f c0       	rjmp	.+126    	; 0x40f6 <main+0x18c>
	else if (__tmp > 65535)
    4078:	6d 89       	ldd	r22, Y+21	; 0x15
    407a:	7e 89       	ldd	r23, Y+22	; 0x16
    407c:	8f 89       	ldd	r24, Y+23	; 0x17
    407e:	98 8d       	ldd	r25, Y+24	; 0x18
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	3f ef       	ldi	r19, 0xFF	; 255
    4084:	4f e7       	ldi	r20, 0x7F	; 127
    4086:	57 e4       	ldi	r21, 0x47	; 71
    4088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    408c:	18 16       	cp	r1, r24
    408e:	4c f5       	brge	.+82     	; 0x40e2 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4090:	69 8d       	ldd	r22, Y+25	; 0x19
    4092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e2       	ldi	r20, 0x20	; 32
    409e:	51 e4       	ldi	r21, 0x41	; 65
    40a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a4:	dc 01       	movw	r26, r24
    40a6:	cb 01       	movw	r24, r22
    40a8:	bc 01       	movw	r22, r24
    40aa:	cd 01       	movw	r24, r26
    40ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	9c 8b       	std	Y+20, r25	; 0x14
    40b6:	8b 8b       	std	Y+19, r24	; 0x13
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <main+0x16e>
    40ba:	88 ec       	ldi	r24, 0xC8	; 200
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9a 8b       	std	Y+18, r25	; 0x12
    40c0:	89 8b       	std	Y+17, r24	; 0x11
    40c2:	89 89       	ldd	r24, Y+17	; 0x11
    40c4:	9a 89       	ldd	r25, Y+18	; 0x12
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <main+0x15c>
    40ca:	9a 8b       	std	Y+18, r25	; 0x12
    40cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ce:	8b 89       	ldd	r24, Y+19	; 0x13
    40d0:	9c 89       	ldd	r25, Y+20	; 0x14
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	9c 8b       	std	Y+20, r25	; 0x14
    40d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d8:	8b 89       	ldd	r24, Y+19	; 0x13
    40da:	9c 89       	ldd	r25, Y+20	; 0x14
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	69 f7       	brne	.-38     	; 0x40ba <main+0x150>
    40e0:	14 c0       	rjmp	.+40     	; 0x410a <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	6d 89       	ldd	r22, Y+21	; 0x15
    40e4:	7e 89       	ldd	r23, Y+22	; 0x16
    40e6:	8f 89       	ldd	r24, Y+23	; 0x17
    40e8:	98 8d       	ldd	r25, Y+24	; 0x18
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9c 8b       	std	Y+20, r25	; 0x14
    40f4:	8b 8b       	std	Y+19, r24	; 0x13
    40f6:	8b 89       	ldd	r24, Y+19	; 0x13
    40f8:	9c 89       	ldd	r25, Y+20	; 0x14
    40fa:	98 8b       	std	Y+16, r25	; 0x10
    40fc:	8f 87       	std	Y+15, r24	; 0x0f
    40fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4100:	98 89       	ldd	r25, Y+16	; 0x10
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	f1 f7       	brne	.-4      	; 0x4102 <main+0x198>
    4106:	98 8b       	std	Y+16, r25	; 0x10
    4108:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	/* Counter for samples number */
	u8 Local_u8Counter;
	Local_u8Counter=0;
    410a:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 Local_u8LCDCounter;
	   Local_u8LCDCounter=0;
    410c:	1e 8e       	std	Y+30, r1	; 0x1e
	   Timer0_voidInit();
    410e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <Timer0_voidInit>
	while (1)
	{
		/* Read The ADC Values */
		Local_f32Adc_value1=ADC_u16GetRawData(ADCCH0);
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <ADC_u16GetRawData>
    411a:	aa 27       	eor	r26, r26
    411c:	97 fd       	sbrc	r25, 7
    411e:	a0 95       	com	r26
    4120:	ba 2f       	mov	r27, r26
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	88 ab       	std	Y+48, r24	; 0x30
    4130:	99 ab       	std	Y+49, r25	; 0x31
    4132:	aa ab       	std	Y+50, r26	; 0x32
    4134:	bb ab       	std	Y+51, r27	; 0x33
		//Local_f32Adc_value2=ADC_u16GetRawData(ADCCH1);
		Global_u16Signal[Local_u8Counter]=Local_f32Adc_value1; //- Local_f32Adc_value2;
    4136:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4138:	08 2f       	mov	r16, r24
    413a:	10 e0       	ldi	r17, 0x00	; 0
    413c:	68 a9       	ldd	r22, Y+48	; 0x30
    413e:	79 a9       	ldd	r23, Y+49	; 0x31
    4140:	8a a9       	ldd	r24, Y+50	; 0x32
    4142:	9b a9       	ldd	r25, Y+51	; 0x33
    4144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4148:	9b 01       	movw	r18, r22
    414a:	ac 01       	movw	r20, r24
    414c:	c8 01       	movw	r24, r16
    414e:	88 0f       	add	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	fc 01       	movw	r30, r24
    4158:	ee 5d       	subi	r30, 0xDE	; 222
    415a:	fc 4f       	sbci	r31, 0xFC	; 252
    415c:	20 83       	st	Z, r18
    415e:	31 83       	std	Z+1, r19	; 0x01
    4160:	42 83       	std	Z+2, r20	; 0x02
    4162:	53 83       	std	Z+3, r21	; 0x03

		/* Get the Local_f32Temperature value */
	//	Local_f32Temp = ((Global_u16Signal[Local_u8Counter]*500)/1023.0);
		Global_u8timer[Local_u8Counter]=TCNT0;
    4164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4166:	68 2f       	mov	r22, r24
    4168:	70 e0       	ldi	r23, 0x00	; 0
    416a:	e2 e5       	ldi	r30, 0x52	; 82
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	28 2f       	mov	r18, r24
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e0       	ldi	r20, 0x00	; 0
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	cb 01       	movw	r24, r22
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	88 0f       	add	r24, r24
    4180:	99 1f       	adc	r25, r25
    4182:	fc 01       	movw	r30, r24
    4184:	ee 56       	subi	r30, 0x6E	; 110
    4186:	fe 4f       	sbci	r31, 0xFE	; 254
    4188:	20 83       	st	Z, r18
    418a:	31 83       	std	Z+1, r19	; 0x01
    418c:	42 83       	std	Z+2, r20	; 0x02
    418e:	53 83       	std	Z+3, r21	; 0x03
		LCD_void4bitDisplayNumber((Global_u16Signal[Local_u8Counter]));
    4190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4192:	88 2f       	mov	r24, r24
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	fc 01       	movw	r30, r24
    41a0:	ee 5d       	subi	r30, 0xDE	; 222
    41a2:	fc 4f       	sbci	r31, 0xFC	; 252
    41a4:	80 81       	ld	r24, Z
    41a6:	91 81       	ldd	r25, Z+1	; 0x01
    41a8:	a2 81       	ldd	r26, Z+2	; 0x02
    41aa:	b3 81       	ldd	r27, Z+3	; 0x03
    41ac:	bc 01       	movw	r22, r24
    41ae:	cd 01       	movw	r24, r26
    41b0:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <LCD_void4bitDisplayNumber>
		LCD_voidSend_4bitData(44); //  ' , '
    41b4:	8c e2       	ldi	r24, 0x2C	; 44
    41b6:	0e 94 66 1b 	call	0x36cc	; 0x36cc <LCD_voidSend_4bitData>
		/* Frame Send Using UART */
		{
			UART_TransmitData(Start_Bit);
    41ba:	80 e4       	ldi	r24, 0x40	; 64
    41bc:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
			UART_voidSendNumber( (Global_u16Signal[Local_u8Counter]));
    41c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41c2:	88 2f       	mov	r24, r24
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	88 0f       	add	r24, r24
    41c8:	99 1f       	adc	r25, r25
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	fc 01       	movw	r30, r24
    41d0:	ee 5d       	subi	r30, 0xDE	; 222
    41d2:	fc 4f       	sbci	r31, 0xFC	; 252
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	a2 81       	ldd	r26, Z+2	; 0x02
    41da:	b3 81       	ldd	r27, Z+3	; 0x03
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_voidSendNumber>
			UART_TransmitData(Comma);
    41e4:	8c e2       	ldi	r24, 0x2C	; 44
    41e6:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
			UART_voidSendNumber((u32)Local_u8Counter);
    41ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41ec:	88 2f       	mov	r24, r24
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a0 e0       	ldi	r26, 0x00	; 0
    41f2:	b0 e0       	ldi	r27, 0x00	; 0
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_voidSendNumber>
			UART_TransmitData(Comma);
    41fc:	8c e2       	ldi	r24, 0x2C	; 44
    41fe:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
			UART_voidSendNumber(Global_u8timer[Local_u8Counter]);
    4202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4204:	88 2f       	mov	r24, r24
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	88 0f       	add	r24, r24
    420a:	99 1f       	adc	r25, r25
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	fc 01       	movw	r30, r24
    4212:	ee 56       	subi	r30, 0x6E	; 110
    4214:	fe 4f       	sbci	r31, 0xFE	; 254
    4216:	80 81       	ld	r24, Z
    4218:	91 81       	ldd	r25, Z+1	; 0x01
    421a:	a2 81       	ldd	r26, Z+2	; 0x02
    421c:	b3 81       	ldd	r27, Z+3	; 0x03
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_voidSendNumber>
//			UART_TransmitData(Global_u8timer[Local_u8Counter]);
			UART_TransmitData(End_Bit);
    4226:	8b e3       	ldi	r24, 0x3B	; 59
    4228:	0e 94 4d 07 	call	0xe9a	; 0xe9a <UART_TransmitData>
		{
			LCD_voidSend_4bitCommand(0x01);	// Clear display screen
			Local_u8LCDCounter=0;
		}*/
		/* Increment Samples Counter */
		Local_u8Counter++;
    422c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    422e:	8f 5f       	subi	r24, 0xFF	; 255
    4230:	8f 8f       	std	Y+31, r24	; 0x1f
		if (Local_u8Counter==100)
    4232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4234:	84 36       	cpi	r24, 0x64	; 100
    4236:	09 f4       	brne	.+2      	; 0x423a <main+0x2d0>
			Local_u8Counter=0;
    4238:	1f 8e       	std	Y+31, r1	; 0x1f
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	a0 e8       	ldi	r26, 0x80	; 128
    4240:	bf e3       	ldi	r27, 0x3F	; 63
    4242:	8b 87       	std	Y+11, r24	; 0x0b
    4244:	9c 87       	std	Y+12, r25	; 0x0c
    4246:	ad 87       	std	Y+13, r26	; 0x0d
    4248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424a:	6b 85       	ldd	r22, Y+11	; 0x0b
    424c:	7c 85       	ldd	r23, Y+12	; 0x0c
    424e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4250:	9e 85       	ldd	r25, Y+14	; 0x0e
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4a ef       	ldi	r20, 0xFA	; 250
    4258:	54 e4       	ldi	r21, 0x44	; 68
    425a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	8f 83       	std	Y+7, r24	; 0x07
    4264:	98 87       	std	Y+8, r25	; 0x08
    4266:	a9 87       	std	Y+9, r26	; 0x09
    4268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    426a:	6f 81       	ldd	r22, Y+7	; 0x07
    426c:	78 85       	ldd	r23, Y+8	; 0x08
    426e:	89 85       	ldd	r24, Y+9	; 0x09
    4270:	9a 85       	ldd	r25, Y+10	; 0x0a
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e8       	ldi	r20, 0x80	; 128
    4278:	5f e3       	ldi	r21, 0x3F	; 63
    427a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    427e:	88 23       	and	r24, r24
    4280:	2c f4       	brge	.+10     	; 0x428c <main+0x322>
		__ticks = 1;
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	9e 83       	std	Y+6, r25	; 0x06
    4288:	8d 83       	std	Y+5, r24	; 0x05
    428a:	3f c0       	rjmp	.+126    	; 0x430a <main+0x3a0>
	else if (__tmp > 65535)
    428c:	6f 81       	ldd	r22, Y+7	; 0x07
    428e:	78 85       	ldd	r23, Y+8	; 0x08
    4290:	89 85       	ldd	r24, Y+9	; 0x09
    4292:	9a 85       	ldd	r25, Y+10	; 0x0a
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	3f ef       	ldi	r19, 0xFF	; 255
    4298:	4f e7       	ldi	r20, 0x7F	; 127
    429a:	57 e4       	ldi	r21, 0x47	; 71
    429c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a0:	18 16       	cp	r1, r24
    42a2:	4c f5       	brge	.+82     	; 0x42f6 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e2       	ldi	r20, 0x20	; 32
    42b2:	51 e4       	ldi	r21, 0x41	; 65
    42b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	bc 01       	movw	r22, r24
    42be:	cd 01       	movw	r24, r26
    42c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
    42cc:	0f c0       	rjmp	.+30     	; 0x42ec <main+0x382>
    42ce:	88 ec       	ldi	r24, 0xC8	; 200
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	9c 83       	std	Y+4, r25	; 0x04
    42d4:	8b 83       	std	Y+3, r24	; 0x03
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	9c 81       	ldd	r25, Y+4	; 0x04
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <main+0x370>
    42de:	9c 83       	std	Y+4, r25	; 0x04
    42e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e2:	8d 81       	ldd	r24, Y+5	; 0x05
    42e4:	9e 81       	ldd	r25, Y+6	; 0x06
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ec:	8d 81       	ldd	r24, Y+5	; 0x05
    42ee:	9e 81       	ldd	r25, Y+6	; 0x06
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	69 f7       	brne	.-38     	; 0x42ce <main+0x364>
    42f4:	14 c0       	rjmp	.+40     	; 0x431e <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f6:	6f 81       	ldd	r22, Y+7	; 0x07
    42f8:	78 85       	ldd	r23, Y+8	; 0x08
    42fa:	89 85       	ldd	r24, Y+9	; 0x09
    42fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9e 83       	std	Y+6, r25	; 0x06
    4308:	8d 83       	std	Y+5, r24	; 0x05
    430a:	8d 81       	ldd	r24, Y+5	; 0x05
    430c:	9e 81       	ldd	r25, Y+6	; 0x06
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	89 83       	std	Y+1, r24	; 0x01
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	9a 81       	ldd	r25, Y+2	; 0x02
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <main+0x3ac>
    431a:	9a 83       	std	Y+2, r25	; 0x02
    431c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		/******************************************************************************************************/
		TCNT0=0;
    431e:	e2 e5       	ldi	r30, 0x52	; 82
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	10 82       	st	Z, r1
    4324:	f6 ce       	rjmp	.-532    	; 0x4112 <main+0x1a8>

00004326 <__mulsi3>:
    4326:	62 9f       	mul	r22, r18
    4328:	d0 01       	movw	r26, r0
    432a:	73 9f       	mul	r23, r19
    432c:	f0 01       	movw	r30, r0
    432e:	82 9f       	mul	r24, r18
    4330:	e0 0d       	add	r30, r0
    4332:	f1 1d       	adc	r31, r1
    4334:	64 9f       	mul	r22, r20
    4336:	e0 0d       	add	r30, r0
    4338:	f1 1d       	adc	r31, r1
    433a:	92 9f       	mul	r25, r18
    433c:	f0 0d       	add	r31, r0
    433e:	83 9f       	mul	r24, r19
    4340:	f0 0d       	add	r31, r0
    4342:	74 9f       	mul	r23, r20
    4344:	f0 0d       	add	r31, r0
    4346:	65 9f       	mul	r22, r21
    4348:	f0 0d       	add	r31, r0
    434a:	99 27       	eor	r25, r25
    434c:	72 9f       	mul	r23, r18
    434e:	b0 0d       	add	r27, r0
    4350:	e1 1d       	adc	r30, r1
    4352:	f9 1f       	adc	r31, r25
    4354:	63 9f       	mul	r22, r19
    4356:	b0 0d       	add	r27, r0
    4358:	e1 1d       	adc	r30, r1
    435a:	f9 1f       	adc	r31, r25
    435c:	bd 01       	movw	r22, r26
    435e:	cf 01       	movw	r24, r30
    4360:	11 24       	eor	r1, r1
    4362:	08 95       	ret

00004364 <__udivmodsi4>:
    4364:	a1 e2       	ldi	r26, 0x21	; 33
    4366:	1a 2e       	mov	r1, r26
    4368:	aa 1b       	sub	r26, r26
    436a:	bb 1b       	sub	r27, r27
    436c:	fd 01       	movw	r30, r26
    436e:	0d c0       	rjmp	.+26     	; 0x438a <__udivmodsi4_ep>

00004370 <__udivmodsi4_loop>:
    4370:	aa 1f       	adc	r26, r26
    4372:	bb 1f       	adc	r27, r27
    4374:	ee 1f       	adc	r30, r30
    4376:	ff 1f       	adc	r31, r31
    4378:	a2 17       	cp	r26, r18
    437a:	b3 07       	cpc	r27, r19
    437c:	e4 07       	cpc	r30, r20
    437e:	f5 07       	cpc	r31, r21
    4380:	20 f0       	brcs	.+8      	; 0x438a <__udivmodsi4_ep>
    4382:	a2 1b       	sub	r26, r18
    4384:	b3 0b       	sbc	r27, r19
    4386:	e4 0b       	sbc	r30, r20
    4388:	f5 0b       	sbc	r31, r21

0000438a <__udivmodsi4_ep>:
    438a:	66 1f       	adc	r22, r22
    438c:	77 1f       	adc	r23, r23
    438e:	88 1f       	adc	r24, r24
    4390:	99 1f       	adc	r25, r25
    4392:	1a 94       	dec	r1
    4394:	69 f7       	brne	.-38     	; 0x4370 <__udivmodsi4_loop>
    4396:	60 95       	com	r22
    4398:	70 95       	com	r23
    439a:	80 95       	com	r24
    439c:	90 95       	com	r25
    439e:	9b 01       	movw	r18, r22
    43a0:	ac 01       	movw	r20, r24
    43a2:	bd 01       	movw	r22, r26
    43a4:	cf 01       	movw	r24, r30
    43a6:	08 95       	ret

000043a8 <__prologue_saves__>:
    43a8:	2f 92       	push	r2
    43aa:	3f 92       	push	r3
    43ac:	4f 92       	push	r4
    43ae:	5f 92       	push	r5
    43b0:	6f 92       	push	r6
    43b2:	7f 92       	push	r7
    43b4:	8f 92       	push	r8
    43b6:	9f 92       	push	r9
    43b8:	af 92       	push	r10
    43ba:	bf 92       	push	r11
    43bc:	cf 92       	push	r12
    43be:	df 92       	push	r13
    43c0:	ef 92       	push	r14
    43c2:	ff 92       	push	r15
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
    43c8:	cf 93       	push	r28
    43ca:	df 93       	push	r29
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	ca 1b       	sub	r28, r26
    43d2:	db 0b       	sbc	r29, r27
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	09 94       	ijmp

000043e0 <__epilogue_restores__>:
    43e0:	2a 88       	ldd	r2, Y+18	; 0x12
    43e2:	39 88       	ldd	r3, Y+17	; 0x11
    43e4:	48 88       	ldd	r4, Y+16	; 0x10
    43e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    43e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    43ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    43ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    43ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    43f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    43f2:	b9 84       	ldd	r11, Y+9	; 0x09
    43f4:	c8 84       	ldd	r12, Y+8	; 0x08
    43f6:	df 80       	ldd	r13, Y+7	; 0x07
    43f8:	ee 80       	ldd	r14, Y+6	; 0x06
    43fa:	fd 80       	ldd	r15, Y+5	; 0x05
    43fc:	0c 81       	ldd	r16, Y+4	; 0x04
    43fe:	1b 81       	ldd	r17, Y+3	; 0x03
    4400:	aa 81       	ldd	r26, Y+2	; 0x02
    4402:	b9 81       	ldd	r27, Y+1	; 0x01
    4404:	ce 0f       	add	r28, r30
    4406:	d1 1d       	adc	r29, r1
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	ed 01       	movw	r28, r26
    4414:	08 95       	ret

00004416 <_exit>:
    4416:	f8 94       	cli

00004418 <__stop_program>:
    4418:	ff cf       	rjmp	.-2      	; 0x4418 <__stop_program>
